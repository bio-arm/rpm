From b12b7f9372424f5271a838c95605d9946c7ea1fb Mon Sep 17 00:00:00 2001
From: "Benjamin A. Beasley" <code@musicinmybrain.net>
Date: Thu, 4 Nov 2021 20:57:44 -0400
Subject: [PATCH] Replace unittest.TestCase.assert_ in Python tests
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This private method goes away in Python 3.11.

This commit applies a strict mechanical replacement with
unittest.TestCase.assertTrue().

This approach is not ideal—there is often a semantically better public
method, e.g. assertEqual(a, b) instead of assertTrue(a == b)—but it does
ensure we do not accidentally change the *meaning* of a test, especially
distinctions (or lack thereof) between False and None.
---
 .../annotation/TestAnnotationCopyAndClone.py  |  120 +-
 .../python/test/annotation/TestCVTerms.py     |   46 +-
 .../test/annotation/TestCVTerms_newSetters.py |   94 +-
 .../test/annotation/TestDate_newSetters.py    |  158 +--
 .../test/annotation/TestL3ModelHistory.py     |  352 ++---
 .../annotation/TestModelCreator_newSetters.py |   72 +-
 .../test/annotation/TestModelHistory.py       |  264 ++--
 .../annotation/TestModelHistory_newSetters.py |   52 +-
 .../test/annotation/TestRDFAnnotation.py      |  320 ++---
 .../test/annotation/TestRDFAnnotation2.py     |   78 +-
 .../test/annotation/TestRDFAnnotationC.py     |  240 ++--
 .../python/test/annotation/TestValidation.py  |   20 +-
 src/bindings/python/test/math/TestASTNode.py  |  974 ++++++-------
 .../python/test/math/TestL3FormulaParserC.py  | 1258 ++++++++---------
 .../python/test/math/TestMathReadFromFile1.py |   64 +-
 .../python/test/math/TestMathReadFromFile2.py |   98 +-
 .../python/test/math/TestReadMathML.py        |  486 +++----
 .../python/test/math/TestValidASTNode.py      |   38 +-
 .../python/test/sbml/TestAlgebraicRule.py     |   48 +-
 src/bindings/python/test/sbml/TestAncestor.py |  728 +++++-----
 .../python/test/sbml/TestAssignmentRule.py    |   60 +-
 .../python/test/sbml/TestCompartment.py       |  100 +-
 .../python/test/sbml/TestCompartmentType.py   |   38 +-
 .../sbml/TestCompartmentType_newSetters.py    |   18 +-
 .../test/sbml/TestCompartmentVolumeRule.py    |   18 +-
 .../test/sbml/TestCompartment_newSetters.py   |  108 +-
 .../python/test/sbml/TestConsistencyChecks.py |   30 +-
 .../python/test/sbml/TestConstraint.py        |   36 +-
 .../test/sbml/TestConstraint_newSetters.py    |   22 +-
 .../python/test/sbml/TestCopyAndClone.py      |  502 +++----
 src/bindings/python/test/sbml/TestDelay.py    |   50 +-
 src/bindings/python/test/sbml/TestEvent.py    |   76 +-
 .../python/test/sbml/TestEventAssignment.py   |   48 +-
 .../sbml/TestEventAssignment_newSetters.py    |   18 +-
 .../python/test/sbml/TestEvent_newSetters.py  |   90 +-
 .../test/sbml/TestFunctionDefinition.py       |   98 +-
 .../sbml/TestFunctionDefinition_newSetters.py |   28 +-
 .../test/sbml/TestGetMultipleObjects.py       |  244 ++--
 .../python/test/sbml/TestInitialAssignment.py |   48 +-
 .../sbml/TestInitialAssignment_newSetters.py  |   18 +-
 .../sbml/TestInternalConsistencyChecks.py     |  422 +++---
 .../python/test/sbml/TestKineticLaw.py        |   92 +-
 .../test/sbml/TestKineticLaw_newSetters.py    |   72 +-
 .../python/test/sbml/TestL3Compartment.py     |   82 +-
 src/bindings/python/test/sbml/TestL3Event.py  |   62 +-
 .../python/test/sbml/TestL3KineticLaw.py      |   48 +-
 .../python/test/sbml/TestL3LocalParameter.py  |   50 +-
 src/bindings/python/test/sbml/TestL3Model.py  |   80 +-
 .../python/test/sbml/TestL3Parameter.py       |   64 +-
 .../python/test/sbml/TestL3Reaction.py        |   76 +-
 .../python/test/sbml/TestL3Species.py         |  146 +-
 .../test/sbml/TestL3SpeciesReference.py       |   64 +-
 .../python/test/sbml/TestL3Trigger.py         |   54 +-
 src/bindings/python/test/sbml/TestL3Unit.py   |   46 +-
 src/bindings/python/test/sbml/TestListOf.py   |   36 +-
 src/bindings/python/test/sbml/TestModel.py    |  540 +++----
 .../python/test/sbml/TestModel_newSetters.py  |  442 +++---
 .../test/sbml/TestModifierSpeciesReference.py |   30 +-
 .../python/test/sbml/TestParameter.py         |   44 +-
 .../python/test/sbml/TestParameterRule.py     |   24 +-
 .../test/sbml/TestParameter_newSetters.py     |   46 +-
 src/bindings/python/test/sbml/TestPriority.py |   50 +-
 src/bindings/python/test/sbml/TestRateRule.py |   36 +-
 src/bindings/python/test/sbml/TestReaction.py |  128 +-
 .../test/sbml/TestReaction_newSetters.py      |  114 +-
 .../python/test/sbml/TestReadFromFile1.py     |  164 +--
 .../python/test/sbml/TestReadFromFile2.py     |  192 +--
 .../python/test/sbml/TestReadFromFile3.py     |  162 +--
 .../python/test/sbml/TestReadFromFile4.py     |   42 +-
 .../python/test/sbml/TestReadFromFile5.py     |  182 +--
 .../python/test/sbml/TestReadFromFile6.py     |  162 +--
 .../python/test/sbml/TestReadFromFile7.py     |  254 ++--
 .../python/test/sbml/TestReadFromFile8.py     |   32 +-
 .../python/test/sbml/TestReadFromFile9.py     |  158 +--
 src/bindings/python/test/sbml/TestReadSBML.py |  586 ++++----
 src/bindings/python/test/sbml/TestRule.py     |   24 +-
 .../python/test/sbml/TestRule_newSetters.py   |   42 +-
 .../test/sbml/TestSBMLConstructorException.py |   54 +-
 .../python/test/sbml/TestSBMLConvert.py       |  262 ++--
 .../python/test/sbml/TestSBMLConvertStrict.py |   86 +-
 .../python/test/sbml/TestSBMLDocument.py      |   88 +-
 .../python/test/sbml/TestSBMLError.py         |   68 +-
 .../python/test/sbml/TestSBMLNamespaces.py    |  110 +-
 .../python/test/sbml/TestSBMLParentObject.py  |  400 +++---
 src/bindings/python/test/sbml/TestSBase.py    |  528 +++----
 .../python/test/sbml/TestSBase_newSetters.py  |  612 ++++----
 src/bindings/python/test/sbml/TestSpecies.py  |   74 +-
 .../test/sbml/TestSpeciesConcentrationRule.py |   18 +-
 .../python/test/sbml/TestSpeciesReference.py  |   46 +-
 .../sbml/TestSpeciesReference_newSetters.py   |   78 +-
 .../python/test/sbml/TestSpeciesType.py       |   38 +-
 .../test/sbml/TestSpeciesType_newSetters.py   |   24 +-
 .../test/sbml/TestSpecies_newSetters.py       |  146 +-
 .../python/test/sbml/TestStoichiometryMath.py |   50 +-
 .../python/test/sbml/TestSyntaxChecker.py     |   34 +-
 src/bindings/python/test/sbml/TestTrigger.py  |   50 +-
 src/bindings/python/test/sbml/TestUnit.py     |   48 +-
 .../python/test/sbml/TestUnitDefinition.py    |   88 +-
 .../sbml/TestUnitDefinition_newSetters.py     |   46 +-
 src/bindings/python/test/sbml/TestUnitKind.py |  152 +-
 .../python/test/sbml/TestUnit_newSetters.py   |   46 +-
 .../python/test/sbml/TestWriteL3SBML.py       |   18 +-
 .../python/test/sbml/TestWriteSBML.py         |   18 +-
 .../python/test/xml/TestXMLAttributes.py      |   88 +-
 .../python/test/xml/TestXMLAttributesC.py     |  232 +--
 .../python/test/xml/TestXMLCopyAndClone.py    |  264 ++--
 src/bindings/python/test/xml/TestXMLError.py  |   62 +-
 src/bindings/python/test/xml/TestXMLErrorC.py |   24 +-
 .../python/test/xml/TestXMLNamespaces.py      |  176 +--
 src/bindings/python/test/xml/TestXMLNode.py   |  798 +++++------
 .../python/test/xml/TestXMLNode_newSetters.py |  116 +-
 .../python/test/xml/TestXMLOutputStream.py    |   22 +-
 src/bindings/python/test/xml/TestXMLToken.py  |  450 +++---
 .../test/xml/TestXMLToken_newSetters.py       |  202 +--
 src/bindings/python/test/xml/TestXMLTriple.py |   24 +-
 115 files changed, 8824 insertions(+), 8824 deletions(-)

diff --git a/src/bindings/python/test/annotation/TestAnnotationCopyAndClone.py b/src/bindings/python/test/annotation/TestAnnotationCopyAndClone.py
index cba7ab00a0..0318077b5a 100644
--- a/src/bindings/python/test/annotation/TestAnnotationCopyAndClone.py
+++ b/src/bindings/python/test/annotation/TestAnnotationCopyAndClone.py
@@ -40,14 +40,14 @@ class TestAnnotationCopyAndClone(unittest.TestCase):
   def test_CVTerm_assignmentOperator(self):
     CVTerm1 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     CVTerm1.addResource("http://www.geneontology.org/#GO:0005892")
-    self.assert_( CVTerm1.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( CVTerm1.getResources().getLength() == 1 )
-    self.assert_( CVTerm1.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
+    self.assertTrue( CVTerm1.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( CVTerm1.getResources().getLength() == 1 )
+    self.assertTrue( CVTerm1.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
     CVTerm2 = libsbml.CVTerm()
     CVTerm2 = CVTerm1
-    self.assert_( CVTerm2.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( CVTerm2.getResources().getLength() == 1 )
-    self.assert_( CVTerm2.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
+    self.assertTrue( CVTerm2.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( CVTerm2.getResources().getLength() == 1 )
+    self.assertTrue( CVTerm2.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
     CVTerm2 = None
     CVTerm1 = None
     pass  
@@ -55,13 +55,13 @@ def test_CVTerm_assignmentOperator(self):
   def test_CVTerm_clone(self):
     CVTerm1 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     CVTerm1.addResource("http://www.geneontology.org/#GO:0005892")
-    self.assert_( CVTerm1.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( CVTerm1.getResources().getLength() == 1 )
-    self.assert_( CVTerm1.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
+    self.assertTrue( CVTerm1.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( CVTerm1.getResources().getLength() == 1 )
+    self.assertTrue( CVTerm1.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
     CVTerm2 = CVTerm1.clone()
-    self.assert_( CVTerm2.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( CVTerm2.getResources().getLength() == 1 )
-    self.assert_( CVTerm2.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
+    self.assertTrue( CVTerm2.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( CVTerm2.getResources().getLength() == 1 )
+    self.assertTrue( CVTerm2.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
     CVTerm2 = None
     CVTerm1 = None
     pass  
@@ -69,47 +69,47 @@ def test_CVTerm_clone(self):
   def test_CVTerm_copyConstructor(self):
     CVTerm1 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     CVTerm1.addResource("http://www.geneontology.org/#GO:0005892")
-    self.assert_( CVTerm1.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( CVTerm1.getResources().getLength() == 1 )
-    self.assert_( CVTerm1.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
+    self.assertTrue( CVTerm1.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( CVTerm1.getResources().getLength() == 1 )
+    self.assertTrue( CVTerm1.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
     CVTerm2 = libsbml.CVTerm(CVTerm1)
-    self.assert_( CVTerm2.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( CVTerm2.getResources().getLength() == 1 )
-    self.assert_( CVTerm2.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
+    self.assertTrue( CVTerm2.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( CVTerm2.getResources().getLength() == 1 )
+    self.assertTrue( CVTerm2.getResources().getValue(0) ==  "http://www.geneontology.org/#GO:0005892" )
     CVTerm2 = None
     CVTerm1 = None
     pass  
 
   def test_Date_assignmentOperator(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date.getMonth() == 12 )
-    self.assert_( date.getSecond() == 45 )
+    self.assertTrue( date.getMonth() == 12 )
+    self.assertTrue( date.getSecond() == 45 )
     date2 = libsbml.Date()
     date2 = date
-    self.assert_( date2.getMonth() == 12 )
-    self.assert_( date2.getSecond() == 45 )
+    self.assertTrue( date2.getMonth() == 12 )
+    self.assertTrue( date2.getSecond() == 45 )
     date2 = None
     date = None
     pass  
 
   def test_Date_clone(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date.getMonth() == 12 )
-    self.assert_( date.getSecond() == 45 )
+    self.assertTrue( date.getMonth() == 12 )
+    self.assertTrue( date.getSecond() == 45 )
     date2 = date.clone()
-    self.assert_( date2.getMonth() == 12 )
-    self.assert_( date2.getSecond() == 45 )
+    self.assertTrue( date2.getMonth() == 12 )
+    self.assertTrue( date2.getSecond() == 45 )
     date2 = None
     date = None
     pass  
 
   def test_Date_copyConstructor(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date.getMonth() == 12 )
-    self.assert_( date.getSecond() == 45 )
+    self.assertTrue( date.getMonth() == 12 )
+    self.assertTrue( date.getSecond() == 45 )
     date2 = libsbml.Date(date)
-    self.assert_( date2.getMonth() == 12 )
-    self.assert_( date2.getSecond() == 45 )
+    self.assertTrue( date2.getMonth() == 12 )
+    self.assertTrue( date2.getSecond() == 45 )
     date2 = None
     date = None
     pass  
@@ -118,12 +118,12 @@ def test_ModelCreator_assignmentOperator(self):
     mc = libsbml.ModelCreator()
     mc.setFamilyName("Keating")
     mc.setEmail("sbml-team@caltech.edu")
-    self.assert_( mc.getFamilyName() ==  "Keating" )
-    self.assert_( mc.getEmail() ==  "sbml-team@caltech.edu" )
+    self.assertTrue( mc.getFamilyName() ==  "Keating" )
+    self.assertTrue( mc.getEmail() ==  "sbml-team@caltech.edu" )
     mc2 = libsbml.ModelCreator()
     mc2 = mc
-    self.assert_( mc2.getFamilyName() ==  "Keating" )
-    self.assert_( mc2.getEmail() ==  "sbml-team@caltech.edu" )
+    self.assertTrue( mc2.getFamilyName() ==  "Keating" )
+    self.assertTrue( mc2.getEmail() ==  "sbml-team@caltech.edu" )
     mc2 = None
     mc = None
     pass  
@@ -132,11 +132,11 @@ def test_ModelCreator_clone(self):
     mc = libsbml.ModelCreator()
     mc.setFamilyName("Keating")
     mc.setEmail("sbml-team@caltech.edu")
-    self.assert_( mc.getFamilyName() ==  "Keating" )
-    self.assert_( mc.getEmail() ==  "sbml-team@caltech.edu" )
+    self.assertTrue( mc.getFamilyName() ==  "Keating" )
+    self.assertTrue( mc.getEmail() ==  "sbml-team@caltech.edu" )
     mc2 = mc.clone()
-    self.assert_( mc2.getFamilyName() ==  "Keating" )
-    self.assert_( mc2.getEmail() ==  "sbml-team@caltech.edu" )
+    self.assertTrue( mc2.getFamilyName() ==  "Keating" )
+    self.assertTrue( mc2.getEmail() ==  "sbml-team@caltech.edu" )
     mc2 = None
     mc = None
     pass  
@@ -145,11 +145,11 @@ def test_ModelCreator_copyConstructor(self):
     mc = libsbml.ModelCreator()
     mc.setFamilyName("Keating")
     mc.setEmail("sbml-team@caltech.edu")
-    self.assert_( mc.getFamilyName() ==  "Keating" )
-    self.assert_( mc.getEmail() ==  "sbml-team@caltech.edu" )
+    self.assertTrue( mc.getFamilyName() ==  "Keating" )
+    self.assertTrue( mc.getEmail() ==  "sbml-team@caltech.edu" )
     mc2 = libsbml.ModelCreator(mc)
-    self.assert_( mc2.getFamilyName() ==  "Keating" )
-    self.assert_( mc2.getEmail() ==  "sbml-team@caltech.edu" )
+    self.assertTrue( mc2.getFamilyName() ==  "Keating" )
+    self.assertTrue( mc2.getEmail() ==  "sbml-team@caltech.edu" )
     mc2 = None
     mc = None
     pass  
@@ -165,14 +165,14 @@ def test_ModelHistory_assignmentOperator(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
     mh.setCreatedDate(date)
     date = None
-    self.assert_( mh.getCreatedDate().getMonth() == 12 )
-    self.assert_( mh.getCreatedDate().getSecond() == 45 )
-    self.assert_( mh.getCreator(0).getFamilyName() ==  "Keating" )
+    self.assertTrue( mh.getCreatedDate().getMonth() == 12 )
+    self.assertTrue( mh.getCreatedDate().getSecond() == 45 )
+    self.assertTrue( mh.getCreator(0).getFamilyName() ==  "Keating" )
     mh2 = libsbml.ModelHistory()
     mh2 = mh
-    self.assert_( mh2.getCreatedDate().getMonth() == 12 )
-    self.assert_( mh2.getCreatedDate().getSecond() == 45 )
-    self.assert_( mh2.getCreator(0).getFamilyName() ==  "Keating" )
+    self.assertTrue( mh2.getCreatedDate().getMonth() == 12 )
+    self.assertTrue( mh2.getCreatedDate().getSecond() == 45 )
+    self.assertTrue( mh2.getCreator(0).getFamilyName() ==  "Keating" )
     mh2 = None
     mh = None
     pass  
@@ -188,13 +188,13 @@ def test_ModelHistory_clone(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
     mh.setCreatedDate(date)
     date = None
-    self.assert_( mh.getCreatedDate().getMonth() == 12 )
-    self.assert_( mh.getCreatedDate().getSecond() == 45 )
-    self.assert_( mh.getCreator(0).getFamilyName() ==  "Keating" )
+    self.assertTrue( mh.getCreatedDate().getMonth() == 12 )
+    self.assertTrue( mh.getCreatedDate().getSecond() == 45 )
+    self.assertTrue( mh.getCreator(0).getFamilyName() ==  "Keating" )
     mh2 = mh.clone()
-    self.assert_( mh2.getCreatedDate().getMonth() == 12 )
-    self.assert_( mh2.getCreatedDate().getSecond() == 45 )
-    self.assert_( mh2.getCreator(0).getFamilyName() ==  "Keating" )
+    self.assertTrue( mh2.getCreatedDate().getMonth() == 12 )
+    self.assertTrue( mh2.getCreatedDate().getSecond() == 45 )
+    self.assertTrue( mh2.getCreator(0).getFamilyName() ==  "Keating" )
     mh2 = None
     mh = None
     pass  
@@ -210,13 +210,13 @@ def test_ModelHistory_copyConstructor(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
     mh.setCreatedDate(date)
     date = None
-    self.assert_( mh.getCreatedDate().getMonth() == 12 )
-    self.assert_( mh.getCreatedDate().getSecond() == 45 )
-    self.assert_( mh.getCreator(0).getFamilyName() ==  "Keating" )
+    self.assertTrue( mh.getCreatedDate().getMonth() == 12 )
+    self.assertTrue( mh.getCreatedDate().getSecond() == 45 )
+    self.assertTrue( mh.getCreator(0).getFamilyName() ==  "Keating" )
     mh2 = libsbml.ModelHistory(mh)
-    self.assert_( mh2.getCreatedDate().getMonth() == 12 )
-    self.assert_( mh2.getCreatedDate().getSecond() == 45 )
-    self.assert_( mh2.getCreator(0).getFamilyName() ==  "Keating" )
+    self.assertTrue( mh2.getCreatedDate().getMonth() == 12 )
+    self.assertTrue( mh2.getCreatedDate().getSecond() == 45 )
+    self.assertTrue( mh2.getCreator(0).getFamilyName() ==  "Keating" )
     mh2 = None
     mh = None
     pass  
diff --git a/src/bindings/python/test/annotation/TestCVTerms.py b/src/bindings/python/test/annotation/TestCVTerms.py
index 0d0e96a77e..0ac8f86809 100644
--- a/src/bindings/python/test/annotation/TestCVTerms.py
+++ b/src/bindings/python/test/annotation/TestCVTerms.py
@@ -40,20 +40,20 @@ class TestCVTerms(unittest.TestCase):
   def test_CVTerm_addResource(self):
     term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
     resource =  "GO6666";
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
     term.addResource(resource)
     xa = term.getResources()
-    self.assert_( xa.getLength() == 1 )
-    self.assert_((  "rdf:resource" == xa.getName(0) ))
-    self.assert_((  "GO6666" == xa.getValue(0) ))
+    self.assertTrue( xa.getLength() == 1 )
+    self.assertTrue((  "rdf:resource" == xa.getName(0) ))
+    self.assertTrue((  "GO6666" == xa.getValue(0) ))
     _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_CVTerm_create(self):
     term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
     _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -73,13 +73,13 @@ def test_CVTerm_createFromNode(self):
     bag.addChild(li)
     node.addChild(bag)
     term = libsbml.CVTerm(node)
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_IS )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS )
     xa = term.getResources()
-    self.assert_( xa.getLength() == 1 )
-    self.assert_((  "rdf:resource" == xa.getName(0) ))
-    self.assert_((  "This is my resource" == xa.getValue(0) ))
+    self.assertTrue( xa.getLength() == 1 )
+    self.assertTrue((  "rdf:resource" == xa.getName(0) ))
+    self.assertTrue((  "This is my resource" == xa.getValue(0) ))
     _dummyList = [ qual_triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ bag_triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ li_triple ]; _dummyList[:] = []; del _dummyList
@@ -101,24 +101,24 @@ def test_CVTerm_getResources(self):
     term.addResource(resource)
     term.addResource(resource1)
     number = term.getNumResources()
-    self.assert_( number == 2 )
-    self.assert_((  "GO6666" == term.getResourceURI(0) ))
-    self.assert_((  "OtherURI" == term.getResourceURI(1) ))
+    self.assertTrue( number == 2 )
+    self.assertTrue((  "GO6666" == term.getResourceURI(0) ))
+    self.assertTrue((  "OtherURI" == term.getResourceURI(1) ))
     _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_CVTerm_set_get(self):
     term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
     term.setModelQualifierType(libsbml.BQM_IS)
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_IS )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_IS )
     term.setQualifierType(libsbml.BIOLOGICAL_QUALIFIER)
     term.setBiologicalQualifierType(libsbml.BQB_IS)
-    self.assert_( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_IS )
+    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS )
     _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/annotation/TestCVTerms_newSetters.py b/src/bindings/python/test/annotation/TestCVTerms_newSetters.py
index 7d2c78ee3d..c0cabea298 100644
--- a/src/bindings/python/test/annotation/TestCVTerms_newSetters.py
+++ b/src/bindings/python/test/annotation/TestCVTerms_newSetters.py
@@ -40,85 +40,85 @@ class TestCVTerms_newSetters(unittest.TestCase):
   def test_CVTerm_addResource(self):
     term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
     resource =  "GO6666";
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
     i = term.addResource( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
     xa = term.getResources()
-    self.assert_( xa.getLength() == 0 )
+    self.assertTrue( xa.getLength() == 0 )
     i = term.addResource(resource)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     xa = term.getResources()
-    self.assert_( xa.getLength() == 1 )
-    self.assert_((  "rdf:resource" == xa.getName(0) ))
-    self.assert_((  "GO6666" == xa.getValue(0) ))
+    self.assertTrue( xa.getLength() == 1 )
+    self.assertTrue((  "rdf:resource" == xa.getName(0) ))
+    self.assertTrue((  "GO6666" == xa.getValue(0) ))
     _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_CVTerm_removeResource(self):
     term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
     resource =  "GO6666";
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
     term.addResource(resource)
     xa = term.getResources()
-    self.assert_( xa.getLength() == 1 )
+    self.assertTrue( xa.getLength() == 1 )
     i = term.removeResource( "CCC")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     xa = term.getResources()
-    self.assert_( xa.getLength() == 1 )
+    self.assertTrue( xa.getLength() == 1 )
     i = term.removeResource(resource)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     xa = term.getResources()
-    self.assert_( xa.getLength() == 0 )
+    self.assertTrue( xa.getLength() == 0 )
     _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_CVTerm_setBiolQualifierType(self):
     term = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
     i = term.setBiologicalQualifierType(libsbml.BQB_IS)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_IS )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
     i = term.setQualifierType(libsbml.MODEL_QUALIFIER)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
     i = term.setBiologicalQualifierType(libsbml.BQB_IS)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
     _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_CVTerm_setModelQualifierType(self):
     term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
-    self.assert_( term != None )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
+    self.assertTrue( term != None )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
     i = term.setModelQualifierType(libsbml.BQM_IS)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_IS )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_IS )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
     i = term.setQualifierType(libsbml.BIOLOGICAL_QUALIFIER)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
     i = term.setModelQualifierType(libsbml.BQM_IS)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
-    self.assert_( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
-    self.assert_( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
+    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
+    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
     _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/annotation/TestDate_newSetters.py b/src/bindings/python/test/annotation/TestDate_newSetters.py
index b5ec5be8a1..69e13ef94b 100644
--- a/src/bindings/python/test/annotation/TestDate_newSetters.py
+++ b/src/bindings/python/test/annotation/TestDate_newSetters.py
@@ -39,152 +39,152 @@ class TestDate_newSetters(unittest.TestCase):
 
   def test_Date_setDateAsString(self):
     date = libsbml.Date(2007,10,23,14,15,16,1,3,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setDateAsString( "20081-12-30T12:15:45+02:00")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_((                                 "2007-10-23T14:15:16+03:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue((                                 "2007-10-23T14:15:16+03:00" == date.getDateAsString() ))
     i = date.setDateAsString( "200-12-30T12:15:45+02:00")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_((                                 "2007-10-23T14:15:16+03:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue((                                 "2007-10-23T14:15:16+03:00" == date.getDateAsString() ))
     i = date.setDateAsString("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((                             "2000-01-01T00:00:00Z" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((                             "2000-01-01T00:00:00Z" == date.getDateAsString() ))
     i = date.setDateAsString( "2008-12-30T12:15:45+02:00")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getYear() == 2008 )
-    self.assert_( date.getMonth() == 12 )
-    self.assert_( date.getDay() == 30 )
-    self.assert_( date.getHour() == 12 )
-    self.assert_( date.getMinute() == 15 )
-    self.assert_( date.getSecond() == 45 )
-    self.assert_( date.getSignOffset() == 1 )
-    self.assert_( date.getHoursOffset() == 2 )
-    self.assert_( date.getMinutesOffset() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getYear() == 2008 )
+    self.assertTrue( date.getMonth() == 12 )
+    self.assertTrue( date.getDay() == 30 )
+    self.assertTrue( date.getHour() == 12 )
+    self.assertTrue( date.getMinute() == 15 )
+    self.assertTrue( date.getSecond() == 45 )
+    self.assertTrue( date.getSignOffset() == 1 )
+    self.assertTrue( date.getHoursOffset() == 2 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setDay(self):
     date = libsbml.Date(2005,2,12,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setDay(29)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getDay() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getDay() == 1 )
     i = date.setDay(31)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getDay() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getDay() == 1 )
     i = date.setDay(15)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getDay() == 15 )
-    self.assert_((                             "2005-02-15T12:15:45+02:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getDay() == 15 )
+    self.assertTrue((                             "2005-02-15T12:15:45+02:00" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setHour(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setHour(434)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getHour() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getHour() == 0 )
     i = date.setHour(12121)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getHour() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getHour() == 0 )
     i = date.setHour(9)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getHour() == 9 )
-    self.assert_((                             "2005-12-30T09:15:45+02:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getHour() == 9 )
+    self.assertTrue((                             "2005-12-30T09:15:45+02:00" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setHoursOffset(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setHoursOffset(434)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getHoursOffset() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getHoursOffset() == 0 )
     i = date.setHoursOffset(11)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getHoursOffset() == 11 )
-    self.assert_((                             "2005-12-30T12:15:45+11:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getHoursOffset() == 11 )
+    self.assertTrue((                             "2005-12-30T12:15:45+11:00" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setMinute(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setMinute(434)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getMinute() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getMinute() == 0 )
     i = date.setMinute(12121)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getMinute() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getMinute() == 0 )
     i = date.setMinute(32)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getMinute() == 32 )
-    self.assert_((                             "2005-12-30T12:32:45+02:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getMinute() == 32 )
+    self.assertTrue((                             "2005-12-30T12:32:45+02:00" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setMinutesOffset(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setMinutesOffset(434)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getMinutesOffset() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getMinutesOffset() == 0 )
     i = date.setMinutesOffset(60)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getMinutesOffset() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getMinutesOffset() == 0 )
     i = date.setMinutesOffset(45)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getMinutesOffset() == 45 )
-    self.assert_((                             "2005-12-30T12:15:45+02:45" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getMinutesOffset() == 45 )
+    self.assertTrue((                             "2005-12-30T12:15:45+02:45" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setMonth(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setMonth(434)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getMonth() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getMonth() == 1 )
     i = date.setMonth(12121)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getMonth() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getMonth() == 1 )
     i = date.setMonth(11)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getMonth() == 11 )
-    self.assert_((                             "2005-11-30T12:15:45+02:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getMonth() == 11 )
+    self.assertTrue((                             "2005-11-30T12:15:45+02:00" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setSecond(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setSecond(434)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getSecond() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getSecond() == 0 )
     i = date.setSecond(12121)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getSecond() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getSecond() == 0 )
     i = date.setSecond(32)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getSecond() == 32 )
-    self.assert_((                             "2005-12-30T12:15:32+02:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getSecond() == 32 )
+    self.assertTrue((                             "2005-12-30T12:15:32+02:00" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setYear(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     i = date.setYear(434)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getYear() == 2000 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getYear() == 2000 )
     i = date.setYear(12121)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( date.getYear() == 2000 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( date.getYear() == 2000 )
     i = date.setYear(2008)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( date.getYear() == 2008 )
-    self.assert_((                             "2008-12-30T12:15:45+02:00" == date.getDateAsString() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( date.getYear() == 2008 )
+    self.assertTrue((                             "2008-12-30T12:15:45+02:00" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/annotation/TestL3ModelHistory.py b/src/bindings/python/test/annotation/TestL3ModelHistory.py
index 32f22be8a2..18db60fb99 100644
--- a/src/bindings/python/test/annotation/TestL3ModelHistory.py
+++ b/src/bindings/python/test/annotation/TestL3ModelHistory.py
@@ -68,8 +68,8 @@ def test_L3ModelHistory_delete(self):
     node = libsbml.RDFAnnotationParser.parseModelHistory(self.c)
     n1 = libsbml.RDFAnnotationParser.deleteRDFAnnotation(node)
     expected =  "<annotation/>";
-    self.assert_( n1.getNumChildren() == 0 )
-    self.assert_( n1.getName() ==  "annotation" )
+    self.assertTrue( n1.getNumChildren() == 0 )
+    self.assertTrue( n1.getName() ==  "annotation" )
     self.assertEqual( True, self.equals(expected,n1.toXMLString()) )
     node = None
     pass  
@@ -106,235 +106,235 @@ def test_L3ModelHistory_delete_Model(self):
     node = libsbml.RDFAnnotationParser.parseModelHistory(self.m)
     n1 = libsbml.RDFAnnotationParser.deleteRDFAnnotation(node)
     expected =  "<annotation/>";
-    self.assert_( n1.getNumChildren() == 0 )
-    self.assert_( n1.getName() ==  "annotation" )
+    self.assertTrue( n1.getNumChildren() == 0 )
+    self.assertTrue( n1.getName() ==  "annotation" )
     self.assertEqual( True, self.equals(expected,n1.toXMLString()) )
     node = None
     pass  
 
   def test_L3ModelHistory_getModelHistory(self):
-    self.assert_( (self.c == None) == False )
+    self.assertTrue( (self.c == None) == False )
     history = self.c.getModelHistory()
-    self.assert_( history != None )
+    self.assertTrue( history != None )
     mc = history.getCreator(0)
-    self.assert_((  "Le Novere" == mc.getFamilyName() ))
-    self.assert_((  "Nicolas" == mc.getGivenName() ))
-    self.assert_((  "lenov@ebi.ac.uk" == mc.getEmail() ))
-    self.assert_((  "EMBL-EBI" == mc.getOrganisation() ))
+    self.assertTrue((  "Le Novere" == mc.getFamilyName() ))
+    self.assertTrue((  "Nicolas" == mc.getGivenName() ))
+    self.assertTrue((  "lenov@ebi.ac.uk" == mc.getEmail() ))
+    self.assertTrue((  "EMBL-EBI" == mc.getOrganisation() ))
     date = history.getCreatedDate()
-    self.assert_( date.getYear() == 2005 )
-    self.assert_( date.getMonth() == 2 )
-    self.assert_( date.getDay() == 2 )
-    self.assert_( date.getHour() == 14 )
-    self.assert_( date.getMinute() == 56 )
-    self.assert_( date.getSecond() == 11 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2005 )
+    self.assertTrue( date.getMonth() == 2 )
+    self.assertTrue( date.getDay() == 2 )
+    self.assertTrue( date.getHour() == 14 )
+    self.assertTrue( date.getMinute() == 56 )
+    self.assertTrue( date.getSecond() == 11 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
     date = history.getModifiedDate()
-    self.assert_( date.getYear() == 2006 )
-    self.assert_( date.getMonth() == 5 )
-    self.assert_( date.getDay() == 30 )
-    self.assert_( date.getHour() == 10 )
-    self.assert_( date.getMinute() == 46 )
-    self.assert_( date.getSecond() == 2 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2006 )
+    self.assertTrue( date.getMonth() == 5 )
+    self.assertTrue( date.getDay() == 30 )
+    self.assertTrue( date.getHour() == 10 )
+    self.assertTrue( date.getMinute() == 46 )
+    self.assertTrue( date.getSecond() == 2 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
     pass  
 
   def test_L3ModelHistory_getModelHistory_Model(self):
-    self.assert_( (self.m == None) == False )
+    self.assertTrue( (self.m == None) == False )
     history = self.m.getModelHistory()
-    self.assert_( history != None )
+    self.assertTrue( history != None )
     mc = history.getCreator(0)
-    self.assert_((  "Le Novere" == mc.getFamilyName() ))
-    self.assert_((  "Nicolas" == mc.getGivenName() ))
-    self.assert_((  "lenov@ebi.ac.uk" == mc.getEmail() ))
-    self.assert_((  "EMBL-EBI" == mc.getOrganisation() ))
+    self.assertTrue((  "Le Novere" == mc.getFamilyName() ))
+    self.assertTrue((  "Nicolas" == mc.getGivenName() ))
+    self.assertTrue((  "lenov@ebi.ac.uk" == mc.getEmail() ))
+    self.assertTrue((  "EMBL-EBI" == mc.getOrganisation() ))
     date = history.getCreatedDate()
-    self.assert_( date.getYear() == 2005 )
-    self.assert_( date.getMonth() == 2 )
-    self.assert_( date.getDay() == 2 )
-    self.assert_( date.getHour() == 14 )
-    self.assert_( date.getMinute() == 56 )
-    self.assert_( date.getSecond() == 11 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2005 )
+    self.assertTrue( date.getMonth() == 2 )
+    self.assertTrue( date.getDay() == 2 )
+    self.assertTrue( date.getHour() == 14 )
+    self.assertTrue( date.getMinute() == 56 )
+    self.assertTrue( date.getSecond() == 11 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
     date = history.getModifiedDate()
-    self.assert_( date.getYear() == 2006 )
-    self.assert_( date.getMonth() == 5 )
-    self.assert_( date.getDay() == 30 )
-    self.assert_( date.getHour() == 10 )
-    self.assert_( date.getMinute() == 46 )
-    self.assert_( date.getSecond() == 2 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2006 )
+    self.assertTrue( date.getMonth() == 5 )
+    self.assertTrue( date.getDay() == 30 )
+    self.assertTrue( date.getHour() == 10 )
+    self.assertTrue( date.getMinute() == 46 )
+    self.assertTrue( date.getSecond() == 2 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
     pass  
 
   def test_L3ModelHistory_parseModelHistory(self):
     node = libsbml.RDFAnnotationParser.parseModelHistory(self.c)
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( node.getNumChildren() == 1 )
     rdf = node.getChild(0)
-    self.assert_((  "RDF" == rdf.getName() ))
-    self.assert_((  "rdf" == rdf.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
-    self.assert_( rdf.getNumChildren() == 1 )
+    self.assertTrue((  "RDF" == rdf.getName() ))
+    self.assertTrue((  "rdf" == rdf.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
+    self.assertTrue( rdf.getNumChildren() == 1 )
     desc = rdf.getChild(0)
-    self.assert_((  "Description" == desc.getName() ))
-    self.assert_((  "rdf" == desc.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
-    self.assert_( desc.getNumChildren() == 4 )
+    self.assertTrue((  "Description" == desc.getName() ))
+    self.assertTrue((  "rdf" == desc.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
+    self.assertTrue( desc.getNumChildren() == 4 )
     creator = desc.getChild(0)
-    self.assert_((  "creator" == creator.getName() ))
-    self.assert_((  "dcterms" == creator.getPrefix() ))
-    self.assert_( creator.getNumChildren() == 1 )
+    self.assertTrue((  "creator" == creator.getName() ))
+    self.assertTrue((  "dcterms" == creator.getPrefix() ))
+    self.assertTrue( creator.getNumChildren() == 1 )
     Bag = creator.getChild(0)
-    self.assert_((  "Bag" == Bag.getName() ))
-    self.assert_((  "rdf" == Bag.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
-    self.assert_( Bag.getNumChildren() == 1 )
+    self.assertTrue((  "Bag" == Bag.getName() ))
+    self.assertTrue((  "rdf" == Bag.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
+    self.assertTrue( Bag.getNumChildren() == 1 )
     li = Bag.getChild(0)
-    self.assert_((  "li" == li.getName() ))
-    self.assert_((  "rdf" == li.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
-    self.assert_( li.getNumChildren() == 3 )
+    self.assertTrue((  "li" == li.getName() ))
+    self.assertTrue((  "rdf" == li.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
+    self.assertTrue( li.getNumChildren() == 3 )
     N = li.getChild(0)
-    self.assert_((  "N" == N.getName() ))
-    self.assert_((  "vCard" == N.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
-    self.assert_( N.getNumChildren() == 2 )
+    self.assertTrue((  "N" == N.getName() ))
+    self.assertTrue((  "vCard" == N.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
+    self.assertTrue( N.getNumChildren() == 2 )
     Family = N.getChild(0)
-    self.assert_((  "Family" == Family.getName() ))
-    self.assert_((  "vCard" == Family.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
-    self.assert_( Family.getNumChildren() == 1 )
+    self.assertTrue((  "Family" == Family.getName() ))
+    self.assertTrue((  "vCard" == Family.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
+    self.assertTrue( Family.getNumChildren() == 1 )
     Given = N.getChild(1)
-    self.assert_((  "Given" == Given.getName() ))
-    self.assert_((  "vCard" == Given.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
-    self.assert_( Given.getNumChildren() == 1 )
+    self.assertTrue((  "Given" == Given.getName() ))
+    self.assertTrue((  "vCard" == Given.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
+    self.assertTrue( Given.getNumChildren() == 1 )
     EMAIL = li.getChild(1)
-    self.assert_((  "EMAIL" == EMAIL.getName() ))
-    self.assert_((  "vCard" == EMAIL.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
-    self.assert_( EMAIL.getNumChildren() == 1 )
+    self.assertTrue((  "EMAIL" == EMAIL.getName() ))
+    self.assertTrue((  "vCard" == EMAIL.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
+    self.assertTrue( EMAIL.getNumChildren() == 1 )
     ORG = li.getChild(2)
-    self.assert_((  "ORG" == ORG.getName() ))
-    self.assert_((  "vCard" == ORG.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
-    self.assert_( ORG.getNumChildren() == 1 )
+    self.assertTrue((  "ORG" == ORG.getName() ))
+    self.assertTrue((  "vCard" == ORG.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
+    self.assertTrue( ORG.getNumChildren() == 1 )
     Orgname = ORG.getChild(0)
-    self.assert_((  "Orgname" == Orgname.getName() ))
-    self.assert_((  "vCard" == Orgname.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
-    self.assert_( Orgname.getNumChildren() == 1 )
+    self.assertTrue((  "Orgname" == Orgname.getName() ))
+    self.assertTrue((  "vCard" == Orgname.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
+    self.assertTrue( Orgname.getNumChildren() == 1 )
     created = desc.getChild(1)
-    self.assert_((  "created" == created.getName() ))
-    self.assert_((  "dcterms" == created.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == created.getURI() ))
-    self.assert_( created.getNumChildren() == 1 )
+    self.assertTrue((  "created" == created.getName() ))
+    self.assertTrue((  "dcterms" == created.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == created.getURI() ))
+    self.assertTrue( created.getNumChildren() == 1 )
     cr_date = created.getChild(0)
-    self.assert_((  "W3CDTF" == cr_date.getName() ))
-    self.assert_((  "dcterms" == cr_date.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
-    self.assert_( cr_date.getNumChildren() == 1 )
+    self.assertTrue((  "W3CDTF" == cr_date.getName() ))
+    self.assertTrue((  "dcterms" == cr_date.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
+    self.assertTrue( cr_date.getNumChildren() == 1 )
     modified = desc.getChild(2)
-    self.assert_((  "modified" == modified.getName() ))
-    self.assert_((  "dcterms" == modified.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == modified.getURI() ))
-    self.assert_( modified.getNumChildren() == 1 )
+    self.assertTrue((  "modified" == modified.getName() ))
+    self.assertTrue((  "dcterms" == modified.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == modified.getURI() ))
+    self.assertTrue( modified.getNumChildren() == 1 )
     mo_date = created.getChild(0)
-    self.assert_((  "W3CDTF" == mo_date.getName() ))
-    self.assert_((  "dcterms" == mo_date.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
-    self.assert_( mo_date.getNumChildren() == 1 )
+    self.assertTrue((  "W3CDTF" == mo_date.getName() ))
+    self.assertTrue((  "dcterms" == mo_date.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
+    self.assertTrue( mo_date.getNumChildren() == 1 )
     node = None
     pass  
 
   def test_L3ModelHistory_parseModelHistory_Model(self):
     node = libsbml.RDFAnnotationParser.parseModelHistory(self.m)
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( node.getNumChildren() == 1 )
     rdf = node.getChild(0)
-    self.assert_((  "RDF" == rdf.getName() ))
-    self.assert_((  "rdf" == rdf.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
-    self.assert_( rdf.getNumChildren() == 1 )
+    self.assertTrue((  "RDF" == rdf.getName() ))
+    self.assertTrue((  "rdf" == rdf.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
+    self.assertTrue( rdf.getNumChildren() == 1 )
     desc = rdf.getChild(0)
-    self.assert_((  "Description" == desc.getName() ))
-    self.assert_((  "rdf" == desc.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
-    self.assert_( desc.getNumChildren() == 4 )
+    self.assertTrue((  "Description" == desc.getName() ))
+    self.assertTrue((  "rdf" == desc.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
+    self.assertTrue( desc.getNumChildren() == 4 )
     creator = desc.getChild(0)
-    self.assert_((  "creator" == creator.getName() ))
-    self.assert_((  "dcterms" == creator.getPrefix() ))
-    self.assert_( creator.getNumChildren() == 1 )
+    self.assertTrue((  "creator" == creator.getName() ))
+    self.assertTrue((  "dcterms" == creator.getPrefix() ))
+    self.assertTrue( creator.getNumChildren() == 1 )
     Bag = creator.getChild(0)
-    self.assert_((  "Bag" == Bag.getName() ))
-    self.assert_((  "rdf" == Bag.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
-    self.assert_( Bag.getNumChildren() == 1 )
+    self.assertTrue((  "Bag" == Bag.getName() ))
+    self.assertTrue((  "rdf" == Bag.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
+    self.assertTrue( Bag.getNumChildren() == 1 )
     li = Bag.getChild(0)
-    self.assert_((  "li" == li.getName() ))
-    self.assert_((  "rdf" == li.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
-    self.assert_( li.getNumChildren() == 3 )
+    self.assertTrue((  "li" == li.getName() ))
+    self.assertTrue((  "rdf" == li.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
+    self.assertTrue( li.getNumChildren() == 3 )
     N = li.getChild(0)
-    self.assert_((  "N" == N.getName() ))
-    self.assert_((  "vCard" == N.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
-    self.assert_( N.getNumChildren() == 2 )
+    self.assertTrue((  "N" == N.getName() ))
+    self.assertTrue((  "vCard" == N.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
+    self.assertTrue( N.getNumChildren() == 2 )
     Family = N.getChild(0)
-    self.assert_((  "Family" == Family.getName() ))
-    self.assert_((  "vCard" == Family.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
-    self.assert_( Family.getNumChildren() == 1 )
+    self.assertTrue((  "Family" == Family.getName() ))
+    self.assertTrue((  "vCard" == Family.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
+    self.assertTrue( Family.getNumChildren() == 1 )
     Given = N.getChild(1)
-    self.assert_((  "Given" == Given.getName() ))
-    self.assert_((  "vCard" == Given.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
-    self.assert_( Given.getNumChildren() == 1 )
+    self.assertTrue((  "Given" == Given.getName() ))
+    self.assertTrue((  "vCard" == Given.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
+    self.assertTrue( Given.getNumChildren() == 1 )
     EMAIL = li.getChild(1)
-    self.assert_((  "EMAIL" == EMAIL.getName() ))
-    self.assert_((  "vCard" == EMAIL.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
-    self.assert_( EMAIL.getNumChildren() == 1 )
+    self.assertTrue((  "EMAIL" == EMAIL.getName() ))
+    self.assertTrue((  "vCard" == EMAIL.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
+    self.assertTrue( EMAIL.getNumChildren() == 1 )
     ORG = li.getChild(2)
-    self.assert_((  "ORG" == ORG.getName() ))
-    self.assert_((  "vCard" == ORG.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
-    self.assert_( ORG.getNumChildren() == 1 )
+    self.assertTrue((  "ORG" == ORG.getName() ))
+    self.assertTrue((  "vCard" == ORG.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
+    self.assertTrue( ORG.getNumChildren() == 1 )
     Orgname = ORG.getChild(0)
-    self.assert_((  "Orgname" == Orgname.getName() ))
-    self.assert_((  "vCard" == Orgname.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
-    self.assert_( Orgname.getNumChildren() == 1 )
+    self.assertTrue((  "Orgname" == Orgname.getName() ))
+    self.assertTrue((  "vCard" == Orgname.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
+    self.assertTrue( Orgname.getNumChildren() == 1 )
     created = desc.getChild(1)
-    self.assert_((  "created" == created.getName() ))
-    self.assert_((  "dcterms" == created.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == created.getURI() ))
-    self.assert_( created.getNumChildren() == 1 )
+    self.assertTrue((  "created" == created.getName() ))
+    self.assertTrue((  "dcterms" == created.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == created.getURI() ))
+    self.assertTrue( created.getNumChildren() == 1 )
     cr_date = created.getChild(0)
-    self.assert_((  "W3CDTF" == cr_date.getName() ))
-    self.assert_((  "dcterms" == cr_date.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
-    self.assert_( cr_date.getNumChildren() == 1 )
+    self.assertTrue((  "W3CDTF" == cr_date.getName() ))
+    self.assertTrue((  "dcterms" == cr_date.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
+    self.assertTrue( cr_date.getNumChildren() == 1 )
     modified = desc.getChild(2)
-    self.assert_((  "modified" == modified.getName() ))
-    self.assert_((  "dcterms" == modified.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == modified.getURI() ))
-    self.assert_( modified.getNumChildren() == 1 )
+    self.assertTrue((  "modified" == modified.getName() ))
+    self.assertTrue((  "dcterms" == modified.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == modified.getURI() ))
+    self.assertTrue( modified.getNumChildren() == 1 )
     mo_date = created.getChild(0)
-    self.assert_((  "W3CDTF" == mo_date.getName() ))
-    self.assert_((  "dcterms" == mo_date.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
-    self.assert_( mo_date.getNumChildren() == 1 )
+    self.assertTrue((  "W3CDTF" == mo_date.getName() ))
+    self.assertTrue((  "dcterms" == mo_date.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
+    self.assertTrue( mo_date.getNumChildren() == 1 )
     node = None
     pass  
 
diff --git a/src/bindings/python/test/annotation/TestModelCreator_newSetters.py b/src/bindings/python/test/annotation/TestModelCreator_newSetters.py
index 04263f153b..c5a2f375de 100644
--- a/src/bindings/python/test/annotation/TestModelCreator_newSetters.py
+++ b/src/bindings/python/test/annotation/TestModelCreator_newSetters.py
@@ -39,73 +39,73 @@ class TestModelCreator_newSetters(unittest.TestCase):
 
   def test_ModelCreator_setEmail(self):
     mc = libsbml.ModelCreator()
-    self.assert_( mc != None )
+    self.assertTrue( mc != None )
     i = mc.setEmail( "Keating")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetEmail() == True )
-    self.assert_((  "Keating" == mc.getEmail() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetEmail() == True )
+    self.assertTrue((  "Keating" == mc.getEmail() ))
     i = mc.setEmail( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetEmail() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetEmail() == False )
     i = mc.setEmail( "Keating")
-    self.assert_( mc.isSetEmail() == True )
+    self.assertTrue( mc.isSetEmail() == True )
     i = mc.unsetEmail()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetEmail() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetEmail() == False )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelCreator_setFamilyName(self):
     mc = libsbml.ModelCreator()
-    self.assert_( mc != None )
+    self.assertTrue( mc != None )
     i = mc.setFamilyName( "Keating")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetFamilyName() == True )
-    self.assert_((  "Keating" == mc.getFamilyName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetFamilyName() == True )
+    self.assertTrue((  "Keating" == mc.getFamilyName() ))
     i = mc.setFamilyName( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetFamilyName() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetFamilyName() == False )
     i = mc.setFamilyName( "Keating")
-    self.assert_( mc.isSetFamilyName() == True )
+    self.assertTrue( mc.isSetFamilyName() == True )
     i = mc.unsetFamilyName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetFamilyName() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetFamilyName() == False )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelCreator_setGivenName(self):
     mc = libsbml.ModelCreator()
-    self.assert_( mc != None )
+    self.assertTrue( mc != None )
     i = mc.setGivenName( "Sarah")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetGivenName() == True )
-    self.assert_((  "Sarah" == mc.getGivenName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetGivenName() == True )
+    self.assertTrue((  "Sarah" == mc.getGivenName() ))
     i = mc.setGivenName( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetGivenName() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetGivenName() == False )
     i = mc.setGivenName( "Sarah")
-    self.assert_( mc.isSetGivenName() == True )
+    self.assertTrue( mc.isSetGivenName() == True )
     i = mc.unsetGivenName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetGivenName() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetGivenName() == False )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelCreator_setOrganization(self):
     mc = libsbml.ModelCreator()
-    self.assert_( mc != None )
+    self.assertTrue( mc != None )
     i = mc.setOrganization( "Caltech")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetOrganization() == True )
-    self.assert_((  "Caltech" == mc.getOrganization() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetOrganization() == True )
+    self.assertTrue((  "Caltech" == mc.getOrganization() ))
     i = mc.setOrganization( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetOrganization() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetOrganization() == False )
     i = mc.setOrganization( "Caltech")
-    self.assert_( mc.isSetOrganization() == True )
+    self.assertTrue( mc.isSetOrganization() == True )
     i = mc.unsetOrganization()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mc.isSetOrganization() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mc.isSetOrganization() == False )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/annotation/TestModelHistory.py b/src/bindings/python/test/annotation/TestModelHistory.py
index e3c7d7dd02..910b5b5549 100644
--- a/src/bindings/python/test/annotation/TestModelHistory.py
+++ b/src/bindings/python/test/annotation/TestModelHistory.py
@@ -39,49 +39,49 @@ class TestModelHistory(unittest.TestCase):
 
   def test_Date_create(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
-    self.assert_( date.getYear() == 2005 )
-    self.assert_( date.getMonth() == 12 )
-    self.assert_( date.getDay() == 30 )
-    self.assert_( date.getHour() == 12 )
-    self.assert_( date.getMinute() == 15 )
-    self.assert_( date.getSecond() == 45 )
-    self.assert_( date.getSignOffset() == 1 )
-    self.assert_( date.getHoursOffset() == 2 )
-    self.assert_( date.getMinutesOffset() == 0 )
+    self.assertTrue( date != None )
+    self.assertTrue( date.getYear() == 2005 )
+    self.assertTrue( date.getMonth() == 12 )
+    self.assertTrue( date.getDay() == 30 )
+    self.assertTrue( date.getHour() == 12 )
+    self.assertTrue( date.getMinute() == 15 )
+    self.assertTrue( date.getSecond() == 45 )
+    self.assertTrue( date.getSignOffset() == 1 )
+    self.assertTrue( date.getHoursOffset() == 2 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_createFromString(self):
     dd =  "2012-12-02T14:56:11Z";
     date = libsbml.Date(dd)
-    self.assert_( date != None )
-    self.assert_((  "2012-12-02T14:56:11Z" == date.getDateAsString() ))
-    self.assert_( date.getYear() == 2012 )
-    self.assert_( date.getMonth() == 12 )
-    self.assert_( date.getDay() == 2 )
-    self.assert_( date.getHour() == 14 )
-    self.assert_( date.getMinute() == 56 )
-    self.assert_( date.getSecond() == 11 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
+    self.assertTrue( date != None )
+    self.assertTrue((  "2012-12-02T14:56:11Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2012 )
+    self.assertTrue( date.getMonth() == 12 )
+    self.assertTrue( date.getDay() == 2 )
+    self.assertTrue( date.getHour() == 14 )
+    self.assertTrue( date.getMinute() == 56 )
+    self.assertTrue( date.getSecond() == 11 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_getDateAsString(self):
     dd =  "2005-02-02T14:56:11Z";
     date = libsbml.Date(dd)
-    self.assert_( date != None )
-    self.assert_( date.getYear() == 2005 )
-    self.assert_( date.getMonth() == 2 )
-    self.assert_( date.getDay() == 2 )
-    self.assert_( date.getHour() == 14 )
-    self.assert_( date.getMinute() == 56 )
-    self.assert_( date.getSecond() == 11 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
+    self.assertTrue( date != None )
+    self.assertTrue( date.getYear() == 2005 )
+    self.assertTrue( date.getMonth() == 2 )
+    self.assertTrue( date.getDay() == 2 )
+    self.assertTrue( date.getHour() == 14 )
+    self.assertTrue( date.getMinute() == 56 )
+    self.assertTrue( date.getSecond() == 11 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
     date.setYear(2012)
     date.setMonth(3)
     date.setDay(28)
@@ -91,13 +91,13 @@ def test_Date_getDateAsString(self):
     date.setSignOffset(1)
     date.setHoursOffset(2)
     date.setMinutesOffset(32)
-    self.assert_((  "2012-03-28T23:04:32+02:32" == date.getDateAsString() ))
+    self.assertTrue((  "2012-03-28T23:04:32+02:32" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Date_setters(self):
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     date.setYear(2012)
     date.setMonth(3)
     date.setDay(28)
@@ -107,174 +107,174 @@ def test_Date_setters(self):
     date.setSignOffset(1)
     date.setHoursOffset(2)
     date.setMinutesOffset(32)
-    self.assert_( date.getYear() == 2012 )
-    self.assert_( date.getMonth() == 3 )
-    self.assert_( date.getDay() == 28 )
-    self.assert_( date.getHour() == 23 )
-    self.assert_( date.getMinute() == 4 )
-    self.assert_( date.getSecond() == 32 )
-    self.assert_( date.getSignOffset() == 1 )
-    self.assert_( date.getHoursOffset() == 2 )
-    self.assert_( date.getMinutesOffset() == 32 )
-    self.assert_((  "2012-03-28T23:04:32+02:32" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2012 )
+    self.assertTrue( date.getMonth() == 3 )
+    self.assertTrue( date.getDay() == 28 )
+    self.assertTrue( date.getHour() == 23 )
+    self.assertTrue( date.getMinute() == 4 )
+    self.assertTrue( date.getSecond() == 32 )
+    self.assertTrue( date.getSignOffset() == 1 )
+    self.assertTrue( date.getHoursOffset() == 2 )
+    self.assertTrue( date.getMinutesOffset() == 32 )
+    self.assertTrue((  "2012-03-28T23:04:32+02:32" == date.getDateAsString() ))
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelCreator_create(self):
     mc = libsbml.ModelCreator()
-    self.assert_( mc != None )
+    self.assertTrue( mc != None )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelCreator_setters(self):
     mc = libsbml.ModelCreator()
-    self.assert_( mc != None )
-    self.assert_( mc.isSetFamilyName() == False )
-    self.assert_( mc.isSetGivenName() == False )
-    self.assert_( mc.isSetEmail() == False )
-    self.assert_( mc.isSetOrganisation() == False )
+    self.assertTrue( mc != None )
+    self.assertTrue( mc.isSetFamilyName() == False )
+    self.assertTrue( mc.isSetGivenName() == False )
+    self.assertTrue( mc.isSetEmail() == False )
+    self.assertTrue( mc.isSetOrganisation() == False )
     mc.setFamilyName( "Keating")
     mc.setGivenName( "Sarah")
     mc.setEmail( "sbml-team@caltech.edu")
     mc.setOrganisation( "UH")
-    self.assert_((  "Keating" == mc.getFamilyName() ))
-    self.assert_((  "Sarah" == mc.getGivenName() ))
-    self.assert_((  "sbml-team@caltech.edu" == mc.getEmail() ))
-    self.assert_((  "UH" == mc.getOrganisation() ))
-    self.assert_( mc.isSetFamilyName() == True )
-    self.assert_( mc.isSetGivenName() == True )
-    self.assert_( mc.isSetEmail() == True )
-    self.assert_( mc.isSetOrganisation() == True )
+    self.assertTrue((  "Keating" == mc.getFamilyName() ))
+    self.assertTrue((  "Sarah" == mc.getGivenName() ))
+    self.assertTrue((  "sbml-team@caltech.edu" == mc.getEmail() ))
+    self.assertTrue((  "UH" == mc.getOrganisation() ))
+    self.assertTrue( mc.isSetFamilyName() == True )
+    self.assertTrue( mc.isSetGivenName() == True )
+    self.assertTrue( mc.isSetEmail() == True )
+    self.assertTrue( mc.isSetOrganisation() == True )
     mc.unsetFamilyName()
     mc.unsetGivenName()
     mc.unsetEmail()
     mc.unsetOrganisation()
-    self.assert_((  "" == mc.getFamilyName() ))
-    self.assert_((  "" == mc.getGivenName() ))
-    self.assert_((  "" == mc.getEmail() ))
-    self.assert_((  "" == mc.getOrganisation() ))
-    self.assert_( mc.isSetFamilyName() == False )
-    self.assert_( mc.isSetGivenName() == False )
-    self.assert_( mc.isSetEmail() == False )
-    self.assert_( mc.isSetOrganisation() == False )
-    self.assert_( mc.isSetOrganization() == False )
+    self.assertTrue((  "" == mc.getFamilyName() ))
+    self.assertTrue((  "" == mc.getGivenName() ))
+    self.assertTrue((  "" == mc.getEmail() ))
+    self.assertTrue((  "" == mc.getOrganisation() ))
+    self.assertTrue( mc.isSetFamilyName() == False )
+    self.assertTrue( mc.isSetGivenName() == False )
+    self.assertTrue( mc.isSetEmail() == False )
+    self.assertTrue( mc.isSetOrganisation() == False )
+    self.assertTrue( mc.isSetOrganization() == False )
     mc.setOrganization( "UH")
-    self.assert_((  "UH" == mc.getOrganization() ))
-    self.assert_( mc.isSetOrganization() == True )
+    self.assertTrue((  "UH" == mc.getOrganization() ))
+    self.assertTrue( mc.isSetOrganization() == True )
     mc.unsetOrganisation()
-    self.assert_((  "" == mc.getOrganization() ))
-    self.assert_( mc.isSetOrganization() == False )
+    self.assertTrue((  "" == mc.getOrganization() ))
+    self.assertTrue( mc.isSetOrganization() == False )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_addCreator(self):
     history = libsbml.ModelHistory()
-    self.assert_( history.getNumCreators() == 0 )
-    self.assert_( history != None )
+    self.assertTrue( history.getNumCreators() == 0 )
+    self.assertTrue( history != None )
     mc = libsbml.ModelCreator()
-    self.assert_( mc != None )
+    self.assertTrue( mc != None )
     mc.setFamilyName( "Keating")
     mc.setGivenName( "Sarah")
     mc.setEmail( "sbml-team@caltech.edu")
     mc.setOrganisation( "UH")
     history.addCreator(mc)
-    self.assert_( history.getNumCreators() == 1 )
+    self.assertTrue( history.getNumCreators() == 1 )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     newMC = history.getListCreators().get(0)
-    self.assert_( newMC != None )
-    self.assert_((  "Keating" == newMC.getFamilyName() ))
-    self.assert_((  "Sarah" == newMC.getGivenName() ))
-    self.assert_((  "sbml-team@caltech.edu" == newMC.getEmail() ))
-    self.assert_((  "UH" == newMC.getOrganisation() ))
+    self.assertTrue( newMC != None )
+    self.assertTrue((  "Keating" == newMC.getFamilyName() ))
+    self.assertTrue((  "Sarah" == newMC.getGivenName() ))
+    self.assertTrue((  "sbml-team@caltech.edu" == newMC.getEmail() ))
+    self.assertTrue((  "UH" == newMC.getOrganisation() ))
     _dummyList = [ history ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_addModifiedDate(self):
     history = libsbml.ModelHistory()
-    self.assert_( history != None )
-    self.assert_( history.isSetModifiedDate() == False )
-    self.assert_( history.getNumModifiedDates() == 0 )
+    self.assertTrue( history != None )
+    self.assertTrue( history.isSetModifiedDate() == False )
+    self.assertTrue( history.getNumModifiedDates() == 0 )
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
     history.addModifiedDate(date)
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
-    self.assert_( history.getNumModifiedDates() == 1 )
-    self.assert_( history.isSetModifiedDate() == True )
+    self.assertTrue( history.getNumModifiedDates() == 1 )
+    self.assertTrue( history.isSetModifiedDate() == True )
     newdate = history.getListModifiedDates().get(0)
-    self.assert_( newdate.getYear() == 2005 )
-    self.assert_( newdate.getMonth() == 12 )
-    self.assert_( newdate.getDay() == 30 )
-    self.assert_( newdate.getHour() == 12 )
-    self.assert_( newdate.getMinute() == 15 )
-    self.assert_( newdate.getSecond() == 45 )
-    self.assert_( newdate.getSignOffset() == 1 )
-    self.assert_( newdate.getHoursOffset() == 2 )
-    self.assert_( newdate.getMinutesOffset() == 0 )
+    self.assertTrue( newdate.getYear() == 2005 )
+    self.assertTrue( newdate.getMonth() == 12 )
+    self.assertTrue( newdate.getDay() == 30 )
+    self.assertTrue( newdate.getHour() == 12 )
+    self.assertTrue( newdate.getMinute() == 15 )
+    self.assertTrue( newdate.getSecond() == 45 )
+    self.assertTrue( newdate.getSignOffset() == 1 )
+    self.assertTrue( newdate.getHoursOffset() == 2 )
+    self.assertTrue( newdate.getMinutesOffset() == 0 )
     date1 = libsbml.Date(2008,11,2,16,42,40,1,2,0)
     history.addModifiedDate(date1)
     _dummyList = [ date1 ]; _dummyList[:] = []; del _dummyList
-    self.assert_( history.getNumModifiedDates() == 2 )
-    self.assert_( history.isSetModifiedDate() == True )
+    self.assertTrue( history.getNumModifiedDates() == 2 )
+    self.assertTrue( history.isSetModifiedDate() == True )
     newdate1 = history.getModifiedDate(1)
-    self.assert_( newdate1.getYear() == 2008 )
-    self.assert_( newdate1.getMonth() == 11 )
-    self.assert_( newdate1.getDay() == 2 )
-    self.assert_( newdate1.getHour() == 16 )
-    self.assert_( newdate1.getMinute() == 42 )
-    self.assert_( newdate1.getSecond() == 40 )
-    self.assert_( newdate1.getSignOffset() == 1 )
-    self.assert_( newdate1.getHoursOffset() == 2 )
-    self.assert_( newdate1.getMinutesOffset() == 0 )
+    self.assertTrue( newdate1.getYear() == 2008 )
+    self.assertTrue( newdate1.getMonth() == 11 )
+    self.assertTrue( newdate1.getDay() == 2 )
+    self.assertTrue( newdate1.getHour() == 16 )
+    self.assertTrue( newdate1.getMinute() == 42 )
+    self.assertTrue( newdate1.getSecond() == 40 )
+    self.assertTrue( newdate1.getSignOffset() == 1 )
+    self.assertTrue( newdate1.getHoursOffset() == 2 )
+    self.assertTrue( newdate1.getMinutesOffset() == 0 )
     _dummyList = [ history ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_create(self):
     history = libsbml.ModelHistory()
-    self.assert_( history != None )
-    self.assert_( history.getListCreators() != None )
-    self.assert_( history.getCreatedDate() == None )
-    self.assert_( history.getModifiedDate() == None )
+    self.assertTrue( history != None )
+    self.assertTrue( history.getListCreators() != None )
+    self.assertTrue( history.getCreatedDate() == None )
+    self.assertTrue( history.getModifiedDate() == None )
     _dummyList = [ history ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_setCreatedDate(self):
     history = libsbml.ModelHistory()
-    self.assert_( history != None )
-    self.assert_( history.isSetCreatedDate() == False )
+    self.assertTrue( history != None )
+    self.assertTrue( history.isSetCreatedDate() == False )
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
     history.setCreatedDate(date)
-    self.assert_( history.isSetCreatedDate() == True )
+    self.assertTrue( history.isSetCreatedDate() == True )
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     newdate = history.getCreatedDate()
-    self.assert_( newdate.getYear() == 2005 )
-    self.assert_( newdate.getMonth() == 12 )
-    self.assert_( newdate.getDay() == 30 )
-    self.assert_( newdate.getHour() == 12 )
-    self.assert_( newdate.getMinute() == 15 )
-    self.assert_( newdate.getSecond() == 45 )
-    self.assert_( newdate.getSignOffset() == 1 )
-    self.assert_( newdate.getHoursOffset() == 2 )
-    self.assert_( newdate.getMinutesOffset() == 0 )
+    self.assertTrue( newdate.getYear() == 2005 )
+    self.assertTrue( newdate.getMonth() == 12 )
+    self.assertTrue( newdate.getDay() == 30 )
+    self.assertTrue( newdate.getHour() == 12 )
+    self.assertTrue( newdate.getMinute() == 15 )
+    self.assertTrue( newdate.getSecond() == 45 )
+    self.assertTrue( newdate.getSignOffset() == 1 )
+    self.assertTrue( newdate.getHoursOffset() == 2 )
+    self.assertTrue( newdate.getMinutesOffset() == 0 )
     _dummyList = [ history ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_setModifiedDate(self):
     history = libsbml.ModelHistory()
-    self.assert_( history != None )
-    self.assert_( history.isSetModifiedDate() == False )
+    self.assertTrue( history != None )
+    self.assertTrue( history.isSetModifiedDate() == False )
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
     history.setModifiedDate(date)
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
-    self.assert_( history.isSetModifiedDate() == True )
+    self.assertTrue( history.isSetModifiedDate() == True )
     newdate = history.getModifiedDate()
-    self.assert_( newdate.getYear() == 2005 )
-    self.assert_( newdate.getMonth() == 12 )
-    self.assert_( newdate.getDay() == 30 )
-    self.assert_( newdate.getHour() == 12 )
-    self.assert_( newdate.getMinute() == 15 )
-    self.assert_( newdate.getSecond() == 45 )
-    self.assert_( newdate.getSignOffset() == 1 )
-    self.assert_( newdate.getHoursOffset() == 2 )
-    self.assert_( newdate.getMinutesOffset() == 0 )
+    self.assertTrue( newdate.getYear() == 2005 )
+    self.assertTrue( newdate.getMonth() == 12 )
+    self.assertTrue( newdate.getDay() == 30 )
+    self.assertTrue( newdate.getHour() == 12 )
+    self.assertTrue( newdate.getMinute() == 15 )
+    self.assertTrue( newdate.getSecond() == 45 )
+    self.assertTrue( newdate.getSignOffset() == 1 )
+    self.assertTrue( newdate.getHoursOffset() == 2 )
+    self.assertTrue( newdate.getMinutesOffset() == 0 )
     _dummyList = [ history ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/annotation/TestModelHistory_newSetters.py b/src/bindings/python/test/annotation/TestModelHistory_newSetters.py
index 24ff6740ea..bc7bf38c73 100644
--- a/src/bindings/python/test/annotation/TestModelHistory_newSetters.py
+++ b/src/bindings/python/test/annotation/TestModelHistory_newSetters.py
@@ -43,8 +43,8 @@ def test_ModelHistory_addCreator1(self):
     mc.setFamilyName( "Keating")
     mc.setGivenName( "Sarah")
     i = mh.addCreator(mc)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mh.getNumCreators() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mh.getNumCreators() == 1 )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -54,8 +54,8 @@ def test_ModelHistory_addCreator2(self):
     mc = libsbml.ModelCreator()
     mc.setGivenName( "Sarah")
     i = mh.addCreator(mc)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( mh.getNumCreators() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( mh.getNumCreators() == 0 )
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -64,63 +64,63 @@ def test_ModelHistory_addCreator3(self):
     mh = libsbml.ModelHistory()
     mc = None
     i = mh.addCreator(mc)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( mh.getNumCreators() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( mh.getNumCreators() == 0 )
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_setCreatedDate1(self):
     mh = libsbml.ModelHistory()
-    self.assert_( mh != None )
+    self.assertTrue( mh != None )
     date = libsbml.Date("2005-12-30T12:15:32+02:00")
     i = mh.setCreatedDate(date)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mh.isSetCreatedDate() == True )
-    self.assert_( date != mh.getCreatedDate() )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mh.isSetCreatedDate() == True )
+    self.assertTrue( date != mh.getCreatedDate() )
     dateChar = mh.getCreatedDate().getDateAsString()
-    self.assert_((  "2005-12-30T12:15:32+02:00" == dateChar ))
+    self.assertTrue((  "2005-12-30T12:15:32+02:00" == dateChar ))
     i = mh.setCreatedDate(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mh.isSetCreatedDate() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mh.isSetCreatedDate() == False )
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_setCreatedDate2(self):
     mh = libsbml.ModelHistory()
-    self.assert_( mh != None )
+    self.assertTrue( mh != None )
     date = libsbml.Date("Jan 12")
     i = mh.setCreatedDate(date)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( mh.isSetCreatedDate() == False )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( mh.isSetCreatedDate() == False )
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_setModifiedDate1(self):
     mh = libsbml.ModelHistory()
-    self.assert_( mh != None )
+    self.assertTrue( mh != None )
     date = libsbml.Date("2005-12-30T12:15:32+02:00")
     i = mh.setModifiedDate(date)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( mh.isSetModifiedDate() == True )
-    self.assert_( date != mh.getModifiedDate() )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( mh.isSetModifiedDate() == True )
+    self.assertTrue( date != mh.getModifiedDate() )
     dateChar = mh.getModifiedDate().getDateAsString()
-    self.assert_((  "2005-12-30T12:15:32+02:00" == dateChar ))
+    self.assertTrue((  "2005-12-30T12:15:32+02:00" == dateChar ))
     i = mh.setModifiedDate(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( mh.isSetModifiedDate() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( mh.isSetModifiedDate() == True )
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ModelHistory_setModifiedDate2(self):
     mh = libsbml.ModelHistory()
-    self.assert_( mh != None )
+    self.assertTrue( mh != None )
     date = libsbml.Date(200,13,76,56,89,90,0,0,0)
     i = mh.setModifiedDate(date)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( mh.isSetModifiedDate() == False )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( mh.isSetModifiedDate() == False )
     _dummyList = [ date ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/annotation/TestRDFAnnotation.py b/src/bindings/python/test/annotation/TestRDFAnnotation.py
index b6c48cc5a6..ffae30f9b7 100644
--- a/src/bindings/python/test/annotation/TestRDFAnnotation.py
+++ b/src/bindings/python/test/annotation/TestRDFAnnotation.py
@@ -66,8 +66,8 @@ def test_RDFAnnotation_delete(self):
     node = libsbml.RDFAnnotationParser.parseCVTerms(self.m.getCompartment(0))
     n1 = libsbml.RDFAnnotationParser.deleteRDFAnnotation(node)
     expected =  "<annotation/>";
-    self.assert_( n1.getNumChildren() == 0 )
-    self.assert_( n1.getName() ==  "annotation" )
+    self.assertTrue( n1.getNumChildren() == 0 )
+    self.assertTrue( n1.getName() ==  "annotation" )
     self.assertEqual( True, self.equals(expected,n1.toXMLString()) )
     node = None
     pass  
@@ -119,10 +119,10 @@ def test_RDFAnnotation_deleteCVTerms(self):
  + 
     "</annotation>")
     n1 = libsbml.RDFAnnotationParser.deleteRDFCVTermAnnotation(None)
-    self.assert_( n1 == None )
+    self.assertTrue( n1 == None )
     n1 = libsbml.RDFAnnotationParser.deleteRDFCVTermAnnotation(node)
-    self.assert_( n1.getNumChildren() == 0 )
-    self.assert_( n1.getName() ==  "annotation" )
+    self.assertTrue( n1.getNumChildren() == 0 )
+    self.assertTrue( n1.getName() ==  "annotation" )
     self.assertEqual( True, self.equals(empty,n1.toXMLString()) )
     node = self.m.getCompartment(2).getAnnotation()
     n1 = libsbml.RDFAnnotationParser.deleteRDFCVTermAnnotation(node)
@@ -135,7 +135,7 @@ def test_RDFAnnotation_deleteCVTerms(self):
     self.assertEqual( True, self.equals(otherRDF,n1.toXMLString()) )
     node = libsbml.XMLNode.convertStringToXMLNode("<notannotatio/>")
     n1 = libsbml.RDFAnnotationParser.deleteRDFCVTermAnnotation(node)
-    self.assert_( n1 == None )
+    self.assertTrue( n1 == None )
     pass  
 
   def test_RDFAnnotation_deleteWithOther(self):
@@ -199,105 +199,105 @@ def test_RDFAnnotation_deleteWithOutOther(self):
     pass  
 
   def test_RDFAnnotation_getModelHistory(self):
-    self.assert_( (self.m == None) == False )
+    self.assertTrue( (self.m == None) == False )
     history = self.m.getModelHistory()
-    self.assert_( history != None )
+    self.assertTrue( history != None )
     mc = history.getCreator(0)
-    self.assert_((  "Le Novere" == mc.getFamilyName() ))
-    self.assert_((  "Nicolas" == mc.getGivenName() ))
-    self.assert_((  "lenov@ebi.ac.uk" == mc.getEmail() ))
-    self.assert_((  "EMBL-EBI" == mc.getOrganisation() ))
+    self.assertTrue((  "Le Novere" == mc.getFamilyName() ))
+    self.assertTrue((  "Nicolas" == mc.getGivenName() ))
+    self.assertTrue((  "lenov@ebi.ac.uk" == mc.getEmail() ))
+    self.assertTrue((  "EMBL-EBI" == mc.getOrganisation() ))
     date = history.getCreatedDate()
-    self.assert_( date.getYear() == 2005 )
-    self.assert_( date.getMonth() == 2 )
-    self.assert_( date.getDay() == 2 )
-    self.assert_( date.getHour() == 14 )
-    self.assert_( date.getMinute() == 56 )
-    self.assert_( date.getSecond() == 11 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2005 )
+    self.assertTrue( date.getMonth() == 2 )
+    self.assertTrue( date.getDay() == 2 )
+    self.assertTrue( date.getHour() == 14 )
+    self.assertTrue( date.getMinute() == 56 )
+    self.assertTrue( date.getSecond() == 11 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
     date = history.getModifiedDate()
-    self.assert_( date.getYear() == 2006 )
-    self.assert_( date.getMonth() == 5 )
-    self.assert_( date.getDay() == 30 )
-    self.assert_( date.getHour() == 10 )
-    self.assert_( date.getMinute() == 46 )
-    self.assert_( date.getSecond() == 2 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2006 )
+    self.assertTrue( date.getMonth() == 5 )
+    self.assertTrue( date.getDay() == 30 )
+    self.assertTrue( date.getHour() == 10 )
+    self.assertTrue( date.getMinute() == 46 )
+    self.assertTrue( date.getSecond() == 2 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
     pass  
 
   def test_RDFAnnotation_parseCVTerms(self):
     node = libsbml.RDFAnnotationParser.parseCVTerms(self.m.getCompartment(0))
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( node.getNumChildren() == 1 )
     rdf = node.getChild(0)
-    self.assert_((  "RDF" == rdf.getName() ))
-    self.assert_((  "rdf" == rdf.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
-    self.assert_( rdf.getNumChildren() == 1 )
+    self.assertTrue((  "RDF" == rdf.getName() ))
+    self.assertTrue((  "rdf" == rdf.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
+    self.assertTrue( rdf.getNumChildren() == 1 )
     desc = rdf.getChild(0)
-    self.assert_((  "Description" == desc.getName() ))
-    self.assert_((  "rdf" == desc.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
-    self.assert_( desc.getNumChildren() == 1 )
+    self.assertTrue((  "Description" == desc.getName() ))
+    self.assertTrue((  "rdf" == desc.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
+    self.assertTrue( desc.getNumChildren() == 1 )
     is1 = desc.getChild(0)
-    self.assert_((  "is" == is1.getName() ))
-    self.assert_((  "bqbiol" == is1.getPrefix() ))
-    self.assert_( is1.getNumChildren() == 1 )
+    self.assertTrue((  "is" == is1.getName() ))
+    self.assertTrue((  "bqbiol" == is1.getPrefix() ))
+    self.assertTrue( is1.getNumChildren() == 1 )
     Bag = is1.getChild(0)
-    self.assert_((  "Bag" == Bag.getName() ))
-    self.assert_((  "rdf" == Bag.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
-    self.assert_( Bag.getNumChildren() == 4 )
+    self.assertTrue((  "Bag" == Bag.getName() ))
+    self.assertTrue((  "rdf" == Bag.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
+    self.assertTrue( Bag.getNumChildren() == 4 )
     li = Bag.getChild(0)
-    self.assert_((  "li" == li.getName() ))
-    self.assert_((  "rdf" == li.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
-    self.assert_( li.getNumChildren() == 0 )
+    self.assertTrue((  "li" == li.getName() ))
+    self.assertTrue((  "rdf" == li.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
+    self.assertTrue( li.getNumChildren() == 0 )
     li1 = Bag.getChild(1)
-    self.assert_((  "li" == li1.getName() ))
-    self.assert_((  "rdf" == li1.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li1.getURI() ))
-    self.assert_( li1.getNumChildren() == 0 )
+    self.assertTrue((  "li" == li1.getName() ))
+    self.assertTrue((  "rdf" == li1.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li1.getURI() ))
+    self.assertTrue( li1.getNumChildren() == 0 )
     li2 = Bag.getChild(2)
-    self.assert_((  "li" == li2.getName() ))
-    self.assert_((  "rdf" == li2.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li2.getURI() ))
-    self.assert_( li2.getNumChildren() == 0 )
+    self.assertTrue((  "li" == li2.getName() ))
+    self.assertTrue((  "rdf" == li2.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li2.getURI() ))
+    self.assertTrue( li2.getNumChildren() == 0 )
     li3 = Bag.getChild(3)
-    self.assert_((  "li" == li3.getName() ))
-    self.assert_((  "rdf" == li3.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li3.getURI() ))
-    self.assert_( li3.getNumChildren() == 0 )
+    self.assertTrue((  "li" == li3.getName() ))
+    self.assertTrue((  "rdf" == li3.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li3.getURI() ))
+    self.assertTrue( li3.getNumChildren() == 0 )
     node = None
     node1 = libsbml.RDFAnnotationParser.parseCVTerms(None)
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     node1 = libsbml.RDFAnnotationParser.createCVTerms(None)
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     node1 = libsbml.RDFAnnotationParser.parseCVTerms(self.m.getCompartment(2))
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     node1 = libsbml.RDFAnnotationParser.createCVTerms(self.m.getCompartment(2))
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     node1 = libsbml.RDFAnnotationParser.parseCVTerms(self.m)
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     node1 = libsbml.RDFAnnotationParser.createCVTerms(self.m)
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     c = libsbml.Compartment(3,1)
     c.setMetaId("_002")
     node1 = libsbml.RDFAnnotationParser.parseCVTerms(c)
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     node1 = libsbml.RDFAnnotationParser.createCVTerms(c)
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     cv = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     cv.setBiologicalQualifierType(23)
     cv.addResource("http://myres")
     c.addCVTerm(cv)
     node1 = libsbml.RDFAnnotationParser.createCVTerms(c)
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     c = None
     m1 = libsbml.Model(3,1)
     m1.setMetaId("_002")
@@ -306,86 +306,86 @@ def test_RDFAnnotation_parseCVTerms(self):
     cv.addResource("http://myres")
     m1.addCVTerm(cv)
     node1 = libsbml.RDFAnnotationParser.createCVTerms(m1)
-    self.assert_( node1 == None )
+    self.assertTrue( node1 == None )
     pass  
 
   def test_RDFAnnotation_parseModelHistory(self):
     node = libsbml.RDFAnnotationParser.parseModelHistory(self.m)
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( node.getNumChildren() == 1 )
     rdf = node.getChild(0)
-    self.assert_((  "RDF" == rdf.getName() ))
-    self.assert_((  "rdf" == rdf.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
-    self.assert_( rdf.getNumChildren() == 1 )
+    self.assertTrue((  "RDF" == rdf.getName() ))
+    self.assertTrue((  "rdf" == rdf.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
+    self.assertTrue( rdf.getNumChildren() == 1 )
     desc = rdf.getChild(0)
-    self.assert_((  "Description" == desc.getName() ))
-    self.assert_((  "rdf" == desc.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
-    self.assert_( desc.getNumChildren() == 3 )
+    self.assertTrue((  "Description" == desc.getName() ))
+    self.assertTrue((  "rdf" == desc.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
+    self.assertTrue( desc.getNumChildren() == 3 )
     creator = desc.getChild(0)
-    self.assert_((  "creator" == creator.getName() ))
-    self.assert_((  "dc" == creator.getPrefix() ))
-    self.assert_( creator.getNumChildren() == 1 )
+    self.assertTrue((  "creator" == creator.getName() ))
+    self.assertTrue((  "dc" == creator.getPrefix() ))
+    self.assertTrue( creator.getNumChildren() == 1 )
     Bag = creator.getChild(0)
-    self.assert_((  "Bag" == Bag.getName() ))
-    self.assert_((  "rdf" == Bag.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
-    self.assert_( Bag.getNumChildren() == 1 )
+    self.assertTrue((  "Bag" == Bag.getName() ))
+    self.assertTrue((  "rdf" == Bag.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
+    self.assertTrue( Bag.getNumChildren() == 1 )
     li = Bag.getChild(0)
-    self.assert_((  "li" == li.getName() ))
-    self.assert_((  "rdf" == li.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
-    self.assert_( li.getNumChildren() == 3 )
+    self.assertTrue((  "li" == li.getName() ))
+    self.assertTrue((  "rdf" == li.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
+    self.assertTrue( li.getNumChildren() == 3 )
     N = li.getChild(0)
-    self.assert_((  "N" == N.getName() ))
-    self.assert_((  "vCard" == N.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
-    self.assert_( N.getNumChildren() == 2 )
+    self.assertTrue((  "N" == N.getName() ))
+    self.assertTrue((  "vCard" == N.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
+    self.assertTrue( N.getNumChildren() == 2 )
     Family = N.getChild(0)
-    self.assert_((  "Family" == Family.getName() ))
-    self.assert_((  "vCard" == Family.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
-    self.assert_( Family.getNumChildren() == 1 )
+    self.assertTrue((  "Family" == Family.getName() ))
+    self.assertTrue((  "vCard" == Family.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
+    self.assertTrue( Family.getNumChildren() == 1 )
     Given = N.getChild(1)
-    self.assert_((  "Given" == Given.getName() ))
-    self.assert_((  "vCard" == Given.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
-    self.assert_( Given.getNumChildren() == 1 )
+    self.assertTrue((  "Given" == Given.getName() ))
+    self.assertTrue((  "vCard" == Given.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
+    self.assertTrue( Given.getNumChildren() == 1 )
     EMAIL = li.getChild(1)
-    self.assert_((  "EMAIL" == EMAIL.getName() ))
-    self.assert_((  "vCard" == EMAIL.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
-    self.assert_( EMAIL.getNumChildren() == 1 )
+    self.assertTrue((  "EMAIL" == EMAIL.getName() ))
+    self.assertTrue((  "vCard" == EMAIL.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
+    self.assertTrue( EMAIL.getNumChildren() == 1 )
     ORG = li.getChild(2)
-    self.assert_((  "ORG" == ORG.getName() ))
-    self.assert_((  "vCard" == ORG.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
-    self.assert_( ORG.getNumChildren() == 1 )
+    self.assertTrue((  "ORG" == ORG.getName() ))
+    self.assertTrue((  "vCard" == ORG.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
+    self.assertTrue( ORG.getNumChildren() == 1 )
     Orgname = ORG.getChild(0)
-    self.assert_((  "Orgname" == Orgname.getName() ))
-    self.assert_((  "vCard" == Orgname.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
-    self.assert_( Orgname.getNumChildren() == 1 )
+    self.assertTrue((  "Orgname" == Orgname.getName() ))
+    self.assertTrue((  "vCard" == Orgname.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
+    self.assertTrue( Orgname.getNumChildren() == 1 )
     created = desc.getChild(1)
-    self.assert_((  "created" == created.getName() ))
-    self.assert_((  "dcterms" == created.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == created.getURI() ))
-    self.assert_( created.getNumChildren() == 1 )
+    self.assertTrue((  "created" == created.getName() ))
+    self.assertTrue((  "dcterms" == created.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == created.getURI() ))
+    self.assertTrue( created.getNumChildren() == 1 )
     cr_date = created.getChild(0)
-    self.assert_((  "W3CDTF" == cr_date.getName() ))
-    self.assert_((  "dcterms" == cr_date.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
-    self.assert_( cr_date.getNumChildren() == 1 )
+    self.assertTrue((  "W3CDTF" == cr_date.getName() ))
+    self.assertTrue((  "dcterms" == cr_date.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
+    self.assertTrue( cr_date.getNumChildren() == 1 )
     modified = desc.getChild(2)
-    self.assert_((  "modified" == modified.getName() ))
-    self.assert_((  "dcterms" == modified.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == modified.getURI() ))
-    self.assert_( modified.getNumChildren() == 1 )
+    self.assertTrue((  "modified" == modified.getName() ))
+    self.assertTrue((  "dcterms" == modified.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == modified.getURI() ))
+    self.assertTrue( modified.getNumChildren() == 1 )
     mo_date = created.getChild(0)
-    self.assert_((  "W3CDTF" == mo_date.getName() ))
-    self.assert_((  "dcterms" == mo_date.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
-    self.assert_( mo_date.getNumChildren() == 1 )
+    self.assertTrue((  "W3CDTF" == mo_date.getName() ))
+    self.assertTrue((  "dcterms" == mo_date.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
+    self.assertTrue( mo_date.getNumChildren() == 1 )
     node = None
     pass  
 
@@ -420,42 +420,42 @@ def test_RDFAnnotation_removeAnnotation(self):
     "</annotation>")
     i = self.m.getCompartment(4).removeTopLevelAnnotationElement("JDesignerLayout")
     n1 = self.m.getCompartment(4).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.equals(expected,n1.toXMLString()) )
     i = self.m.getListOfCompartments().removeTopLevelAnnotationElement("RDF")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     pass  
 
   def test_RDFAnnotation_removeSingleAnnotation(self):
     n1 = None
     i = self.m.getCompartment(0).removeTopLevelAnnotationElement("RDF")
     n1 = self.m.getCompartment(0).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( n1 == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( n1 == None )
     i = self.m.getCompartment(2).removeTopLevelAnnotationElement("JDesignerLayout")
     n1 = self.m.getCompartment(2).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( n1 == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( n1 == None )
     i = self.m.getCompartment(3).removeTopLevelAnnotationElement("RDF", "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
     n1 = self.m.getCompartment(3).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( n1 == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( n1 == None )
     pass  
 
   def test_RDFAnnotation_removeSingleAnnotation1(self):
     n1 = None
     i = self.m.getCompartment(0).removeTopLevelAnnotationElement("RDF1")
     n1 = self.m.getCompartment(0).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_ANNOTATION_NAME_NOT_FOUND )
-    self.assert_( n1.getNumChildren() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_ANNOTATION_NAME_NOT_FOUND )
+    self.assertTrue( n1.getNumChildren() == 1 )
     i = self.m.getCompartment(2).removeTopLevelAnnotationElement("JDLayout")
     n1 = self.m.getCompartment(2).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_ANNOTATION_NAME_NOT_FOUND )
-    self.assert_( n1.getNumChildren() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_ANNOTATION_NAME_NOT_FOUND )
+    self.assertTrue( n1.getNumChildren() == 1 )
     i = self.m.getCompartment(3).removeTopLevelAnnotationElement("RDF", "http://www.w3.org/1999/02/22-rdf-syntax-ns")
     n1 = self.m.getCompartment(3).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_ANNOTATION_NS_NOT_FOUND )
-    self.assert_( n1.getNumChildren() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_ANNOTATION_NS_NOT_FOUND )
+    self.assertTrue( n1.getNumChildren() == 1 )
     pass  
 
   def test_RDFAnnotation_replaceAnnotation(self):
@@ -484,7 +484,7 @@ def test_RDFAnnotation_replaceAnnotation(self):
     "</annotation>")
     i = self.m.getCompartment(0).replaceTopLevelAnnotationElement(node)
     n1 = self.m.getCompartment(0).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.equals(expected,n1.toXMLString()) )
     pass  
 
@@ -549,7 +549,7 @@ def test_RDFAnnotation_replaceAnnotation1(self):
     "</annotation>")
     i = self.m.getCompartment(4).replaceTopLevelAnnotationElement(noRDF)
     n1 = self.m.getCompartment(4).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.equals(expected,n1.toXMLString()) )
     pass  
 
@@ -609,17 +609,17 @@ def test_RDFAnnotation_replaceAnnotation2(self):
  + 
     "</annotation>")
     i = self.m.getCompartment(4).replaceTopLevelAnnotationElement(twoAnn)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     i = self.m.getCompartment(4).replaceTopLevelAnnotationElement(jd)
     n1 = self.m.getCompartment(4).getAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.equals(twoAnn,n1.toXMLString()) )
     pass  
 
   def test_RDFAnnotation_testAnnotationForMetaId(self):
     doc = libsbml.SBMLDocument( 3,1 )
     model = doc.createModel()
-    self.assert_( model != None )
+    self.assertTrue( model != None )
     model.setId("test1")
     term = libsbml.CVTerm( libsbml.MODEL_QUALIFIER )
     term.addResource("testResource")
@@ -628,7 +628,7 @@ def test_RDFAnnotation_testAnnotationForMetaId(self):
     model.addCVTerm(term)
     model.setMetaId("")
     test = model.toSBML()
-    self.assert_( test ==  "<model id=\"test1\"/>" )
+    self.assertTrue( test ==  "<model id=\"test1\"/>" )
     pass  
 
 
@@ -706,25 +706,25 @@ def test_RDFAnnotation_testMissingAbout(self):
     stream = libsbml.XMLInputStream( withAbout,False )
     node = libsbml.XMLNode( stream )
     libsbml.RDFAnnotationParser.parseRDFAnnotation(node,cvTerms)
-    self.assert_( cvTerms.getSize() == 1 )
+    self.assertTrue( cvTerms.getSize() == 1 )
     cvTerms = None
     cvTerms = libsbml.CVTermList()
     libsbml.RDFAnnotationParser.parseRDFAnnotation(node,cvTerms )
-    self.assert_( cvTerms.getSize() == 1 )
+    self.assertTrue( cvTerms.getSize() == 1 )
     cvTerms = None
     cvTerms = None
     cvTerms = libsbml.CVTermList()
     stream1 = libsbml.XMLInputStream( emptyAbout,False )
     node1 = libsbml.XMLNode( stream1 )
     libsbml.RDFAnnotationParser.parseRDFAnnotation(node1,cvTerms)
-    self.assert_( cvTerms.getSize() == 0 )
+    self.assertTrue( cvTerms.getSize() == 0 )
     cvTerms = None
     cvTerms = None
     cvTerms = libsbml.CVTermList()
     stream2 = libsbml.XMLInputStream( noAbout,False )
     node2 = libsbml.XMLNode( stream2 )
     libsbml.RDFAnnotationParser.parseRDFAnnotation(node2,cvTerms)
-    self.assert_( cvTerms.getSize() == 0 )
+    self.assertTrue( cvTerms.getSize() == 0 )
     cvTerms = None
     cvTerms = None
     pass  
@@ -732,7 +732,7 @@ def test_RDFAnnotation_testMissingAbout(self):
   def test_RDFAnnotation_testMissingMetaId(self):
     doc = libsbml.SBMLDocument( 3,1 )
     model = doc.createModel()
-    self.assert_( model != None )
+    self.assertTrue( model != None )
     model.setId("test1")
     term = libsbml.CVTerm( libsbml.MODEL_QUALIFIER )
     term.addResource("testResource")
@@ -741,7 +741,7 @@ def test_RDFAnnotation_testMissingMetaId(self):
     model.addCVTerm(term)
     model.setMetaId("")
     test = model.toSBML()
-    self.assert_( test ==  "<model id=\"test1\"/>" )
+    self.assertTrue( test ==  "<model id=\"test1\"/>" )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/annotation/TestRDFAnnotation2.py b/src/bindings/python/test/annotation/TestRDFAnnotation2.py
index da3bf7a1c4..05558ea216 100644
--- a/src/bindings/python/test/annotation/TestRDFAnnotation2.py
+++ b/src/bindings/python/test/annotation/TestRDFAnnotation2.py
@@ -63,50 +63,50 @@ def tearDown(self):
 
   def test_RDFAnnotation2_getModelHistory(self):
     history = self.m2.getModelHistory()
-    self.assert_( history != None )
+    self.assertTrue( history != None )
     mc = history.getCreator(0)
-    self.assert_((  "Hucka" == mc.getFamilyName() ))
-    self.assert_((  "Mike" == mc.getGivenName() ))
-    self.assert_((  "mhucka@caltech.edu" == mc.getEmail() ))
-    self.assert_((  "BNMC" == mc.getOrganisation() ))
+    self.assertTrue((  "Hucka" == mc.getFamilyName() ))
+    self.assertTrue((  "Mike" == mc.getGivenName() ))
+    self.assertTrue((  "mhucka@caltech.edu" == mc.getEmail() ))
+    self.assertTrue((  "BNMC" == mc.getOrganisation() ))
     mc1 = history.getCreator(1)
-    self.assert_((  "Keating" == mc1.getFamilyName() ))
-    self.assert_((  "Sarah" == mc1.getGivenName() ))
-    self.assert_((  "skeating@caltech.edu" == mc1.getEmail() ))
-    self.assert_((  "UH" == mc1.getOrganisation() ))
+    self.assertTrue((  "Keating" == mc1.getFamilyName() ))
+    self.assertTrue((  "Sarah" == mc1.getGivenName() ))
+    self.assertTrue((  "skeating@caltech.edu" == mc1.getEmail() ))
+    self.assertTrue((  "UH" == mc1.getOrganisation() ))
     date = history.getCreatedDate()
-    self.assert_( date.getYear() == 2005 )
-    self.assert_( date.getMonth() == 2 )
-    self.assert_( date.getDay() == 2 )
-    self.assert_( date.getHour() == 14 )
-    self.assert_( date.getMinute() == 56 )
-    self.assert_( date.getSecond() == 11 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2005 )
+    self.assertTrue( date.getMonth() == 2 )
+    self.assertTrue( date.getDay() == 2 )
+    self.assertTrue( date.getHour() == 14 )
+    self.assertTrue( date.getMinute() == 56 )
+    self.assertTrue( date.getSecond() == 11 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
     date = history.getModifiedDate()
-    self.assert_( date.getYear() == 2006 )
-    self.assert_( date.getMonth() == 5 )
-    self.assert_( date.getDay() == 30 )
-    self.assert_( date.getHour() == 10 )
-    self.assert_( date.getMinute() == 46 )
-    self.assert_( date.getSecond() == 2 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2006 )
+    self.assertTrue( date.getMonth() == 5 )
+    self.assertTrue( date.getDay() == 30 )
+    self.assertTrue( date.getHour() == 10 )
+    self.assertTrue( date.getMinute() == 46 )
+    self.assertTrue( date.getSecond() == 2 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
     date = history.getModifiedDate(1)
-    self.assert_( date.getYear() == 2007 )
-    self.assert_( date.getMonth() == 1 )
-    self.assert_( date.getDay() == 16 )
-    self.assert_( date.getHour() == 15 )
-    self.assert_( date.getMinute() == 31 )
-    self.assert_( date.getSecond() == 52 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2007-01-16T15:31:52Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2007 )
+    self.assertTrue( date.getMonth() == 1 )
+    self.assertTrue( date.getDay() == 16 )
+    self.assertTrue( date.getHour() == 15 )
+    self.assertTrue( date.getMinute() == 31 )
+    self.assertTrue( date.getSecond() == 52 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2007-01-16T15:31:52Z" == date.getDateAsString() ))
     pass  
 
   def test_RDFAnnotation2_modelWithHistoryAndCVTerms(self):
diff --git a/src/bindings/python/test/annotation/TestRDFAnnotationC.py b/src/bindings/python/test/annotation/TestRDFAnnotationC.py
index 17bc8ab6b6..b3b246cde5 100644
--- a/src/bindings/python/test/annotation/TestRDFAnnotationC.py
+++ b/src/bindings/python/test/annotation/TestRDFAnnotationC.py
@@ -55,167 +55,167 @@ def test_RDFAnnotation_C_delete(self):
     obj = self.m.getCompartment(0)
     node = libsbml.RDFAnnotationParser.parseCVTerms(obj)
     n1 = libsbml.RDFAnnotationParser.deleteRDFAnnotation(node)
-    self.assert_( n1.getNumChildren() == 0 )
-    self.assert_((  "annotation" == n1.getName() ))
+    self.assertTrue( n1.getNumChildren() == 0 )
+    self.assertTrue((  "annotation" == n1.getName() ))
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_RDFAnnotation_C_getModelHistory(self):
-    self.assert_( (self.m == None) == False )
+    self.assertTrue( (self.m == None) == False )
     history = self.m.getModelHistory()
-    self.assert_( history != None )
+    self.assertTrue( history != None )
     mc = history.getCreator(0)
-    self.assert_((  "Le Novere" == mc.getFamilyName() ))
-    self.assert_((  "Nicolas" == mc.getGivenName() ))
-    self.assert_((  "lenov@ebi.ac.uk" == mc.getEmail() ))
-    self.assert_((  "EMBL-EBI" == mc.getOrganisation() ))
+    self.assertTrue((  "Le Novere" == mc.getFamilyName() ))
+    self.assertTrue((  "Nicolas" == mc.getGivenName() ))
+    self.assertTrue((  "lenov@ebi.ac.uk" == mc.getEmail() ))
+    self.assertTrue((  "EMBL-EBI" == mc.getOrganisation() ))
     date = history.getCreatedDate()
-    self.assert_( date.getYear() == 2005 )
-    self.assert_( date.getMonth() == 2 )
-    self.assert_( date.getDay() == 2 )
-    self.assert_( date.getHour() == 14 )
-    self.assert_( date.getMinute() == 56 )
-    self.assert_( date.getSecond() == 11 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2005 )
+    self.assertTrue( date.getMonth() == 2 )
+    self.assertTrue( date.getDay() == 2 )
+    self.assertTrue( date.getHour() == 14 )
+    self.assertTrue( date.getMinute() == 56 )
+    self.assertTrue( date.getSecond() == 11 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2005-02-02T14:56:11Z" == date.getDateAsString() ))
     date = history.getModifiedDate()
-    self.assert_( date.getYear() == 2006 )
-    self.assert_( date.getMonth() == 5 )
-    self.assert_( date.getDay() == 30 )
-    self.assert_( date.getHour() == 10 )
-    self.assert_( date.getMinute() == 46 )
-    self.assert_( date.getSecond() == 2 )
-    self.assert_( date.getSignOffset() == 0 )
-    self.assert_( date.getHoursOffset() == 0 )
-    self.assert_( date.getMinutesOffset() == 0 )
-    self.assert_((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
+    self.assertTrue( date.getYear() == 2006 )
+    self.assertTrue( date.getMonth() == 5 )
+    self.assertTrue( date.getDay() == 30 )
+    self.assertTrue( date.getHour() == 10 )
+    self.assertTrue( date.getMinute() == 46 )
+    self.assertTrue( date.getSecond() == 2 )
+    self.assertTrue( date.getSignOffset() == 0 )
+    self.assertTrue( date.getHoursOffset() == 0 )
+    self.assertTrue( date.getMinutesOffset() == 0 )
+    self.assertTrue((  "2006-05-30T10:46:02Z" == date.getDateAsString() ))
     pass  
 
   def test_RDFAnnotation_C_parseCVTerms(self):
     obj = self.m.getCompartment(0)
     node = libsbml.RDFAnnotationParser.parseCVTerms(obj)
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( node.getNumChildren() == 1 )
     rdf = node.getChild(0)
-    self.assert_((  "RDF" == rdf.getName() ))
-    self.assert_((  "rdf" == rdf.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
-    self.assert_( rdf.getNumChildren() == 1 )
+    self.assertTrue((  "RDF" == rdf.getName() ))
+    self.assertTrue((  "rdf" == rdf.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
+    self.assertTrue( rdf.getNumChildren() == 1 )
     desc = rdf.getChild(0)
-    self.assert_((  "Description" == desc.getName() ))
-    self.assert_((  "rdf" == desc.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
-    self.assert_( desc.getNumChildren() == 1 )
+    self.assertTrue((  "Description" == desc.getName() ))
+    self.assertTrue((  "rdf" == desc.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
+    self.assertTrue( desc.getNumChildren() == 1 )
     is1 = desc.getChild(0)
-    self.assert_((  "is" == is1.getName() ))
-    self.assert_((  "bqbiol" == is1.getPrefix() ))
-    self.assert_( is1.getNumChildren() == 1 )
+    self.assertTrue((  "is" == is1.getName() ))
+    self.assertTrue((  "bqbiol" == is1.getPrefix() ))
+    self.assertTrue( is1.getNumChildren() == 1 )
     Bag = is1.getChild(0)
-    self.assert_((  "Bag" == Bag.getName() ))
-    self.assert_((  "rdf" == Bag.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
-    self.assert_( Bag.getNumChildren() == 4 )
+    self.assertTrue((  "Bag" == Bag.getName() ))
+    self.assertTrue((  "rdf" == Bag.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
+    self.assertTrue( Bag.getNumChildren() == 4 )
     li = Bag.getChild(0)
-    self.assert_((  "li" == li.getName() ))
-    self.assert_((  "rdf" == li.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
-    self.assert_( li.getNumChildren() == 0 )
+    self.assertTrue((  "li" == li.getName() ))
+    self.assertTrue((  "rdf" == li.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
+    self.assertTrue( li.getNumChildren() == 0 )
     li1 = Bag.getChild(1)
-    self.assert_((  "li" == li1.getName() ))
-    self.assert_((  "rdf" == li1.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li1.getURI() ))
-    self.assert_( li1.getNumChildren() == 0 )
+    self.assertTrue((  "li" == li1.getName() ))
+    self.assertTrue((  "rdf" == li1.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li1.getURI() ))
+    self.assertTrue( li1.getNumChildren() == 0 )
     li2 = Bag.getChild(2)
-    self.assert_((  "li" == li2.getName() ))
-    self.assert_((  "rdf" == li2.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li2.getURI() ))
-    self.assert_( li2.getNumChildren() == 0 )
+    self.assertTrue((  "li" == li2.getName() ))
+    self.assertTrue((  "rdf" == li2.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li2.getURI() ))
+    self.assertTrue( li2.getNumChildren() == 0 )
     li3 = Bag.getChild(3)
-    self.assert_((  "li" == li3.getName() ))
-    self.assert_((  "rdf" == li3.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li3.getURI() ))
-    self.assert_( li3.getNumChildren() == 0 )
+    self.assertTrue((  "li" == li3.getName() ))
+    self.assertTrue((  "rdf" == li3.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li3.getURI() ))
+    self.assertTrue( li3.getNumChildren() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_RDFAnnotation_C_parseModelHistory(self):
     node = libsbml.RDFAnnotationParser.parseModelHistory(self.m)
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( node.getNumChildren() == 1 )
     rdf = node.getChild(0)
-    self.assert_((  "RDF" == rdf.getName() ))
-    self.assert_((  "rdf" == rdf.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
-    self.assert_( rdf.getNumChildren() == 1 )
+    self.assertTrue((  "RDF" == rdf.getName() ))
+    self.assertTrue((  "rdf" == rdf.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
+    self.assertTrue( rdf.getNumChildren() == 1 )
     desc = rdf.getChild(0)
-    self.assert_((  "Description" == desc.getName() ))
-    self.assert_((  "rdf" == desc.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
-    self.assert_( desc.getNumChildren() == 3 )
+    self.assertTrue((  "Description" == desc.getName() ))
+    self.assertTrue((  "rdf" == desc.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
+    self.assertTrue( desc.getNumChildren() == 3 )
     creator = desc.getChild(0)
-    self.assert_((  "creator" == creator.getName() ))
-    self.assert_((  "dc" == creator.getPrefix() ))
-    self.assert_( creator.getNumChildren() == 1 )
+    self.assertTrue((  "creator" == creator.getName() ))
+    self.assertTrue((  "dc" == creator.getPrefix() ))
+    self.assertTrue( creator.getNumChildren() == 1 )
     Bag = creator.getChild(0)
-    self.assert_((  "Bag" == Bag.getName() ))
-    self.assert_((  "rdf" == Bag.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
-    self.assert_( Bag.getNumChildren() == 1 )
+    self.assertTrue((  "Bag" == Bag.getName() ))
+    self.assertTrue((  "rdf" == Bag.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
+    self.assertTrue( Bag.getNumChildren() == 1 )
     li = Bag.getChild(0)
-    self.assert_((  "li" == li.getName() ))
-    self.assert_((  "rdf" == li.getPrefix() ))
-    self.assert_((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
-    self.assert_( li.getNumChildren() == 3 )
+    self.assertTrue((  "li" == li.getName() ))
+    self.assertTrue((  "rdf" == li.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
+    self.assertTrue( li.getNumChildren() == 3 )
     N = li.getChild(0)
-    self.assert_((  "N" == N.getName() ))
-    self.assert_((  "vCard" == N.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
-    self.assert_( N.getNumChildren() == 2 )
+    self.assertTrue((  "N" == N.getName() ))
+    self.assertTrue((  "vCard" == N.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
+    self.assertTrue( N.getNumChildren() == 2 )
     Family = N.getChild(0)
-    self.assert_((  "Family" == Family.getName() ))
-    self.assert_((  "vCard" == Family.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
-    self.assert_( Family.getNumChildren() == 1 )
+    self.assertTrue((  "Family" == Family.getName() ))
+    self.assertTrue((  "vCard" == Family.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
+    self.assertTrue( Family.getNumChildren() == 1 )
     Given = N.getChild(1)
-    self.assert_((  "Given" == Given.getName() ))
-    self.assert_((  "vCard" == Given.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
-    self.assert_( Given.getNumChildren() == 1 )
+    self.assertTrue((  "Given" == Given.getName() ))
+    self.assertTrue((  "vCard" == Given.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
+    self.assertTrue( Given.getNumChildren() == 1 )
     EMAIL = li.getChild(1)
-    self.assert_((  "EMAIL" == EMAIL.getName() ))
-    self.assert_((  "vCard" == EMAIL.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
-    self.assert_( EMAIL.getNumChildren() == 1 )
+    self.assertTrue((  "EMAIL" == EMAIL.getName() ))
+    self.assertTrue((  "vCard" == EMAIL.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
+    self.assertTrue( EMAIL.getNumChildren() == 1 )
     ORG = li.getChild(2)
-    self.assert_((  "ORG" == ORG.getName() ))
-    self.assert_((  "vCard" == ORG.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
-    self.assert_( ORG.getNumChildren() == 1 )
+    self.assertTrue((  "ORG" == ORG.getName() ))
+    self.assertTrue((  "vCard" == ORG.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
+    self.assertTrue( ORG.getNumChildren() == 1 )
     Orgname = ORG.getChild(0)
-    self.assert_((  "Orgname" == Orgname.getName() ))
-    self.assert_((  "vCard" == Orgname.getPrefix() ))
-    self.assert_((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
-    self.assert_( Orgname.getNumChildren() == 1 )
+    self.assertTrue((  "Orgname" == Orgname.getName() ))
+    self.assertTrue((  "vCard" == Orgname.getPrefix() ))
+    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
+    self.assertTrue( Orgname.getNumChildren() == 1 )
     created = desc.getChild(1)
-    self.assert_((  "created" == created.getName() ))
-    self.assert_((  "dcterms" == created.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == created.getURI() ))
-    self.assert_( created.getNumChildren() == 1 )
+    self.assertTrue((  "created" == created.getName() ))
+    self.assertTrue((  "dcterms" == created.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == created.getURI() ))
+    self.assertTrue( created.getNumChildren() == 1 )
     cr_date = created.getChild(0)
-    self.assert_((  "W3CDTF" == cr_date.getName() ))
-    self.assert_((  "dcterms" == cr_date.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
-    self.assert_( cr_date.getNumChildren() == 1 )
+    self.assertTrue((  "W3CDTF" == cr_date.getName() ))
+    self.assertTrue((  "dcterms" == cr_date.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
+    self.assertTrue( cr_date.getNumChildren() == 1 )
     modified = desc.getChild(2)
-    self.assert_((  "modified" == modified.getName() ))
-    self.assert_((  "dcterms" == modified.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == modified.getURI() ))
-    self.assert_( modified.getNumChildren() == 1 )
+    self.assertTrue((  "modified" == modified.getName() ))
+    self.assertTrue((  "dcterms" == modified.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == modified.getURI() ))
+    self.assertTrue( modified.getNumChildren() == 1 )
     mo_date = created.getChild(0)
-    self.assert_((  "W3CDTF" == mo_date.getName() ))
-    self.assert_((  "dcterms" == mo_date.getPrefix() ))
-    self.assert_((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
-    self.assert_( mo_date.getNumChildren() == 1 )
+    self.assertTrue((  "W3CDTF" == mo_date.getName() ))
+    self.assertTrue((  "dcterms" == mo_date.getPrefix() ))
+    self.assertTrue((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
+    self.assertTrue( mo_date.getNumChildren() == 1 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/annotation/TestValidation.py b/src/bindings/python/test/annotation/TestValidation.py
index 67500d46f7..23296cd201 100644
--- a/src/bindings/python/test/annotation/TestValidation.py
+++ b/src/bindings/python/test/annotation/TestValidation.py
@@ -39,7 +39,7 @@ class TestValidation(unittest.TestCase):
 
   def test_Validation_CVTerm1(self):
     cv = libsbml.CVTerm()
-    self.assert_( cv != None )
+    self.assertTrue( cv != None )
     self.assertEqual( False, (cv.hasRequiredAttributes()) )
     cv.setQualifierType(libsbml.MODEL_QUALIFIER)
     self.assertEqual( False, (cv.hasRequiredAttributes()) )
@@ -52,7 +52,7 @@ def test_Validation_CVTerm1(self):
 
   def test_Validation_CVTerm2(self):
     cv = libsbml.CVTerm()
-    self.assert_( cv != None )
+    self.assertTrue( cv != None )
     self.assertEqual( False, (cv.hasRequiredAttributes()) )
     cv.setQualifierType(libsbml.BIOLOGICAL_QUALIFIER)
     self.assertEqual( False, (cv.hasRequiredAttributes()) )
@@ -65,35 +65,35 @@ def test_Validation_CVTerm2(self):
 
   def test_Validation_Date1(self):
     date = libsbml.Date(200,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     self.assertEqual( False, (date.representsValidDate()) )
     date = None
     pass  
 
   def test_Validation_Date2(self):
     date = libsbml.Date(2007,14,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     self.assertEqual( False, (date.representsValidDate()) )
     date = None
     pass  
 
   def test_Validation_Date3(self):
     date = libsbml.Date("Jan 12")
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     self.assertEqual( False, (date.representsValidDate()) )
     date = None
     pass  
 
   def test_Validation_Date4(self):
     date = libsbml.Date(2007,12,30,12,15,45,1,2,0)
-    self.assert_( date != None )
+    self.assertTrue( date != None )
     self.assertEqual( True, date.representsValidDate() )
     date = None
     pass  
 
   def test_Validation_ModelCreator(self):
     mc = libsbml.ModelCreator()
-    self.assert_( mc != None )
+    self.assertTrue( mc != None )
     self.assertEqual( False, (mc.hasRequiredAttributes()) )
     mc.setEmail("k123")
     self.assertEqual( False, (mc.hasRequiredAttributes()) )
@@ -106,7 +106,7 @@ def test_Validation_ModelCreator(self):
 
   def test_Validation_ModelHistory1(self):
     mh = libsbml.ModelHistory()
-    self.assert_( mh != None )
+    self.assertTrue( mh != None )
     self.assertEqual( False, (mh.hasRequiredAttributes()) )
     date = libsbml.Date(2007,12,30,12,15,45,1,2,0)
     mh.setCreatedDate(date)
@@ -123,7 +123,7 @@ def test_Validation_ModelHistory1(self):
 
   def test_Validation_ModelHistory2(self):
     mh = libsbml.ModelHistory()
-    self.assert_( mh != None )
+    self.assertTrue( mh != None )
     self.assertEqual( False, (mh.hasRequiredAttributes()) )
     date = libsbml.Date(200,12,30,12,15,45,1,2,0)
     mh.setCreatedDate(date)
@@ -140,7 +140,7 @@ def test_Validation_ModelHistory2(self):
 
   def test_Validation_ModelHistory3(self):
     mh = libsbml.ModelHistory()
-    self.assert_( mh != None )
+    self.assertTrue( mh != None )
     self.assertEqual( False, (mh.hasRequiredAttributes()) )
     date = libsbml.Date(2007,12,30,12,15,45,1,2,0)
     mh.setCreatedDate(date)
diff --git a/src/bindings/python/test/math/TestASTNode.py b/src/bindings/python/test/math/TestASTNode.py
index d31be62bda..4c4c54908f 100644
--- a/src/bindings/python/test/math/TestASTNode.py
+++ b/src/bindings/python/test/math/TestASTNode.py
@@ -50,16 +50,16 @@ def test_ASTNode_addChild1(self):
     c2.setName( "b")
     node.addChild(c1)
     node.addChild(c2)
-    self.assert_( node.getNumChildren() == 2 )
-    self.assert_((  "and(a, b)" == libsbml.formulaToString(node) ))
+    self.assertTrue( node.getNumChildren() == 2 )
+    self.assertTrue((  "and(a, b)" == libsbml.formulaToString(node) ))
     c1_1.setName( "d")
     i = node.addChild(c1_1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 3 )
-    self.assert_((  "and(a, b, d)" == libsbml.formulaToString(node) ))
-    self.assert_((  "a" == node.getChild(0).getName() ))
-    self.assert_((  "b" == node.getChild(1).getName() ))
-    self.assert_((  "d" == node.getChild(2).getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 3 )
+    self.assertTrue((  "and(a, b, d)" == libsbml.formulaToString(node) ))
+    self.assertTrue((  "a" == node.getChild(0).getName() ))
+    self.assertTrue((  "b" == node.getChild(1).getName() ))
+    self.assertTrue((  "d" == node.getChild(2).getName() ))
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -68,11 +68,11 @@ def test_ASTNode_addSemanticsAnnotation(self):
     node = libsbml.ASTNode()
     i = 0
     i = node.addSemanticsAnnotation(ann)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumSemanticsAnnotations() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumSemanticsAnnotations() == 1 )
     i = node.addSemanticsAnnotation(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( node.getNumSemanticsAnnotations() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( node.getNumSemanticsAnnotations() == 1 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -80,10 +80,10 @@ def test_ASTNode_avogadro(self):
     n = libsbml.ASTNode()
     n.setType(libsbml.AST_NAME_AVOGADRO)
     n.setName( "NA")
-    self.assert_((  "NA" == n.getName() ))
+    self.assertTrue((  "NA" == n.getName() ))
     val = n.getReal()
-    self.assert_( val == 6.02214179e23 )
-    self.assert_( n.isConstant() == 1 )
+    self.assertTrue( val == 6.02214179e23 )
+    self.assertTrue( n.isConstant() == 1 )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -91,10 +91,10 @@ def test_ASTNode_avogadro_bug(self):
     n = libsbml.ASTNode()
     n.setName( "NA")
     n.setType(libsbml.AST_NAME_AVOGADRO)
-    self.assert_((  "NA" == n.getName() ))
+    self.assertTrue((  "NA" == n.getName() ))
     val = n.getReal()
-    self.assert_( val == 6.02214179e23 )
-    self.assert_( n.isConstant() == 1 )
+    self.assertTrue( val == 6.02214179e23 )
+    self.assertTrue( n.isConstant() == 1 )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -103,22 +103,22 @@ def test_ASTNode_canonicalizeConstants(self):
     n.setName( "ExponentialE")
     self.assertEqual( True, n.isName() )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_CONSTANT_E )
+    self.assertTrue( n.getType() == libsbml.AST_CONSTANT_E )
     n.setType(libsbml.AST_NAME)
     n.setName( "False")
     self.assertEqual( True, n.isName() )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_CONSTANT_FALSE )
+    self.assertTrue( n.getType() == libsbml.AST_CONSTANT_FALSE )
     n.setType(libsbml.AST_NAME)
     n.setName( "Pi")
     self.assertEqual( True, n.isName() )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_CONSTANT_PI )
+    self.assertTrue( n.getType() == libsbml.AST_CONSTANT_PI )
     n.setType(libsbml.AST_NAME)
     n.setName( "True")
     self.assertEqual( True, n.isName() )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_CONSTANT_TRUE )
+    self.assertTrue( n.getType() == libsbml.AST_CONSTANT_TRUE )
     n.setType(libsbml.AST_NAME)
     n.setName( "Foo")
     self.assertEqual( True, n.isName() )
@@ -130,307 +130,307 @@ def test_ASTNode_canonicalizeConstants(self):
   def test_ASTNode_canonicalizeFunctions(self):
     n = libsbml.ASTNode(libsbml.AST_FUNCTION)
     n.setName( "abs")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ABS )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ABS )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arccos")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCCOS )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOS )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arccosh")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCCOSH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOSH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arccot")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCCOT )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOT )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arccoth")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCCOTH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOTH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arccsc")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCCSC )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCSC )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arccsch")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCCSCH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCSCH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arcsec")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCSEC )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSEC )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arcsech")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCSECH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSECH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arcsin")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCSIN )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSIN )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arcsinh")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCSINH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSINH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arctan")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCTAN )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTAN )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "arctanh")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCTANH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTANH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "ceiling")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_CEILING )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_CEILING )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "cos")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_COS )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_COS )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "cosh")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_COSH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_COSH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "cot")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_COT )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_COT )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "coth")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_COTH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_COTH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "csc")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_CSC )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_CSC )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "csch")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_CSCH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_CSCH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "exp")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_EXP )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_EXP )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "factorial")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_FACTORIAL )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_FACTORIAL )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "floor")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_FLOOR )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_FLOOR )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "lambda")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_LAMBDA )
+    self.assertTrue( n.getType() == libsbml.AST_LAMBDA )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "ln")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_LN )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LN )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "log")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_LOG )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "piecewise")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_PIECEWISE )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_PIECEWISE )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "power")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_POWER )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "root")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ROOT )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ROOT )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "sec")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_SEC )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_SEC )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "sech")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_SECH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_SECH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "sin")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_SIN )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_SIN )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "sinh")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_SINH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_SINH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "tan")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_TAN )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_TAN )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "tanh")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_TANH )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_TANH )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "Foo")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_canonicalizeFunctionsL1(self):
     n = libsbml.ASTNode(libsbml.AST_FUNCTION)
     n.setName( "acos")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCCOS )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOS )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "asin")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCSIN )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSIN )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "atan")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCTAN )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTAN )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "ceil")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_CEILING )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_CEILING )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "pow")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_POWER )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     n = libsbml.ASTNode(libsbml.AST_FUNCTION)
     n.setName( "log")
     c = libsbml.ASTNode()
     c.setName( "x")
     n.addChild(c)
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
-    self.assert_( n.getNumChildren() == 1 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getNumChildren() == 1 )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_LN )
-    self.assert_( n.getNumChildren() == 1 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LN )
+    self.assertTrue( n.getNumChildren() == 1 )
     n.setType(libsbml.AST_FUNCTION)
     c = libsbml.ASTNode()
     c.setName( "y")
     n.addChild(c)
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
-    self.assert_( n.getNumChildren() == 2 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getNumChildren() == 2 )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_LOG )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     n = libsbml.ASTNode(libsbml.AST_FUNCTION)
     n.setName( "log10")
     c = libsbml.ASTNode()
     c.setName( "x")
     n.addChild(c)
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
-    self.assert_( n.getNumChildren() == 1 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getNumChildren() == 1 )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_LOG )
-    self.assert_( n.getNumChildren() == 2 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG )
+    self.assertTrue( n.getNumChildren() == 2 )
     c = n.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 10 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 10 )
     c = n.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     n = libsbml.ASTNode(libsbml.AST_FUNCTION)
     n.setName( "sqr")
     c = libsbml.ASTNode()
     c.setName( "x")
     n.addChild(c)
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
-    self.assert_( n.getNumChildren() == 1 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getNumChildren() == 1 )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_POWER )
-    self.assert_( n.getNumChildren() == 2 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER )
+    self.assertTrue( n.getNumChildren() == 2 )
     c = n.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
     c = n.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     n = libsbml.ASTNode(libsbml.AST_FUNCTION)
     n.setName( "sqrt")
     c = libsbml.ASTNode()
     c.setName( "x")
     n.addChild(c)
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
-    self.assert_( n.getNumChildren() == 1 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getNumChildren() == 1 )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ROOT )
-    self.assert_( n.getNumChildren() == 2 )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ROOT )
+    self.assertTrue( n.getNumChildren() == 2 )
     c = n.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
     c = n.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_canonicalizeLogical(self):
     n = libsbml.ASTNode(libsbml.AST_FUNCTION)
     n.setName( "and")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_LOGICAL_AND )
+    self.assertTrue( n.getType() == libsbml.AST_LOGICAL_AND )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "not")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_LOGICAL_NOT )
+    self.assertTrue( n.getType() == libsbml.AST_LOGICAL_NOT )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "or")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_LOGICAL_OR )
+    self.assertTrue( n.getType() == libsbml.AST_LOGICAL_OR )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "xor")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_LOGICAL_XOR )
+    self.assertTrue( n.getType() == libsbml.AST_LOGICAL_XOR )
     n.setType(libsbml.AST_FUNCTION)
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -438,34 +438,34 @@ def test_ASTNode_canonicalizeLogical(self):
   def test_ASTNode_canonicalizeRelational(self):
     n = libsbml.ASTNode(libsbml.AST_FUNCTION)
     n.setName( "eq")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_RELATIONAL_EQ )
+    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_EQ )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "geq")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_RELATIONAL_GEQ )
+    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_GEQ )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "gt")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_RELATIONAL_GT )
+    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_GT )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "leq")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_RELATIONAL_LEQ )
+    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_LEQ )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "lt")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_RELATIONAL_LT )
+    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_LT )
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "neq")
-    self.assert_( n.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
     n.canonicalize()
-    self.assert_( n.getType() == libsbml.AST_RELATIONAL_NEQ )
+    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_NEQ )
     n.setType(libsbml.AST_FUNCTION)
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -481,38 +481,38 @@ def test_ASTNode_children(self):
     right2.setValue(3)
     parent.addChild(left)
     parent.addChild(right)
-    self.assert_( parent.getNumChildren() == 2 )
-    self.assert_( left.getNumChildren() == 0 )
-    self.assert_( right.getNumChildren() == 0 )
-    self.assert_( parent.getLeftChild() == left )
-    self.assert_( parent.getRightChild() == right )
-    self.assert_( parent.getChild(0) == left )
-    self.assert_( parent.getChild(1) == right )
-    self.assert_( parent.getChild(2) == None )
+    self.assertTrue( parent.getNumChildren() == 2 )
+    self.assertTrue( left.getNumChildren() == 0 )
+    self.assertTrue( right.getNumChildren() == 0 )
+    self.assertTrue( parent.getLeftChild() == left )
+    self.assertTrue( parent.getRightChild() == right )
+    self.assertTrue( parent.getChild(0) == left )
+    self.assertTrue( parent.getChild(1) == right )
+    self.assertTrue( parent.getChild(2) == None )
     parent.addChild(right2)
-    self.assert_( parent.getNumChildren() == 3 )
-    self.assert_( left.getNumChildren() == 0 )
-    self.assert_( right.getNumChildren() == 0 )
-    self.assert_( right2.getNumChildren() == 0 )
-    self.assert_( parent.getLeftChild() == left )
-    self.assert_( parent.getRightChild() == right2 )
-    self.assert_( parent.getChild(0) == left )
-    self.assert_( parent.getChild(1) == right )
-    self.assert_( parent.getChild(2) == right2 )
-    self.assert_( parent.getChild(3) == None )
+    self.assertTrue( parent.getNumChildren() == 3 )
+    self.assertTrue( left.getNumChildren() == 0 )
+    self.assertTrue( right.getNumChildren() == 0 )
+    self.assertTrue( right2.getNumChildren() == 0 )
+    self.assertTrue( parent.getLeftChild() == left )
+    self.assertTrue( parent.getRightChild() == right2 )
+    self.assertTrue( parent.getChild(0) == left )
+    self.assertTrue( parent.getChild(1) == right )
+    self.assertTrue( parent.getChild(2) == right2 )
+    self.assertTrue( parent.getChild(3) == None )
     _dummyList = [ parent ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_create(self):
     n = libsbml.ASTNode()
     ea = libsbml.EventAssignment(2,4)
-    self.assert_( n.getType() == libsbml.AST_UNKNOWN )
-    self.assert_( n.getCharacter() == "\0" )
-    self.assert_( n.getName() == None )
-    self.assert_( n.getInteger() == 0 )
-    self.assert_( n.getExponent() == 0 )
-    self.assert_( n.getNumChildren() == 0 )
-    self.assert_( n.getParentSBMLObject() == None )
+    self.assertTrue( n.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( n.getCharacter() == "\0" )
+    self.assertTrue( n.getName() == None )
+    self.assertTrue( n.getInteger() == 0 )
+    self.assertTrue( n.getExponent() == 0 )
+    self.assertTrue( n.getNumChildren() == 0 )
+    self.assertTrue( n.getParentSBMLObject() == None )
     _dummyList = [ ea ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -524,32 +524,32 @@ def test_ASTNode_deepCopy_1(self):
     node.addChild(libsbml.ASTNode())
     node.getLeftChild().setValue(1)
     node.getRightChild().setValue(2)
-    self.assert_( node.getType() == libsbml.AST_PLUS )
-    self.assert_( node.getCharacter() == '+' )
-    self.assert_( node.getNumChildren() == 2 )
+    self.assertTrue( node.getType() == libsbml.AST_PLUS )
+    self.assertTrue( node.getCharacter() == '+' )
+    self.assertTrue( node.getNumChildren() == 2 )
     child = node.getLeftChild()
-    self.assert_( child.getType() == libsbml.AST_INTEGER )
-    self.assert_( child.getInteger() == 1 )
-    self.assert_( child.getNumChildren() == 0 )
+    self.assertTrue( child.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( child.getInteger() == 1 )
+    self.assertTrue( child.getNumChildren() == 0 )
     child = node.getRightChild()
-    self.assert_( child.getType() == libsbml.AST_INTEGER )
-    self.assert_( child.getInteger() == 2 )
-    self.assert_( child.getNumChildren() == 0 )
+    self.assertTrue( child.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( child.getInteger() == 2 )
+    self.assertTrue( child.getNumChildren() == 0 )
     copy = node.deepCopy()
-    self.assert_( copy != node )
-    self.assert_( copy.getType() == libsbml.AST_PLUS )
-    self.assert_( copy.getCharacter() == '+' )
-    self.assert_( copy.getNumChildren() == 2 )
+    self.assertTrue( copy != node )
+    self.assertTrue( copy.getType() == libsbml.AST_PLUS )
+    self.assertTrue( copy.getCharacter() == '+' )
+    self.assertTrue( copy.getNumChildren() == 2 )
     child = copy.getLeftChild()
-    self.assert_( child != node.getLeftChild() )
-    self.assert_( child.getType() == libsbml.AST_INTEGER )
-    self.assert_( child.getInteger() == 1 )
-    self.assert_( child.getNumChildren() == 0 )
+    self.assertTrue( child != node.getLeftChild() )
+    self.assertTrue( child.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( child.getInteger() == 1 )
+    self.assertTrue( child.getNumChildren() == 0 )
     child = copy.getRightChild()
-    self.assert_( child != node.getRightChild() )
-    self.assert_( child.getType() == libsbml.AST_INTEGER )
-    self.assert_( child.getInteger() == 2 )
-    self.assert_( child.getNumChildren() == 0 )
+    self.assertTrue( child != node.getRightChild() )
+    self.assertTrue( child.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( child.getInteger() == 2 )
+    self.assertTrue( child.getNumChildren() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -557,14 +557,14 @@ def test_ASTNode_deepCopy_1(self):
   def test_ASTNode_deepCopy_2(self):
     node = libsbml.ASTNode()
     node.setName( "Foo")
-    self.assert_( node.getType() == libsbml.AST_NAME )
-    self.assert_((  "Foo" == node.getName() ))
-    self.assert_( node.getNumChildren() == 0 )
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "Foo" == node.getName() ))
+    self.assertTrue( node.getNumChildren() == 0 )
     copy = node.deepCopy()
-    self.assert_( copy != node )
-    self.assert_( copy.getType() == libsbml.AST_NAME )
-    self.assert_((  "Foo" == copy.getName() ))
-    self.assert_( copy.getNumChildren() == 0 )
+    self.assertTrue( copy != node )
+    self.assertTrue( copy.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "Foo" == copy.getName() ))
+    self.assertTrue( copy.getNumChildren() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -572,14 +572,14 @@ def test_ASTNode_deepCopy_2(self):
   def test_ASTNode_deepCopy_3(self):
     node = libsbml.ASTNode(libsbml.AST_FUNCTION)
     node.setName( "Foo")
-    self.assert_( node.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "Foo" == node.getName() ))
-    self.assert_( node.getNumChildren() == 0 )
+    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "Foo" == node.getName() ))
+    self.assertTrue( node.getNumChildren() == 0 )
     copy = node.deepCopy()
-    self.assert_( copy != node )
-    self.assert_( copy.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "Foo" == copy.getName() ))
-    self.assert_( copy.getNumChildren() == 0 )
+    self.assertTrue( copy != node )
+    self.assertTrue( copy.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "Foo" == copy.getName() ))
+    self.assertTrue( copy.getNumChildren() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -587,14 +587,14 @@ def test_ASTNode_deepCopy_3(self):
   def test_ASTNode_deepCopy_4(self):
     node = libsbml.ASTNode(libsbml.AST_FUNCTION_ABS)
     node.setName( "ABS")
-    self.assert_( node.getType() == libsbml.AST_FUNCTION_ABS )
-    self.assert_((  "ABS" == node.getName() ))
-    self.assert_( node.getNumChildren() == 0 )
+    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_ABS )
+    self.assertTrue((  "ABS" == node.getName() ))
+    self.assertTrue( node.getNumChildren() == 0 )
     copy = node.deepCopy()
-    self.assert_( copy != node )
-    self.assert_( copy.getType() == libsbml.AST_FUNCTION_ABS )
-    self.assert_((  "ABS" == copy.getName() ))
-    self.assert_( copy.getNumChildren() == 0 )
+    self.assertTrue( copy != node )
+    self.assertTrue( copy.getType() == libsbml.AST_FUNCTION_ABS )
+    self.assertTrue((  "ABS" == copy.getName() ))
+    self.assertTrue( copy.getNumChildren() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -603,19 +603,19 @@ def test_ASTNode_freeName(self):
     node = libsbml.ASTNode()
     i = 0
     i = node.setName( "a")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "a" == libsbml.formulaToString(node) ))
-    self.assert_((  "a" == node.getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "a" == libsbml.formulaToString(node) ))
+    self.assertTrue((  "a" == node.getName() ))
     i = node.freeName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getName() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getName() == None )
     i = node.freeName()
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( node.getName() == None )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( node.getName() == None )
     node.setType(libsbml.AST_UNKNOWN)
     i = node.freeName()
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( node.getName() == None )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( node.getName() == None )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -626,77 +626,77 @@ def test_ASTNode_free_NULL(self):
   def test_ASTNode_getName(self):
     n = libsbml.ASTNode()
     n.setName( "foo")
-    self.assert_((  "foo" == n.getName() ))
+    self.assertTrue((  "foo" == n.getName() ))
     n.setType(libsbml.AST_NAME_TIME)
-    self.assert_((  "foo" == n.getName() ))
+    self.assertTrue((  "foo" == n.getName() ))
     n.setName(None)
-    self.assert_( n.getName() == None )
+    self.assertTrue( n.getName() == None )
     n.setType(libsbml.AST_CONSTANT_E)
-    self.assert_((  "exponentiale" == n.getName() ))
+    self.assertTrue((  "exponentiale" == n.getName() ))
     n.setType(libsbml.AST_CONSTANT_FALSE)
-    self.assert_((  "false" == n.getName() ))
+    self.assertTrue((  "false" == n.getName() ))
     n.setType(libsbml.AST_CONSTANT_PI)
-    self.assert_((  "pi" == n.getName() ))
+    self.assertTrue((  "pi" == n.getName() ))
     n.setType(libsbml.AST_CONSTANT_TRUE)
-    self.assert_((  "true" == n.getName() ))
+    self.assertTrue((  "true" == n.getName() ))
     n.setType(libsbml.AST_LAMBDA)
-    self.assert_((  "lambda" == n.getName() ))
+    self.assertTrue((  "lambda" == n.getName() ))
     n.setType(libsbml.AST_FUNCTION)
     n.setName( "f")
-    self.assert_((  "f" == n.getName() ))
+    self.assertTrue((  "f" == n.getName() ))
     n.setType(libsbml.AST_FUNCTION_DELAY)
-    self.assert_((  "f" == n.getName() ))
+    self.assertTrue((  "f" == n.getName() ))
     n.setName(None)
-    self.assert_((  "delay" == n.getName() ))
+    self.assertTrue((  "delay" == n.getName() ))
     n.setType(libsbml.AST_FUNCTION)
-    self.assert_( n.getName() == None )
+    self.assertTrue( n.getName() == None )
     n.setType(libsbml.AST_FUNCTION_ABS)
-    self.assert_((  "abs" == n.getName() ))
+    self.assertTrue((  "abs" == n.getName() ))
     n.setType(libsbml.AST_FUNCTION_ARCCOS)
-    self.assert_((  "arccos" == n.getName() ))
+    self.assertTrue((  "arccos" == n.getName() ))
     n.setType(libsbml.AST_FUNCTION_TAN)
-    self.assert_((  "tan" == n.getName() ))
+    self.assertTrue((  "tan" == n.getName() ))
     n.setType(libsbml.AST_FUNCTION_TANH)
-    self.assert_((  "tanh" == n.getName() ))
+    self.assertTrue((  "tanh" == n.getName() ))
     n.setType(libsbml.AST_LOGICAL_AND)
-    self.assert_((  "and" == n.getName() ))
+    self.assertTrue((  "and" == n.getName() ))
     n.setType(libsbml.AST_LOGICAL_NOT)
-    self.assert_((  "not" == n.getName() ))
+    self.assertTrue((  "not" == n.getName() ))
     n.setType(libsbml.AST_LOGICAL_OR)
-    self.assert_((  "or" == n.getName() ))
+    self.assertTrue((  "or" == n.getName() ))
     n.setType(libsbml.AST_LOGICAL_XOR)
-    self.assert_((  "xor" == n.getName() ))
+    self.assertTrue((  "xor" == n.getName() ))
     n.setType(libsbml.AST_RELATIONAL_EQ)
-    self.assert_((  "eq" == n.getName() ))
+    self.assertTrue((  "eq" == n.getName() ))
     n.setType(libsbml.AST_RELATIONAL_GEQ)
-    self.assert_((  "geq" == n.getName() ))
+    self.assertTrue((  "geq" == n.getName() ))
     n.setType(libsbml.AST_RELATIONAL_LT)
-    self.assert_((  "lt" == n.getName() ))
+    self.assertTrue((  "lt" == n.getName() ))
     n.setType(libsbml.AST_RELATIONAL_NEQ)
-    self.assert_((  "neq" == n.getName() ))
+    self.assertTrue((  "neq" == n.getName() ))
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_getPrecedence(self):
     n = libsbml.ASTNode()
     n.setType(libsbml.AST_PLUS)
-    self.assert_( n.getPrecedence() == 2 )
+    self.assertTrue( n.getPrecedence() == 2 )
     n.setType(libsbml.AST_MINUS)
-    self.assert_( n.getPrecedence() == 2 )
+    self.assertTrue( n.getPrecedence() == 2 )
     n.setType(libsbml.AST_TIMES)
-    self.assert_( n.getPrecedence() == 3 )
+    self.assertTrue( n.getPrecedence() == 3 )
     n.setType(libsbml.AST_DIVIDE)
-    self.assert_( n.getPrecedence() == 3 )
+    self.assertTrue( n.getPrecedence() == 3 )
     n.setType(libsbml.AST_POWER)
-    self.assert_( n.getPrecedence() == 4 )
+    self.assertTrue( n.getPrecedence() == 4 )
     n.setType(libsbml.AST_MINUS)
     n.addChild(libsbml.ASTNode(libsbml.AST_NAME))
-    self.assert_( n.isUMinus() == True )
-    self.assert_( n.getPrecedence() == 5 )
+    self.assertTrue( n.isUMinus() == True )
+    self.assertTrue( n.getPrecedence() == 5 )
     n.setType(libsbml.AST_NAME)
-    self.assert_( n.getPrecedence() == 6 )
+    self.assertTrue( n.getPrecedence() == 6 )
     n.setType(libsbml.AST_FUNCTION)
-    self.assert_( n.getPrecedence() == 6 )
+    self.assertTrue( n.getPrecedence() == 6 )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -704,14 +704,14 @@ def test_ASTNode_getReal(self):
     n = libsbml.ASTNode()
     n.setType(libsbml.AST_REAL)
     n.setValue(1.6)
-    self.assert_( n.getReal() == 1.6 )
+    self.assertTrue( n.getReal() == 1.6 )
     n.setType(libsbml.AST_REAL_E)
     n.setValue(12.3,3)
     val = abs(n.getReal() - 12300.0)
-    self.assert_( val < DBL_EPSILON )
+    self.assertTrue( val < DBL_EPSILON )
     n.setType(libsbml.AST_RATIONAL)
     n.setValue(1,2)
-    self.assert_( n.getReal() == 0.5 )
+    self.assertTrue( n.getReal() == 0.5 )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -730,74 +730,74 @@ def test_ASTNode_insertChild(self):
     node.addChild(c1)
     node.addChild(c2)
     node.addChild(c3)
-    self.assert_( node.getNumChildren() == 3 )
-    self.assert_((  "and(a, b, c)" == libsbml.formulaToString(node) ))
+    self.assertTrue( node.getNumChildren() == 3 )
+    self.assertTrue((  "and(a, b, c)" == libsbml.formulaToString(node) ))
     newc.setName( "d")
     newc1.setName( "e")
     i = node.insertChild(1,newc)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 4 )
-    self.assert_((  "and(a, d, b, c)" == libsbml.formulaToString(node) ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 4 )
+    self.assertTrue((  "and(a, d, b, c)" == libsbml.formulaToString(node) ))
     i = node.insertChild(5,newc)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( node.getNumChildren() == 4 )
-    self.assert_((  "and(a, d, b, c)" == libsbml.formulaToString(node) ))
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( node.getNumChildren() == 4 )
+    self.assertTrue((  "and(a, d, b, c)" == libsbml.formulaToString(node) ))
     i = node.insertChild(2,newc1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 5 )
-    self.assert_((  "and(a, d, e, b, c)" == libsbml.formulaToString(node) ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 5 )
+    self.assertTrue((  "and(a, d, e, b, c)" == libsbml.formulaToString(node) ))
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_isLog10(self):
     n = libsbml.ASTNode()
     n.setType(libsbml.AST_FUNCTION)
-    self.assert_( n.isLog10() == False )
+    self.assertTrue( n.isLog10() == False )
     n.setType(libsbml.AST_FUNCTION_LOG)
-    self.assert_( n.isLog10() == False )
+    self.assertTrue( n.isLog10() == False )
     c = libsbml.ASTNode()
     n.addChild(c)
     c.setValue(10)
-    self.assert_( n.isLog10() == False )
+    self.assertTrue( n.isLog10() == False )
     n.addChild(libsbml.ASTNode())
-    self.assert_( n.isLog10() == True )
+    self.assertTrue( n.isLog10() == True )
     c.setValue(2)
-    self.assert_( n.isLog10() == False )
+    self.assertTrue( n.isLog10() == False )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_isSqrt(self):
     n = libsbml.ASTNode()
     n.setType(libsbml.AST_FUNCTION)
-    self.assert_( n.isSqrt() == False )
+    self.assertTrue( n.isSqrt() == False )
     n.setType(libsbml.AST_FUNCTION_ROOT)
-    self.assert_( n.isSqrt() == False )
+    self.assertTrue( n.isSqrt() == False )
     c = libsbml.ASTNode()
     n.addChild(c)
     c.setValue(2)
-    self.assert_( n.isSqrt() == False )
+    self.assertTrue( n.isSqrt() == False )
     n.addChild(libsbml.ASTNode())
-    self.assert_( n.isSqrt() == True )
+    self.assertTrue( n.isSqrt() == True )
     c.setValue(3)
-    self.assert_( n.isSqrt() == False )
+    self.assertTrue( n.isSqrt() == False )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_isUMinus(self):
     n = libsbml.ASTNode()
     n.setType(libsbml.AST_MINUS)
-    self.assert_( n.isUMinus() == False )
+    self.assertTrue( n.isUMinus() == False )
     n.addChild(libsbml.ASTNode(libsbml.AST_NAME))
-    self.assert_( n.isUMinus() == True )
+    self.assertTrue( n.isUMinus() == True )
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_no_children(self):
     node = libsbml.ASTNode()
-    self.assert_( node.getNumChildren() == 0 )
-    self.assert_( node.getLeftChild() == None )
-    self.assert_( node.getRightChild() == None )
-    self.assert_( node.getChild(0) == None )
+    self.assertTrue( node.getNumChildren() == 0 )
+    self.assertTrue( node.getLeftChild() == None )
+    self.assertTrue( node.getRightChild() == None )
+    self.assertTrue( node.getChild(0) == None )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -805,11 +805,11 @@ def test_ASTNode_one_child(self):
     node = libsbml.ASTNode()
     child = libsbml.ASTNode()
     node.addChild(child)
-    self.assert_( node.getNumChildren() == 1 )
-    self.assert_( node.getLeftChild() == child )
-    self.assert_( node.getRightChild() == None )
-    self.assert_( node.getChild(0) == child )
-    self.assert_( node.getChild(1) == None )
+    self.assertTrue( node.getNumChildren() == 1 )
+    self.assertTrue( node.getLeftChild() == child )
+    self.assertTrue( node.getRightChild() == None )
+    self.assertTrue( node.getChild(0) == child )
+    self.assertTrue( node.getChild(1) == None )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -824,16 +824,16 @@ def test_ASTNode_prependChild1(self):
     c2.setName( "b")
     node.addChild(c1)
     node.addChild(c2)
-    self.assert_( node.getNumChildren() == 2 )
-    self.assert_((  "and(a, b)" == libsbml.formulaToString(node) ))
+    self.assertTrue( node.getNumChildren() == 2 )
+    self.assertTrue((  "and(a, b)" == libsbml.formulaToString(node) ))
     c1_1.setName( "d")
     i = node.prependChild(c1_1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 3 )
-    self.assert_((  "and(d, a, b)" == libsbml.formulaToString(node) ))
-    self.assert_((  "d" == node.getChild(0).getName() ))
-    self.assert_((  "a" == node.getChild(1).getName() ))
-    self.assert_((  "b" == node.getChild(2).getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 3 )
+    self.assertTrue((  "and(d, a, b)" == libsbml.formulaToString(node) ))
+    self.assertTrue((  "d" == node.getChild(0).getName() ))
+    self.assertTrue((  "a" == node.getChild(1).getName() ))
+    self.assertTrue((  "b" == node.getChild(2).getName() ))
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -847,16 +847,16 @@ def test_ASTNode_removeChild(self):
     c2.setName( "foo2")
     node.addChild(c1)
     node.addChild(c2)
-    self.assert_( node.getNumChildren() == 2 )
+    self.assertTrue( node.getNumChildren() == 2 )
     i = node.removeChild(0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 1 )
     i = node.removeChild(1)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( node.getNumChildren() == 1 )
     i = node.removeChild(0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -874,230 +874,230 @@ def test_ASTNode_replaceChild(self):
     node.addChild(c1)
     node.addChild(c2)
     node.addChild(c3)
-    self.assert_( node.getNumChildren() == 3 )
-    self.assert_((  "and(a, b, c)" == libsbml.formulaToString(node) ))
+    self.assertTrue( node.getNumChildren() == 3 )
+    self.assertTrue((  "and(a, b, c)" == libsbml.formulaToString(node) ))
     newc.setName( "d")
     i = node.replaceChild(0,newc)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 3 )
-    self.assert_((  "and(d, b, c)" == libsbml.formulaToString(node) ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 3 )
+    self.assertTrue((  "and(d, b, c)" == libsbml.formulaToString(node) ))
     i = node.replaceChild(3,newc)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( node.getNumChildren() == 3 )
-    self.assert_((  "and(d, b, c)" == libsbml.formulaToString(node) ))
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( node.getNumChildren() == 3 )
+    self.assertTrue((  "and(d, b, c)" == libsbml.formulaToString(node) ))
     i = node.replaceChild(1,c1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 3 )
-    self.assert_((  "and(d, a, c)" == libsbml.formulaToString(node) ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 3 )
+    self.assertTrue((  "and(d, a, c)" == libsbml.formulaToString(node) ))
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_setCharacter(self):
     node = libsbml.ASTNode()
     node.setName( "foo")
-    self.assert_( node.getType() == libsbml.AST_NAME )
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_((  "foo" == node.getName() ))
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue((  "foo" == node.getName() ))
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setCharacter( '+')
-    self.assert_( node.getType() == libsbml.AST_PLUS )
-    self.assert_( node.getCharacter() == '+' )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_PLUS )
+    self.assertTrue( node.getCharacter() == '+' )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setCharacter( '-')
-    self.assert_( node.getType() == libsbml.AST_MINUS )
-    self.assert_( node.getCharacter() == '-' )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_MINUS )
+    self.assertTrue( node.getCharacter() == '-' )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setCharacter( '*')
-    self.assert_( node.getType() == libsbml.AST_TIMES )
-    self.assert_( node.getCharacter() == '*' )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_TIMES )
+    self.assertTrue( node.getCharacter() == '*' )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setCharacter( '/')
-    self.assert_( node.getType() == libsbml.AST_DIVIDE )
-    self.assert_( node.getCharacter() == '/' )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( node.getCharacter() == '/' )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setCharacter( '^')
-    self.assert_( node.getType() == libsbml.AST_POWER )
-    self.assert_( node.getCharacter() == '^' )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_POWER )
+    self.assertTrue( node.getCharacter() == '^' )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setCharacter( '$')
-    self.assert_( node.getType() == libsbml.AST_UNKNOWN )
-    self.assert_( node.getCharacter() == '$' )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( node.getCharacter() == '$' )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_setInteger(self):
     node = libsbml.ASTNode()
     node.setName( "foo")
-    self.assert_( node.getType() == libsbml.AST_NAME )
-    self.assert_((  "foo" == node.getName() ))
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "foo" == node.getName() ))
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setValue(3.2)
-    self.assert_( node.getType() == libsbml.AST_REAL )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_( node.getReal() == 3.2 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_REAL )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue( node.getReal() == 3.2 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setValue(321)
-    self.assert_( node.getType() == libsbml.AST_INTEGER )
-    self.assert_( node.getInteger() == 321 )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( node.getInteger() == 321 )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_setName(self):
     name =  "foo";
     node = libsbml.ASTNode()
-    self.assert_( node.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( node.getType() == libsbml.AST_UNKNOWN )
     node.setName(name)
-    self.assert_( node.getType() == libsbml.AST_NAME )
-    self.assert_(( name == node.getName() ))
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
+    self.assertTrue(( name == node.getName() ))
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     if (node.getName() == name):
       pass    
     node.setName(None)
-    self.assert_( node.getType() == libsbml.AST_NAME )
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
     if (node.getName() != None):
       pass    
     node.setType(libsbml.AST_FUNCTION_COS)
-    self.assert_( node.getType() == libsbml.AST_FUNCTION_COS )
-    self.assert_((  "cos" == node.getName() ))
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_COS )
+    self.assertTrue((  "cos" == node.getName() ))
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     node.setType(libsbml.AST_PLUS)
     node.setName(name)
-    self.assert_( node.getType() == libsbml.AST_NAME )
-    self.assert_(( name == node.getName() ))
-    self.assert_( node.getCharacter() == '+' )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getReal() == 0 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
+    self.assertTrue(( name == node.getName() ))
+    self.assertTrue( node.getCharacter() == '+' )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getReal() == 0 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_setName_override(self):
     node = libsbml.ASTNode(libsbml.AST_FUNCTION_SIN)
-    self.assert_((  "sin" == node.getName() ))
-    self.assert_( node.getType() == libsbml.AST_FUNCTION_SIN )
+    self.assertTrue((  "sin" == node.getName() ))
+    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN )
     node.setName( "MySinFunc")
-    self.assert_((  "MySinFunc" == node.getName() ))
-    self.assert_( node.getType() == libsbml.AST_FUNCTION_SIN )
+    self.assertTrue((  "MySinFunc" == node.getName() ))
+    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN )
     node.setName(None)
-    self.assert_((  "sin" == node.getName() ))
-    self.assert_( node.getType() == libsbml.AST_FUNCTION_SIN )
+    self.assertTrue((  "sin" == node.getName() ))
+    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_setReal(self):
     node = libsbml.ASTNode()
     node.setName( "foo")
-    self.assert_( node.getType() == libsbml.AST_NAME )
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
     node.setValue(32.1)
-    self.assert_( node.getType() == libsbml.AST_REAL )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_( node.getReal() == 32.1 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 1 )
-    self.assert_( node.getMantissa() == 32.1 )
+    self.assertTrue( node.getType() == libsbml.AST_REAL )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue( node.getReal() == 32.1 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 1 )
+    self.assertTrue( node.getMantissa() == 32.1 )
     node.setValue(45,90)
-    self.assert_( node.getType() == libsbml.AST_RATIONAL )
-    self.assert_( node.getInteger() == 45 )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_( node.getReal() == 0.5 )
-    self.assert_( node.getExponent() == 0 )
-    self.assert_( node.getDenominator() == 90 )
-    self.assert_( node.getMantissa() == 0 )
+    self.assertTrue( node.getType() == libsbml.AST_RATIONAL )
+    self.assertTrue( node.getInteger() == 45 )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue( node.getReal() == 0.5 )
+    self.assertTrue( node.getExponent() == 0 )
+    self.assertTrue( node.getDenominator() == 90 )
+    self.assertTrue( node.getMantissa() == 0 )
     node.setValue(32.0,4)
-    self.assert_( node.getType() == libsbml.AST_REAL_E )
-    self.assert_( node.getInteger() == 0 )
-    self.assert_( node.getName() == None )
-    self.assert_( node.getCharacter() == "\0" )
-    self.assert_( node.getReal() == 320000 )
-    self.assert_( node.getExponent() == 4 )
-    self.assert_( node.getDenominator() == 1 )
-    self.assert_( node.getMantissa() == 32 )
+    self.assertTrue( node.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( node.getInteger() == 0 )
+    self.assertTrue( node.getName() == None )
+    self.assertTrue( node.getCharacter() == "\0" )
+    self.assertTrue( node.getReal() == 320000 )
+    self.assertTrue( node.getExponent() == 4 )
+    self.assertTrue( node.getDenominator() == 1 )
+    self.assertTrue( node.getMantissa() == 32 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ASTNode_setType(self):
     node = libsbml.ASTNode()
     node.setName( "foo")
-    self.assert_( node.getType() == libsbml.AST_NAME )
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
     node.setType(libsbml.AST_FUNCTION)
-    self.assert_( node.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "foo" == node.getName() ))
+    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "foo" == node.getName() ))
     node.setType(libsbml.AST_NAME)
-    self.assert_( node.getType() == libsbml.AST_NAME )
-    self.assert_((  "foo" == node.getName() ))
+    self.assertTrue( node.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "foo" == node.getName() ))
     node.setType(libsbml.AST_INTEGER)
-    self.assert_( node.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
     node.setType(libsbml.AST_REAL)
-    self.assert_( node.getType() == libsbml.AST_REAL )
+    self.assertTrue( node.getType() == libsbml.AST_REAL )
     node.setType(libsbml.AST_UNKNOWN)
-    self.assert_( node.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( node.getType() == libsbml.AST_UNKNOWN )
     node.setType(libsbml.AST_PLUS)
-    self.assert_( node.getType() == libsbml.AST_PLUS )
-    self.assert_( node.getCharacter() == '+' )
+    self.assertTrue( node.getType() == libsbml.AST_PLUS )
+    self.assertTrue( node.getCharacter() == '+' )
     node.setType(libsbml.AST_MINUS)
-    self.assert_( node.getType() == libsbml.AST_MINUS )
-    self.assert_( node.getCharacter() == '-' )
+    self.assertTrue( node.getType() == libsbml.AST_MINUS )
+    self.assertTrue( node.getCharacter() == '-' )
     node.setType(libsbml.AST_TIMES)
-    self.assert_( node.getType() == libsbml.AST_TIMES )
-    self.assert_( node.getCharacter() == '*' )
+    self.assertTrue( node.getType() == libsbml.AST_TIMES )
+    self.assertTrue( node.getCharacter() == '*' )
     node.setType(libsbml.AST_DIVIDE)
-    self.assert_( node.getType() == libsbml.AST_DIVIDE )
-    self.assert_( node.getCharacter() == '/' )
+    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( node.getCharacter() == '/' )
     node.setType(libsbml.AST_POWER)
-    self.assert_( node.getType() == libsbml.AST_POWER )
-    self.assert_( node.getCharacter() == '^' )
+    self.assertTrue( node.getType() == libsbml.AST_POWER )
+    self.assertTrue( node.getCharacter() == '^' )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -1114,21 +1114,21 @@ def test_ASTNode_swapChildren(self):
     c2.setName( "b")
     node.addChild(c1)
     node.addChild(c2)
-    self.assert_( node.getNumChildren() == 2 )
-    self.assert_((  "and(a, b)" == libsbml.formulaToString(node) ))
+    self.assertTrue( node.getNumChildren() == 2 )
+    self.assertTrue((  "and(a, b)" == libsbml.formulaToString(node) ))
     node_1.setType(libsbml.AST_LOGICAL_AND)
     c1_1.setName( "d")
     c2_1.setName( "f")
     node_1.addChild(c1_1)
     node_1.addChild(c2_1)
-    self.assert_( node_1.getNumChildren() == 2 )
-    self.assert_((  "and(d, f)" == libsbml.formulaToString(node_1) ))
+    self.assertTrue( node_1.getNumChildren() == 2 )
+    self.assertTrue((  "and(d, f)" == libsbml.formulaToString(node_1) ))
     i = node.swapChildren(node_1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 2 )
-    self.assert_((  "and(d, f)" == libsbml.formulaToString(node) ))
-    self.assert_( node_1.getNumChildren() == 2 )
-    self.assert_((  "and(a, b)" == libsbml.formulaToString(node_1) ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 2 )
+    self.assertTrue((  "and(d, f)" == libsbml.formulaToString(node) ))
+    self.assertTrue( node_1.getNumChildren() == 2 )
+    self.assertTrue((  "and(a, b)" == libsbml.formulaToString(node_1) ))
     _dummyList = [ node_1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -1138,21 +1138,21 @@ def test_ASTNode_units(self):
     n.setType(libsbml.AST_REAL)
     n.setValue(1.6)
     i = n.setUnits( "mole")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( n.isSetUnits() == True )
-    self.assert_((  "mole" == n.getUnits() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( n.isSetUnits() == True )
+    self.assertTrue((  "mole" == n.getUnits() ))
     i = n.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( n.isSetUnits() == False )
-    self.assert_((  "" == n.getUnits() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( n.isSetUnits() == False )
+    self.assertTrue((  "" == n.getUnits() ))
     i = n.setUnits( "1mole")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( n.isSetUnits() == False )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( n.isSetUnits() == False )
     n.setType(libsbml.AST_FUNCTION)
     i = n.setUnits( "mole")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( n.isSetUnits() == False )
-    self.assert_((  "" == n.getUnits() ))
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( n.isSetUnits() == False )
+    self.assertTrue((  "" == n.getUnits() ))
     _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/math/TestL3FormulaParserC.py b/src/bindings/python/test/math/TestL3FormulaParserC.py
index 4d1e708161..90ae38f44a 100644
--- a/src/bindings/python/test/math/TestL3FormulaParserC.py
+++ b/src/bindings/python/test/math/TestL3FormulaParserC.py
@@ -64,542 +64,542 @@ class TestL3FormulaParserC(unittest.TestCase):
 
   def test_SBML_C_parseL3Formula_1(self):
     r = libsbml.parseL3Formula("1")
-    self.assert_( r.getType() == libsbml.AST_INTEGER )
-    self.assert_( r.getInteger() == 1 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( r.getInteger() == 1 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_10(self):
     r = libsbml.parseL3Formula("1 + -2e100 / 3")
-    self.assert_( r.getType() == libsbml.AST_PLUS )
-    self.assert_( r.getCharacter() == '+' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_PLUS )
+    self.assertTrue( r.getCharacter() == '+' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_DIVIDE )
-    self.assert_( c.getCharacter() == '/' )
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( c.getCharacter() == '/' )
+    self.assertTrue( c.getNumChildren() == 2 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getCharacter() == '-' )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getCharacter() == '-' )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL_E )
-    self.assert_( c.getMantissa() == 2 )
-    self.assert_( c.getExponent() == 100 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( c.getMantissa() == 2 )
+    self.assertTrue( c.getExponent() == 100 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_11(self):
     r = libsbml.parseL3Formula("1 - -foo / 3")
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getCharacter() == '-' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getCharacter() == '-' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_DIVIDE )
-    self.assert_( c.getCharacter() == '/' )
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( c.getCharacter() == '/' )
+    self.assertTrue( c.getNumChildren() == 2 )
     c = r.getRightChild().getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getCharacter() == '-' )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getCharacter() == '-' )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = r.getRightChild().getLeftChild().getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "foo" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "foo" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_12(self):
     r = libsbml.parseL3Formula("2 * foo^bar + 3.0")
-    self.assert_( r.getType() == libsbml.AST_PLUS )
-    self.assert_( r.getCharacter() == '+' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_PLUS )
+    self.assertTrue( r.getCharacter() == '+' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_TIMES )
-    self.assert_( c.getCharacter() == '*' )
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_TIMES )
+    self.assertTrue( c.getCharacter() == '*' )
+    self.assertTrue( c.getNumChildren() == 2 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 3.0 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 3.0 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getLeftChild().getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getLeftChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_POWER )
-    self.assert_( c.getCharacter() == '^' )
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_POWER )
+    self.assertTrue( c.getCharacter() == '^' )
+    self.assertTrue( c.getNumChildren() == 2 )
     c = r.getLeftChild().getRightChild().getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "foo" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "foo" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getLeftChild().getRightChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "bar" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "bar" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_13(self):
     r = libsbml.parseL3Formula("foo()")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "foo" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "foo" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_14(self):
     r = libsbml.parseL3Formula("foo(1)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "foo" == r.getName() ))
-    self.assert_( r.getNumChildren() == 1 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "foo" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 1 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_15(self):
     r = libsbml.parseL3Formula("foo(1, bar)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "foo" == r.getName() ))
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "foo" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "bar" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "bar" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_16(self):
     r = libsbml.parseL3Formula("foo(1, bar, 2^-3)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "foo" == r.getName() ))
-    self.assert_( r.getNumChildren() == 3 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "foo" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 3 )
     c = r.getChild(0)
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getChild(1)
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "bar" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "bar" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getChild(2)
-    self.assert_( c.getType() == libsbml.AST_POWER )
-    self.assert_( c.getCharacter() == '^' )
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_POWER )
+    self.assertTrue( c.getCharacter() == '^' )
+    self.assertTrue( c.getNumChildren() == 2 )
     c = r.getChild(2).getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getChild(2).getRightChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getCharacter() == '-' )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getCharacter() == '-' )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_17(self):
     r = libsbml.parseL3Formula("1//1")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input '1//1' at position 3:  syntax error, unexpected '/'" == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input '1//1' at position 3:  syntax error, unexpected '/'" == libsbml.getLastParseL3Error() ))
     pass  
 
   def test_SBML_C_parseL3Formula_18(self):
     r = libsbml.parseL3Formula("1+2*3 4")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input '1+2*3 4' at position 7:  syntax error, unexpected integer" == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input '1+2*3 4' at position 7:  syntax error, unexpected integer" == libsbml.getLastParseL3Error() ))
     pass  
 
   def test_SBML_C_parseL3Formula_2(self):
     r = libsbml.parseL3Formula("2.1")
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( r.getReal() == 2.1 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( r.getReal() == 2.1 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_3(self):
     r = libsbml.parseL3Formula("2.1e5")
-    self.assert_( r.getType() == libsbml.AST_REAL_E )
-    self.assert_( r.getMantissa() == 2.1 )
-    self.assert_( r.getExponent() == 5 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( r.getMantissa() == 2.1 )
+    self.assertTrue( r.getExponent() == 5 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_4(self):
     r = libsbml.parseL3Formula("foo")
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "foo" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "foo" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_5(self):
     r = libsbml.parseL3Formula("1 + foo")
-    self.assert_( r.getType() == libsbml.AST_PLUS )
-    self.assert_( r.getCharacter() == '+' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_PLUS )
+    self.assertTrue( r.getCharacter() == '+' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "foo" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "foo" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_6(self):
     r = libsbml.parseL3Formula("1 + 2")
-    self.assert_( r.getType() == libsbml.AST_PLUS )
-    self.assert_( r.getCharacter() == '+' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_PLUS )
+    self.assertTrue( r.getCharacter() == '+' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_7(self):
     r = libsbml.parseL3Formula("1 + 2 * 3")
-    self.assert_( r.getType() == libsbml.AST_PLUS )
-    self.assert_( r.getCharacter() == '+' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_PLUS )
+    self.assertTrue( r.getCharacter() == '+' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_TIMES )
-    self.assert_( c.getCharacter() == '*' )
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_TIMES )
+    self.assertTrue( c.getCharacter() == '*' )
+    self.assertTrue( c.getNumChildren() == 2 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_8(self):
     r = libsbml.parseL3Formula("(1 - 2) * 3")
-    self.assert_( r.getType() == libsbml.AST_TIMES )
-    self.assert_( r.getCharacter() == '*' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_TIMES )
+    self.assertTrue( r.getCharacter() == '*' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getCharacter() == '-' )
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getCharacter() == '-' )
+    self.assertTrue( c.getNumChildren() == 2 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getLeftChild().getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getLeftChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_9(self):
     r = libsbml.parseL3Formula("1 + -2 / 3")
-    self.assert_( r.getType() == libsbml.AST_PLUS )
-    self.assert_( r.getCharacter() == '+' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_PLUS )
+    self.assertTrue( r.getCharacter() == '+' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_DIVIDE )
-    self.assert_( c.getCharacter() == '/' )
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( c.getCharacter() == '/' )
+    self.assertTrue( c.getNumChildren() == 2 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getCharacter() == '-' )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getCharacter() == '-' )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_arguments(self):
     r = libsbml.parseL3Formula("sin(x,y)")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input 'sin(x,y)' at position 8:  The function 'sin' takes exactly one argument, but 2 were found." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input 'sin(x,y)' at position 8:  The function 'sin' takes exactly one argument, but 2 were found." == libsbml.getLastParseL3Error() ))
     r = libsbml.parseL3Formula("delay(x)")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input 'delay(x)' at position 8:  The function 'delay' takes exactly two arguments, but 1 were found." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input 'delay(x)' at position 8:  The function 'delay' takes exactly two arguments, but 1 were found." == libsbml.getLastParseL3Error() ))
     r = libsbml.parseL3Formula("piecewise()")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input 'piecewise()' at position 11:  The function 'piecewise' takes at least one argument, but none were found." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input 'piecewise()' at position 11:  The function 'piecewise' takes at least one argument, but none were found." == libsbml.getLastParseL3Error() ))
     r = libsbml.parseL3Formula("gt(x)")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input 'gt(x)' at position 5:  The function 'gt' takes at least two arguments, but 1 were found." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input 'gt(x)' at position 5:  The function 'gt' takes at least two arguments, but 1 were found." == libsbml.getLastParseL3Error() ))
     r = libsbml.parseL3Formula("minus()")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input 'minus()' at position 7:  The function 'minus' takes exactly one or two arguments, but 0 were found." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input 'minus()' at position 7:  The function 'minus' takes exactly one or two arguments, but 0 were found." == libsbml.getLastParseL3Error() ))
     r = libsbml.parseL3Formula("root(x, y, z)")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input 'root(x, y, z)' at position 13:  The function 'root' takes exactly one or two arguments, but 3 were found." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input 'root(x, y, z)' at position 13:  The function 'root' takes exactly one or two arguments, but 3 were found." == libsbml.getLastParseL3Error() ))
     r = libsbml.parseL3Formula("power()")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input 'power()' at position 7:  The function 'power' takes exactly two arguments, but 0 were found." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input 'power()' at position 7:  The function 'power' takes exactly two arguments, but 0 were found." == libsbml.getLastParseL3Error() ))
     pass  
 
   def test_SBML_C_parseL3Formula_avogadrosettings(self):
     r = libsbml.parseL3Formula("avogadro")
-    self.assert_( r.getType() == libsbml.AST_NAME_AVOGADRO )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings = libsbml.getDefaultL3ParserSettings()
     settings.setParseAvogadroCsymbol(False)
-    self.assert_( settings.getParseAvogadroCsymbol() == False )
+    self.assertTrue( settings.getParseAvogadroCsymbol() == False )
     r = libsbml.parseL3FormulaWithSettings("avogadro", settings)
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "avogadro" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "avogadro" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings.setParseAvogadroCsymbol(True)
-    self.assert_( settings.getParseAvogadroCsymbol() == True )
+    self.assertTrue( settings.getParseAvogadroCsymbol() == True )
     r = libsbml.parseL3FormulaWithSettings("avogadro", settings)
-    self.assert_( r.getType() == libsbml.AST_NAME_AVOGADRO )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_collapseminussettings1(self):
     r = libsbml.parseL3Formula("--4.4")
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 1 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 1 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings = libsbml.getDefaultL3ParserSettings()
     settings.setParseCollapseMinus(True)
-    self.assert_( settings.getParseCollapseMinus() == True )
+    self.assertTrue( settings.getParseCollapseMinus() == True )
     r = libsbml.parseL3FormulaWithSettings("--4.4", settings)
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( r.getReal() == 4.4 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( r.getReal() == 4.4 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings.setParseCollapseMinus(False)
-    self.assert_( settings.getParseCollapseMinus() == False )
+    self.assertTrue( settings.getParseCollapseMinus() == False )
     r = libsbml.parseL3FormulaWithSettings("--4.4", settings)
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 1 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 1 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_collapseminussettings2(self):
     r = libsbml.parseL3Formula("--x")
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 1 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 1 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings = libsbml.getDefaultL3ParserSettings()
     settings.setParseCollapseMinus(True)
-    self.assert_( settings.getParseCollapseMinus() == True )
+    self.assertTrue( settings.getParseCollapseMinus() == True )
     r = libsbml.parseL3FormulaWithSettings("--x", settings)
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings.setParseCollapseMinus(False)
-    self.assert_( settings.getParseCollapseMinus() == False )
+    self.assertTrue( settings.getParseCollapseMinus() == False )
     r = libsbml.parseL3FormulaWithSettings("--x", settings)
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 1 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 1 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_collapseminussettings3(self):
     r = libsbml.parseL3Formula("x---4.4")
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings = libsbml.getDefaultL3ParserSettings()
     settings.setParseCollapseMinus(True)
-    self.assert_( settings.getParseCollapseMinus() == True )
+    self.assertTrue( settings.getParseCollapseMinus() == True )
     r = libsbml.parseL3FormulaWithSettings("x---4.4", settings)
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings.setParseCollapseMinus(False)
-    self.assert_( settings.getParseCollapseMinus() == False )
+    self.assertTrue( settings.getParseCollapseMinus() == False )
     r = libsbml.parseL3FormulaWithSettings("x---4.4", settings)
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_collapseminussettings4(self):
     r = libsbml.parseL3Formula("x---y")
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "y" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "y" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings = libsbml.getDefaultL3ParserSettings()
     settings.setParseCollapseMinus(True)
-    self.assert_( settings.getParseCollapseMinus() == True )
+    self.assertTrue( settings.getParseCollapseMinus() == True )
     r = libsbml.parseL3FormulaWithSettings("x---y", settings)
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "y" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "y" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings.setParseCollapseMinus(False)
-    self.assert_( settings.getParseCollapseMinus() == False )
+    self.assertTrue( settings.getParseCollapseMinus() == False )
     r = libsbml.parseL3FormulaWithSettings("x---y", settings)
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_MINUS )
-    self.assert_( c.getNumChildren() == 1 )
+    self.assertTrue( c.getType() == libsbml.AST_MINUS )
+    self.assertTrue( c.getNumChildren() == 1 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "y" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "y" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -607,221 +607,221 @@ def test_SBML_C_parseL3Formula_collapseminussettings4(self):
   def test_SBML_C_parseL3Formula_collapseminussettings5(self):
     settings = libsbml.getDefaultL3ParserSettings()
     settings.setParseCollapseMinus(True)
-    self.assert_( settings.getParseCollapseMinus() == True )
+    self.assertTrue( settings.getParseCollapseMinus() == True )
     r = libsbml.parseL3FormulaWithSettings("---4", settings)
-    self.assert_( r.getType() == libsbml.AST_INTEGER )
-    self.assert_( r.getInteger() == -4 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( r.getInteger() == -4 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = libsbml.parseL3FormulaWithSettings("---(3/8)", settings)
-    self.assert_( r.getType() == libsbml.AST_RATIONAL )
-    self.assert_( r.getNumerator() == -3 )
-    self.assert_( r.getDenominator() == 8 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_RATIONAL )
+    self.assertTrue( r.getNumerator() == -3 )
+    self.assertTrue( r.getDenominator() == 8 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = libsbml.parseL3FormulaWithSettings("---(-3/8)", settings)
-    self.assert_( r.getType() == libsbml.AST_RATIONAL )
-    self.assert_( r.getNumerator() == 3 )
-    self.assert_( r.getDenominator() == 8 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_RATIONAL )
+    self.assertTrue( r.getNumerator() == 3 )
+    self.assertTrue( r.getDenominator() == 8 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = libsbml.parseL3FormulaWithSettings("---4.4", settings)
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( r.getReal() == -4.4 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( r.getReal() == -4.4 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = libsbml.parseL3FormulaWithSettings("---4e-3", settings)
-    self.assert_( r.getType() == libsbml.AST_REAL_E )
-    self.assert_( r.getMantissa() == -4 )
-    self.assert_( r.getExponent() == -3 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( r.getMantissa() == -4 )
+    self.assertTrue( r.getExponent() == -3 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = libsbml.parseL3FormulaWithSettings("---.4", settings)
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( r.getReal() == -.4 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( r.getReal() == -.4 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants1(self):
     r = libsbml.parseL3Formula("true")
-    self.assert_( r.getType() == libsbml.AST_CONSTANT_TRUE )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_CONSTANT_TRUE )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants10(self):
     r = libsbml.parseL3Formula("notanumber")
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( isnan(r.getReal()) == 1 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( isnan(r.getReal()) == 1 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants11(self):
     r = libsbml.parseL3Formula("nan")
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( isnan(r.getReal()) == 1 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( isnan(r.getReal()) == 1 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants12(self):
     r = libsbml.parseL3Formula("NaN")
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( isnan(r.getReal()) == 1 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( isnan(r.getReal()) == 1 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants2(self):
     r = libsbml.parseL3Formula("false")
-    self.assert_( r.getType() == libsbml.AST_CONSTANT_FALSE )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_CONSTANT_FALSE )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants3(self):
     r = libsbml.parseL3Formula("pi")
-    self.assert_( r.getType() == libsbml.AST_CONSTANT_PI )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_CONSTANT_PI )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants4(self):
     r = libsbml.parseL3Formula("exponentiale")
-    self.assert_( r.getType() == libsbml.AST_CONSTANT_E )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_CONSTANT_E )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants5(self):
     r = libsbml.parseL3Formula("avogadro")
-    self.assert_( r.getType() == libsbml.AST_NAME_AVOGADRO )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants6(self):
     r = libsbml.parseL3Formula("time")
-    self.assert_( r.getType() == libsbml.AST_NAME_TIME )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME_TIME )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants7(self):
     r = libsbml.parseL3Formula("inf")
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( util_isInf(r.getReal()) == True )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( util_isInf(r.getReal()) == True )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants8(self):
     r = libsbml.parseL3Formula("infinity")
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( util_isInf(r.getReal()) == True )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( util_isInf(r.getReal()) == True )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_constants9(self):
     r = libsbml.parseL3Formula("INF")
-    self.assert_( r.getType() == libsbml.AST_REAL )
-    self.assert_( util_isInf(r.getReal()) == True )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL )
+    self.assertTrue( util_isInf(r.getReal()) == True )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_e1(self):
     r = libsbml.parseL3Formula("2.001e+5")
-    self.assert_( r.getType() == libsbml.AST_REAL_E )
-    self.assert_( r.getMantissa() == 2.001 )
-    self.assert_( r.getExponent() == 5 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( r.getMantissa() == 2.001 )
+    self.assertTrue( r.getExponent() == 5 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_e2(self):
     r = libsbml.parseL3Formula(".001e+5")
-    self.assert_( r.getType() == libsbml.AST_REAL_E )
-    self.assert_( r.getMantissa() == .001 )
-    self.assert_( r.getExponent() == 5 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( r.getMantissa() == .001 )
+    self.assertTrue( r.getExponent() == 5 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_e3(self):
     r = libsbml.parseL3Formula(".001e-5")
-    self.assert_( r.getType() == libsbml.AST_REAL_E )
-    self.assert_( r.getMantissa() == .001 )
-    self.assert_( r.getExponent() == -5 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( r.getMantissa() == .001 )
+    self.assertTrue( r.getExponent() == -5 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_e4(self):
     r = libsbml.parseL3Formula("2.e-005")
-    self.assert_( r.getType() == libsbml.AST_REAL_E )
-    self.assert_( r.getMantissa() == 2 )
-    self.assert_( r.getExponent() == -5 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( r.getMantissa() == 2 )
+    self.assertTrue( r.getExponent() == -5 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_e5(self):
     r = libsbml.parseL3Formula(".e+5")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input '.e+5' at position 1:  syntax error, unexpected $undefined" == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input '.e+5' at position 1:  syntax error, unexpected $undefined" == libsbml.getLastParseL3Error() ))
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_logic1(self):
     r = libsbml.parseL3Formula("1 && 2 == 3")
-    self.assert_( r.getType() == libsbml.AST_LOGICAL_AND )
-    self.assert_((  "and" == r.getName() ))
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_LOGICAL_AND )
+    self.assertTrue((  "and" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_RELATIONAL_EQ )
-    self.assert_((  "eq" == c.getName() ))
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_RELATIONAL_EQ )
+    self.assertTrue((  "eq" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 2 )
     c = c.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_logic2(self):
     r = libsbml.parseL3Formula("(1 && 2) == 3")
-    self.assert_( r.getType() == libsbml.AST_RELATIONAL_EQ )
-    self.assert_((  "eq" == r.getName() ))
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_RELATIONAL_EQ )
+    self.assertTrue((  "eq" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_LOGICAL_AND )
-    self.assert_((  "and" == c.getName() ))
-    self.assert_( c.getNumChildren() == 2 )
+    self.assertTrue( c.getType() == libsbml.AST_LOGICAL_AND )
+    self.assertTrue((  "and" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 2 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getLeftChild().getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getLeftChild().getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -830,9 +830,9 @@ def test_SBML_C_parseL3Formula_modelPresent1(self):
     p = model.createParameter()
     p.setId( "infinity")
     r = libsbml.parseL3FormulaWithModel("infinity", model)
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "infinity" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "infinity" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -841,9 +841,9 @@ def test_SBML_C_parseL3Formula_modelPresent2(self):
     p = model.createSpecies()
     p.setId( "true")
     r = libsbml.parseL3FormulaWithModel("true", model)
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "true" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "true" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -852,9 +852,9 @@ def test_SBML_C_parseL3Formula_modelPresent3(self):
     p = model.createCompartment()
     p.setId( "NaN")
     r = libsbml.parseL3FormulaWithModel("NaN", model)
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "NaN" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "NaN" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -863,9 +863,9 @@ def test_SBML_C_parseL3Formula_modelPresent4(self):
     p = model.createReaction()
     p.setId( "pi")
     r = libsbml.parseL3FormulaWithModel("pi", model)
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "pi" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "pi" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -875,9 +875,9 @@ def test_SBML_C_parseL3Formula_modelPresent5(self):
     sr = p.createProduct()
     sr.setId( "avogadro")
     r = libsbml.parseL3FormulaWithModel("avogadro", model)
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "avogadro" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "avogadro" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -887,9 +887,9 @@ def test_SBML_C_parseL3Formula_modelPresent6(self):
     sr = p.createProduct()
     sr.setId( "AVOGADRO")
     r = libsbml.parseL3FormulaWithModel("avogadro", model)
-    self.assert_( r.getType() == libsbml.AST_NAME_AVOGADRO )
-    self.assert_((  "avogadro" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO )
+    self.assertTrue((  "avogadro" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -898,370 +898,370 @@ def test_SBML_C_parseL3Formula_modelPresent7(self):
     p = model.createFunctionDefinition()
     p.setId( "sin")
     r = libsbml.parseL3FormulaWithModel("sin(x, y)", model)
-    self.assert_( r.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "sin" == r.getName() ))
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "sin" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 2 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_modulo(self):
     r = libsbml.parseL3Formula("x % y")
-    self.assert_((  "piecewise(x - y * ceil(x / y), xor(lt(x, 0), lt(y, 0)), x - y * floor(x / y))" == libsbml.formulaToString(r) ))
+    self.assertTrue((  "piecewise(x - y * ceil(x / y), xor(lt(x, 0), lt(y, 0)), x - y * floor(x / y))" == libsbml.formulaToString(r) ))
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_negInf(self):
     r = libsbml.parseL3Formula("-inf")
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getCharacter() == '-' )
-    self.assert_( r.getNumChildren() == 1 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getCharacter() == '-' )
+    self.assertTrue( r.getNumChildren() == 1 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( util_isInf(c.getReal()) == True )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( util_isInf(c.getReal()) == True )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_negZero(self):
     r = libsbml.parseL3Formula("-0.0")
-    self.assert_( r.getType() == libsbml.AST_MINUS )
-    self.assert_( r.getCharacter() == '-' )
-    self.assert_( r.getNumChildren() == 1 )
+    self.assertTrue( r.getType() == libsbml.AST_MINUS )
+    self.assertTrue( r.getCharacter() == '-' )
+    self.assertTrue( r.getNumChildren() == 1 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 0 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 0 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_oddMathML1(self):
     r = libsbml.parseL3Formula("sqrt(3)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION_ROOT )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION_ROOT )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_oddMathML2(self):
     r = libsbml.parseL3Formula("sqr(3)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION_POWER )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION_POWER )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 2 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 2 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_oddMathML3(self):
     r = libsbml.parseL3Formula("log10(3)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION_LOG )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION_LOG )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 10 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 10 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_oddMathML4(self):
     r = libsbml.parseL3Formula("log(4.4, 3)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION_LOG )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION_LOG )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_oddMathML5(self):
     r = libsbml.parseL3Formula("root(1.1, 3)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION_ROOT )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION_ROOT )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 1.1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 1.1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_parselogsettings(self):
     r = libsbml.parseL3Formula("log(4.4)")
-    self.assert_( r.getType() == libsbml.AST_FUNCTION_LOG )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION_LOG )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 10 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 10 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings = libsbml.L3ParserSettings()
     settings.setParseLog(libsbml.L3P_PARSE_LOG_AS_LN)
-    self.assert_( settings.getParseLog() == libsbml.L3P_PARSE_LOG_AS_LN )
+    self.assertTrue( settings.getParseLog() == libsbml.L3P_PARSE_LOG_AS_LN )
     r = libsbml.parseL3FormulaWithSettings("log(4.4)", settings)
-    self.assert_( r.getType() == libsbml.AST_FUNCTION_LN )
-    self.assert_( r.getNumChildren() == 1 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION_LN )
+    self.assertTrue( r.getNumChildren() == 1 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings.setParseLog(libsbml.L3P_PARSE_LOG_AS_LOG10)
-    self.assert_( settings.getParseLog() == libsbml.L3P_PARSE_LOG_AS_LOG10 )
+    self.assertTrue( settings.getParseLog() == libsbml.L3P_PARSE_LOG_AS_LOG10 )
     r = libsbml.parseL3FormulaWithSettings("log(4.4)", settings)
-    self.assert_( r.getType() == libsbml.AST_FUNCTION_LOG )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_FUNCTION_LOG )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 10 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 10 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings.setParseLog(libsbml.L3P_PARSE_LOG_AS_ERROR)
-    self.assert_( settings.getParseLog() == libsbml.L3P_PARSE_LOG_AS_ERROR )
+    self.assertTrue( settings.getParseLog() == libsbml.L3P_PARSE_LOG_AS_ERROR )
     r = libsbml.parseL3FormulaWithSettings("log(4.4)", settings)
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input 'log(4.4)' at position 8:  Writing a function as 'log(x)' was legal in the L1 parser, but translated as the natural log, not the base-10 log.  This construct is disallowed entirely as being ambiguous, and you are encouraged instead to use 'ln(x)', 'log10(x)', or 'log(base, x)'." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input 'log(4.4)' at position 8:  Writing a function as 'log(x)' was legal in the L1 parser, but translated as the natural log, not the base-10 log.  This construct is disallowed entirely as being ambiguous, and you are encouraged instead to use 'ln(x)', 'log10(x)', or 'log(base, x)'." == libsbml.getLastParseL3Error() ))
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_precedence(self):
     root = libsbml.parseL3Formula("a && b == !(c - d * e^-f) ")
-    self.assert_( root.getType() == libsbml.AST_LOGICAL_AND )
-    self.assert_((  "and" == root.getName() ))
-    self.assert_( root.getNumChildren() == 2 )
+    self.assertTrue( root.getType() == libsbml.AST_LOGICAL_AND )
+    self.assertTrue((  "and" == root.getName() ))
+    self.assertTrue( root.getNumChildren() == 2 )
     left = root.getLeftChild()
-    self.assert_( left.getType() == libsbml.AST_NAME )
-    self.assert_((  "a" == left.getName() ))
-    self.assert_( left.getNumChildren() == 0 )
+    self.assertTrue( left.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "a" == left.getName() ))
+    self.assertTrue( left.getNumChildren() == 0 )
     right = root.getRightChild()
-    self.assert_( right.getType() == libsbml.AST_RELATIONAL_EQ )
-    self.assert_((  "eq" == right.getName() ))
-    self.assert_( right.getNumChildren() == 2 )
+    self.assertTrue( right.getType() == libsbml.AST_RELATIONAL_EQ )
+    self.assertTrue((  "eq" == right.getName() ))
+    self.assertTrue( right.getNumChildren() == 2 )
     left = right.getLeftChild()
-    self.assert_( left.getType() == libsbml.AST_NAME )
-    self.assert_((  "b" == left.getName() ))
-    self.assert_( left.getNumChildren() == 0 )
+    self.assertTrue( left.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "b" == left.getName() ))
+    self.assertTrue( left.getNumChildren() == 0 )
     right = right.getRightChild()
-    self.assert_( right.getType() == libsbml.AST_LOGICAL_NOT )
-    self.assert_((  "not" == right.getName() ))
-    self.assert_( right.getNumChildren() == 1 )
+    self.assertTrue( right.getType() == libsbml.AST_LOGICAL_NOT )
+    self.assertTrue((  "not" == right.getName() ))
+    self.assertTrue( right.getNumChildren() == 1 )
     right = right.getLeftChild()
-    self.assert_( right.getType() == libsbml.AST_MINUS )
-    self.assert_( right.getCharacter() == '-' )
-    self.assert_( right.getNumChildren() == 2 )
+    self.assertTrue( right.getType() == libsbml.AST_MINUS )
+    self.assertTrue( right.getCharacter() == '-' )
+    self.assertTrue( right.getNumChildren() == 2 )
     left = right.getLeftChild()
-    self.assert_( left.getType() == libsbml.AST_NAME )
-    self.assert_((  "c" == left.getName() ))
-    self.assert_( left.getNumChildren() == 0 )
+    self.assertTrue( left.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "c" == left.getName() ))
+    self.assertTrue( left.getNumChildren() == 0 )
     right = right.getRightChild()
-    self.assert_( right.getType() == libsbml.AST_TIMES )
-    self.assert_( right.getCharacter() == '*' )
-    self.assert_( right.getNumChildren() == 2 )
+    self.assertTrue( right.getType() == libsbml.AST_TIMES )
+    self.assertTrue( right.getCharacter() == '*' )
+    self.assertTrue( right.getNumChildren() == 2 )
     left = right.getLeftChild()
-    self.assert_( left.getType() == libsbml.AST_NAME )
-    self.assert_((  "d" == left.getName() ))
-    self.assert_( left.getNumChildren() == 0 )
+    self.assertTrue( left.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "d" == left.getName() ))
+    self.assertTrue( left.getNumChildren() == 0 )
     right = right.getRightChild()
-    self.assert_( right.getType() == libsbml.AST_POWER )
-    self.assert_( right.getCharacter() == '^' )
-    self.assert_( right.getNumChildren() == 2 )
+    self.assertTrue( right.getType() == libsbml.AST_POWER )
+    self.assertTrue( right.getCharacter() == '^' )
+    self.assertTrue( right.getNumChildren() == 2 )
     left = right.getLeftChild()
-    self.assert_( left.getType() == libsbml.AST_NAME )
-    self.assert_((  "e" == left.getName() ))
-    self.assert_( left.getNumChildren() == 0 )
+    self.assertTrue( left.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "e" == left.getName() ))
+    self.assertTrue( left.getNumChildren() == 0 )
     right = right.getRightChild()
-    self.assert_( right.getType() == libsbml.AST_MINUS )
-    self.assert_( right.getCharacter() == '-' )
-    self.assert_( right.getNumChildren() == 1 )
+    self.assertTrue( right.getType() == libsbml.AST_MINUS )
+    self.assertTrue( right.getCharacter() == '-' )
+    self.assertTrue( right.getNumChildren() == 1 )
     left = right.getLeftChild()
-    self.assert_( left.getType() == libsbml.AST_NAME )
-    self.assert_((  "f" == left.getName() ))
-    self.assert_( left.getNumChildren() == 0 )
+    self.assertTrue( left.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "f" == left.getName() ))
+    self.assertTrue( left.getNumChildren() == 0 )
     _dummyList = [ root ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_rational1(self):
     r = libsbml.parseL3Formula("(3/4)")
-    self.assert_( r.getType() == libsbml.AST_RATIONAL )
-    self.assert_( r.getNumerator() == 3 )
-    self.assert_( r.getDenominator() == 4 )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_RATIONAL )
+    self.assertTrue( r.getNumerator() == 3 )
+    self.assertTrue( r.getDenominator() == 4 )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_rational2(self):
     r = libsbml.parseL3Formula("(3/4) mL")
-    self.assert_( r.getType() == libsbml.AST_RATIONAL )
-    self.assert_( r.getNumerator() == 3 )
-    self.assert_( r.getDenominator() == 4 )
-    self.assert_((  "mL" == r.getUnits() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_RATIONAL )
+    self.assertTrue( r.getNumerator() == 3 )
+    self.assertTrue( r.getDenominator() == 4 )
+    self.assertTrue((  "mL" == r.getUnits() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_rational3(self):
     r = libsbml.parseL3Formula("3/4")
-    self.assert_( r.getType() == libsbml.AST_DIVIDE )
-    self.assert_( r.getCharacter() == '/' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( r.getCharacter() == '/' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_rational4(self):
     r = libsbml.parseL3Formula("(3/x)")
-    self.assert_( r.getType() == libsbml.AST_DIVIDE )
-    self.assert_( r.getCharacter() == '/' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( r.getCharacter() == '/' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_rational5(self):
     r = libsbml.parseL3Formula("(3/4.4)")
-    self.assert_( r.getType() == libsbml.AST_DIVIDE )
-    self.assert_( r.getCharacter() == '/' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( r.getCharacter() == '/' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 4.4 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 4.4 )
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_rational6(self):
     r = libsbml.parseL3Formula("3/4 ml")
-    self.assert_( r.getType() == libsbml.AST_DIVIDE )
-    self.assert_( r.getCharacter() == '/' )
-    self.assert_( r.getNumChildren() == 2 )
+    self.assertTrue( r.getType() == libsbml.AST_DIVIDE )
+    self.assertTrue( r.getCharacter() == '/' )
+    self.assertTrue( r.getNumChildren() == 2 )
     c = r.getLeftChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 3 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 3 )
+    self.assertTrue( c.getNumChildren() == 0 )
     c = r.getRightChild()
-    self.assert_( c.getType() == libsbml.AST_INTEGER )
-    self.assert_( c.getInteger() == 4 )
-    self.assert_((  "ml" == c.getUnits() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( c.getInteger() == 4 )
+    self.assertTrue((  "ml" == c.getUnits() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_rational7(self):
     r = libsbml.parseL3Formula("(3/4.4) ml")
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input '(3/4.4) ml' at position 10:  syntax error, unexpected element name" == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input '(3/4.4) ml' at position 10:  syntax error, unexpected element name" == libsbml.getLastParseL3Error() ))
     pass  
 
   def test_SBML_C_parseL3Formula_targetl2settings(self):
     r = libsbml.parseL3Formula("4 mL")
-    self.assert_( r.getType() == libsbml.AST_INTEGER )
-    self.assert_( r.getInteger() == 4 )
-    self.assert_((  "mL" == r.getUnits() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( r.getInteger() == 4 )
+    self.assertTrue((  "mL" == r.getUnits() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = libsbml.parseL3Formula("avogadro")
-    self.assert_( r.getType() == libsbml.AST_NAME_AVOGADRO )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings = libsbml.getDefaultL3ParserSettings()
     settings.setParseUnits(False)
     settings.setParseAvogadroCsymbol(False)
-    self.assert_( settings.getParseUnits() == False )
-    self.assert_( settings.getParseAvogadroCsymbol() == False )
+    self.assertTrue( settings.getParseUnits() == False )
+    self.assertTrue( settings.getParseAvogadroCsymbol() == False )
     r = libsbml.parseL3FormulaWithSettings("4 mL", settings)
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input '4 mL' at position 4:  The ability to associate units with numbers has been disabled." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input '4 mL' at position 4:  The ability to associate units with numbers has been disabled." == libsbml.getLastParseL3Error() ))
     r = libsbml.parseL3FormulaWithSettings("avogadro", settings)
-    self.assert_( r.getType() == libsbml.AST_NAME )
-    self.assert_((  "avogadro" == r.getName() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "avogadro" == r.getName() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings.setParseUnits(True)
     settings.setParseAvogadroCsymbol(True)
-    self.assert_( settings.getParseUnits() == True )
-    self.assert_( settings.getParseAvogadroCsymbol() == True )
+    self.assertTrue( settings.getParseUnits() == True )
+    self.assertTrue( settings.getParseAvogadroCsymbol() == True )
     r = libsbml.parseL3FormulaWithSettings("4 mL", settings)
-    self.assert_( r.getType() == libsbml.AST_INTEGER )
-    self.assert_( r.getInteger() == 4 )
-    self.assert_((  "mL" == r.getUnits() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( r.getInteger() == 4 )
+    self.assertTrue((  "mL" == r.getUnits() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = libsbml.parseL3FormulaWithSettings("avogadro", settings)
-    self.assert_( r.getType() == libsbml.AST_NAME_AVOGADRO )
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO )
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBML_C_parseL3Formula_unitssettings(self):
     r = libsbml.parseL3Formula("4 mL")
-    self.assert_( r.getType() == libsbml.AST_INTEGER )
-    self.assert_( r.getInteger() == 4 )
-    self.assert_((  "mL" == r.getUnits() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( r.getInteger() == 4 )
+    self.assertTrue((  "mL" == r.getUnits() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     settings = libsbml.getDefaultL3ParserSettings()
     settings.setParseUnits(False)
-    self.assert_( settings.getParseUnits() == False )
+    self.assertTrue( settings.getParseUnits() == False )
     r = libsbml.parseL3FormulaWithSettings("4 mL", settings)
-    self.assert_( r == None )
-    self.assert_((  "Error when parsing input '4 mL' at position 4:  The ability to associate units with numbers has been disabled." == libsbml.getLastParseL3Error() ))
+    self.assertTrue( r == None )
+    self.assertTrue((  "Error when parsing input '4 mL' at position 4:  The ability to associate units with numbers has been disabled." == libsbml.getLastParseL3Error() ))
     settings.setParseUnits(True)
-    self.assert_( settings.getParseUnits() == True )
+    self.assertTrue( settings.getParseUnits() == True )
     r = libsbml.parseL3FormulaWithSettings("4 mL", settings)
-    self.assert_( r.getType() == libsbml.AST_INTEGER )
-    self.assert_( r.getInteger() == 4 )
-    self.assert_((  "mL" == r.getUnits() ))
-    self.assert_( r.getNumChildren() == 0 )
+    self.assertTrue( r.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( r.getInteger() == 4 )
+    self.assertTrue((  "mL" == r.getUnits() ))
+    self.assertTrue( r.getNumChildren() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ settings ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/math/TestMathReadFromFile1.py b/src/bindings/python/test/math/TestMathReadFromFile1.py
index 2ff1134621..df8619eba2 100644
--- a/src/bindings/python/test/math/TestMathReadFromFile1.py
+++ b/src/bindings/python/test/math/TestMathReadFromFile1.py
@@ -45,52 +45,52 @@ def test_read_MathML_1(self):
     if (d == None):
       pass    
     m = d.getModel()
-    self.assert_( m != None )
-    self.assert_( m.getNumFunctionDefinitions() == 2 )
-    self.assert_( m.getNumInitialAssignments() == 1 )
-    self.assert_( m.getNumRules() == 2 )
-    self.assert_( m.getNumReactions() == 1 )
+    self.assertTrue( m != None )
+    self.assertTrue( m.getNumFunctionDefinitions() == 2 )
+    self.assertTrue( m.getNumInitialAssignments() == 1 )
+    self.assertTrue( m.getNumRules() == 2 )
+    self.assertTrue( m.getNumReactions() == 1 )
     fd = m.getFunctionDefinition(0)
     fd_math = fd.getMath()
-    self.assert_( fd_math.getType() == libsbml.AST_LAMBDA )
-    self.assert_( fd_math.getNumChildren() == 2 )
-    self.assert_((  "lambda(x, )" == libsbml.formulaToString(fd_math) ))
-    self.assert_( fd_math.getParentSBMLObject() == fd )
+    self.assertTrue( fd_math.getType() == libsbml.AST_LAMBDA )
+    self.assertTrue( fd_math.getNumChildren() == 2 )
+    self.assertTrue((  "lambda(x, )" == libsbml.formulaToString(fd_math) ))
+    self.assertTrue( fd_math.getParentSBMLObject() == fd )
     child = fd_math.getRightChild()
-    self.assert_( child.getType() == libsbml.AST_UNKNOWN )
-    self.assert_( child.getNumChildren() == 0 )
-    self.assert_((  "" == libsbml.formulaToString(child) ))
+    self.assertTrue( child.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( child.getNumChildren() == 0 )
+    self.assertTrue((  "" == libsbml.formulaToString(child) ))
     fd = m.getFunctionDefinition(1)
     fd1_math = fd.getMath()
-    self.assert_( fd1_math.getType() == libsbml.AST_LAMBDA )
-    self.assert_( fd1_math.getNumChildren() == 2 )
-    self.assert_((  "lambda(x, true)" == libsbml.formulaToString(fd1_math) ))
-    self.assert_( fd1_math.getParentSBMLObject() == fd )
+    self.assertTrue( fd1_math.getType() == libsbml.AST_LAMBDA )
+    self.assertTrue( fd1_math.getNumChildren() == 2 )
+    self.assertTrue((  "lambda(x, true)" == libsbml.formulaToString(fd1_math) ))
+    self.assertTrue( fd1_math.getParentSBMLObject() == fd )
     child1 = fd1_math.getRightChild()
-    self.assert_( child1.getType() == libsbml.AST_CONSTANT_TRUE )
-    self.assert_( child1.getNumChildren() == 0 )
-    self.assert_((  "true" == libsbml.formulaToString(child1) ))
+    self.assertTrue( child1.getType() == libsbml.AST_CONSTANT_TRUE )
+    self.assertTrue( child1.getNumChildren() == 0 )
+    self.assertTrue((  "true" == libsbml.formulaToString(child1) ))
     ia = m.getInitialAssignment(0)
     ia_math = ia.getMath()
-    self.assert_( ia_math.getType() == libsbml.AST_UNKNOWN )
-    self.assert_( ia_math.getNumChildren() == 0 )
-    self.assert_((  "" == libsbml.formulaToString(ia_math) ))
-    self.assert_( ia_math.getParentSBMLObject() == ia )
+    self.assertTrue( ia_math.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( ia_math.getNumChildren() == 0 )
+    self.assertTrue((  "" == libsbml.formulaToString(ia_math) ))
+    self.assertTrue( ia_math.getParentSBMLObject() == ia )
     r = m.getRule(0)
     r_math = r.getMath()
-    self.assert_( r_math.getType() == libsbml.AST_CONSTANT_TRUE )
-    self.assert_( r_math.getNumChildren() == 0 )
-    self.assert_((  "true" == libsbml.formulaToString(r_math) ))
-    self.assert_( r_math.getParentSBMLObject() == r )
+    self.assertTrue( r_math.getType() == libsbml.AST_CONSTANT_TRUE )
+    self.assertTrue( r_math.getNumChildren() == 0 )
+    self.assertTrue((  "true" == libsbml.formulaToString(r_math) ))
+    self.assertTrue( r_math.getParentSBMLObject() == r )
     r = m.getRule(1)
     r1_math = r.getMath()
-    self.assert_( r1_math.getType() == libsbml.AST_REAL )
-    self.assert_( r1_math.getNumChildren() == 0 )
-    self.assert_((  "INF" == libsbml.formulaToString(r1_math) ))
-    self.assert_( r1_math.getParentSBMLObject() == r )
+    self.assertTrue( r1_math.getType() == libsbml.AST_REAL )
+    self.assertTrue( r1_math.getNumChildren() == 0 )
+    self.assertTrue((  "INF" == libsbml.formulaToString(r1_math) ))
+    self.assertTrue( r1_math.getParentSBMLObject() == r )
     # kl = m.getReaction(0).getKineticLaw()
     # kl_math = kl.getMath()
-    # self.assert_( kl_math == None )
+    # self.assertTrue( kl_math == None )
     d = None
     pass  
 
diff --git a/src/bindings/python/test/math/TestMathReadFromFile2.py b/src/bindings/python/test/math/TestMathReadFromFile2.py
index 386e4bb8d9..51f17a85bf 100644
--- a/src/bindings/python/test/math/TestMathReadFromFile2.py
+++ b/src/bindings/python/test/math/TestMathReadFromFile2.py
@@ -45,76 +45,76 @@ def test_read_MathML_2(self):
     if (d == None):
       pass    
     m = d.getModel()
-    self.assert_( m != None )
-    self.assert_( m.getNumFunctionDefinitions() == 2 )
-    self.assert_( m.getNumInitialAssignments() == 1 )
-    self.assert_( m.getNumRules() == 2 )
+    self.assertTrue( m != None )
+    self.assertTrue( m.getNumFunctionDefinitions() == 2 )
+    self.assertTrue( m.getNumInitialAssignments() == 1 )
+    self.assertTrue( m.getNumRules() == 2 )
     fd = m.getFunctionDefinition(0)
     fd_math = fd.getMath()
-    self.assert_( fd_math.getType() == libsbml.AST_LAMBDA )
-    self.assert_( fd_math.getNumChildren() == 1 )
-    self.assert_((  "lambda()" == libsbml.formulaToString(fd_math) ))
+    self.assertTrue( fd_math.getType() == libsbml.AST_LAMBDA )
+    self.assertTrue( fd_math.getNumChildren() == 1 )
+    self.assertTrue((  "lambda()" == libsbml.formulaToString(fd_math) ))
     child = fd_math.getChild(0)
-    self.assert_( child.getType() == libsbml.AST_UNKNOWN )
-    self.assert_( child.getNumChildren() == 0 )
-    self.assert_((  "" == libsbml.formulaToString(child) ))
+    self.assertTrue( child.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( child.getNumChildren() == 0 )
+    self.assertTrue((  "" == libsbml.formulaToString(child) ))
     fd = m.getFunctionDefinition(1)
     fd1_math = fd.getMath()
-    self.assert_( fd1_math.getType() == libsbml.AST_LAMBDA )
-    self.assert_( fd1_math.getNumChildren() == 2 )
-    self.assert_((                            "lambda(x, piecewise(p, leq(x, 4)))" == libsbml.formulaToString(fd1_math) ))
+    self.assertTrue( fd1_math.getType() == libsbml.AST_LAMBDA )
+    self.assertTrue( fd1_math.getNumChildren() == 2 )
+    self.assertTrue((                            "lambda(x, piecewise(p, leq(x, 4)))" == libsbml.formulaToString(fd1_math) ))
     child1 = fd1_math.getRightChild()
-    self.assert_( child1.getType() == libsbml.AST_FUNCTION_PIECEWISE )
-    self.assert_( child1.getNumChildren() == 2 )
-    self.assert_((                                      "piecewise(p, leq(x, 4))" == libsbml.formulaToString(child1) ))
+    self.assertTrue( child1.getType() == libsbml.AST_FUNCTION_PIECEWISE )
+    self.assertTrue( child1.getNumChildren() == 2 )
+    self.assertTrue((                                      "piecewise(p, leq(x, 4))" == libsbml.formulaToString(child1) ))
     c1 = child1.getChild(0)
-    self.assert_( c1.getType() == libsbml.AST_NAME )
-    self.assert_( c1.getNumChildren() == 0 )
-    self.assert_((  "p" == libsbml.formulaToString(c1) ))
+    self.assertTrue( c1.getType() == libsbml.AST_NAME )
+    self.assertTrue( c1.getNumChildren() == 0 )
+    self.assertTrue((  "p" == libsbml.formulaToString(c1) ))
     c2 = child1.getChild(1)
-    self.assert_( c2.getType() == libsbml.AST_RELATIONAL_LEQ )
-    self.assert_( c2.getNumChildren() == 2 )
-    self.assert_((  "leq(x, 4)" == libsbml.formulaToString(c2) ))
+    self.assertTrue( c2.getType() == libsbml.AST_RELATIONAL_LEQ )
+    self.assertTrue( c2.getNumChildren() == 2 )
+    self.assertTrue((  "leq(x, 4)" == libsbml.formulaToString(c2) ))
     ia = m.getInitialAssignment(0)
     ia_math = ia.getMath()
-    self.assert_( ia_math.getType() == libsbml.AST_FUNCTION_PIECEWISE )
-    self.assert_( ia_math.getNumChildren() == 4 )
-    self.assert_((                      "piecewise(-x, lt(x, 0), 0, eq(x, 0))" == libsbml.formulaToString(ia_math) ))
+    self.assertTrue( ia_math.getType() == libsbml.AST_FUNCTION_PIECEWISE )
+    self.assertTrue( ia_math.getNumChildren() == 4 )
+    self.assertTrue((                      "piecewise(-x, lt(x, 0), 0, eq(x, 0))" == libsbml.formulaToString(ia_math) ))
     child1 = ia_math.getChild(0)
     child2 = ia_math.getChild(1)
     child3 = ia_math.getChild(2)
     child4 = ia_math.getChild(3)
-    self.assert_( child1.getType() == libsbml.AST_MINUS )
-    self.assert_( child1.getNumChildren() == 1 )
-    self.assert_((  "-x" == libsbml.formulaToString(child1) ))
-    self.assert_( child2.getType() == libsbml.AST_RELATIONAL_LT )
-    self.assert_( child2.getNumChildren() == 2 )
-    self.assert_((  "lt(x, 0)" == libsbml.formulaToString(child2) ))
-    self.assert_( child3.getType() == libsbml.AST_REAL )
-    self.assert_( child3.getNumChildren() == 0 )
-    self.assert_((  "0" == libsbml.formulaToString(child3) ))
-    self.assert_( child4.getType() == libsbml.AST_RELATIONAL_EQ )
-    self.assert_( child4.getNumChildren() == 2 )
-    self.assert_((  "eq(x, 0)" == libsbml.formulaToString(child4) ))
+    self.assertTrue( child1.getType() == libsbml.AST_MINUS )
+    self.assertTrue( child1.getNumChildren() == 1 )
+    self.assertTrue((  "-x" == libsbml.formulaToString(child1) ))
+    self.assertTrue( child2.getType() == libsbml.AST_RELATIONAL_LT )
+    self.assertTrue( child2.getNumChildren() == 2 )
+    self.assertTrue((  "lt(x, 0)" == libsbml.formulaToString(child2) ))
+    self.assertTrue( child3.getType() == libsbml.AST_REAL )
+    self.assertTrue( child3.getNumChildren() == 0 )
+    self.assertTrue((  "0" == libsbml.formulaToString(child3) ))
+    self.assertTrue( child4.getType() == libsbml.AST_RELATIONAL_EQ )
+    self.assertTrue( child4.getNumChildren() == 2 )
+    self.assertTrue((  "eq(x, 0)" == libsbml.formulaToString(child4) ))
     r = m.getRule(0)
     #r_math = r.getMath()
-    #self.assert_( r_math == None )
+    #self.assertTrue( r_math == None )
     r = m.getRule(1)
     r1_math = r.getMath()
-    self.assert_( r1_math.getType() == libsbml.AST_FUNCTION_LOG )
-    self.assert_( r1_math.getNumChildren() == 2 )
-    self.assert_((  "log(3, x)" == libsbml.formulaToString(r1_math) ))
+    self.assertTrue( r1_math.getType() == libsbml.AST_FUNCTION_LOG )
+    self.assertTrue( r1_math.getNumChildren() == 2 )
+    self.assertTrue((  "log(3, x)" == libsbml.formulaToString(r1_math) ))
     child1 = r1_math.getChild(0)
     child2 = r1_math.getChild(1)
-    #self.assert_( child1.getType() == libsbml.AST_QUALIFIER_LOGBASE )
-    #self.assert_( child1.getNumChildren() == 1 )
-    #self.assert_( child2.getType() == libsbml.AST_NAME )
-    #self.assert_( child2.getNumChildren() == 0 )
-    #self.assert_((  "x" == libsbml.formulaToString(child2) ))
+    #self.assertTrue( child1.getType() == libsbml.AST_QUALIFIER_LOGBASE )
+    #self.assertTrue( child1.getNumChildren() == 1 )
+    #self.assertTrue( child2.getType() == libsbml.AST_NAME )
+    #self.assertTrue( child2.getNumChildren() == 0 )
+    #self.assertTrue((  "x" == libsbml.formulaToString(child2) ))
     #child2 = child1.getChild(0)
-    #self.assert_( child2.getType() == libsbml.AST_REAL )
-    #self.assert_( child2.getNumChildren() == 0 )
-    #self.assert_((  "3" == libsbml.formulaToString(child2) ))
+    #self.assertTrue( child2.getType() == libsbml.AST_REAL )
+    #self.assertTrue( child2.getNumChildren() == 0 )
+    #self.assertTrue((  "3" == libsbml.formulaToString(child2) ))
     d = None
     pass  
 
diff --git a/src/bindings/python/test/math/TestReadMathML.py b/src/bindings/python/test/math/TestReadMathML.py
index c1243bebdf..c2a2763886 100644
--- a/src/bindings/python/test/math/TestReadMathML.py
+++ b/src/bindings/python/test/math/TestReadMathML.py
@@ -126,114 +126,114 @@ def tearDown(self):
   def test_element_abs(self):
     s = wrapMathML("<apply><abs/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "abs(x)" == self.F ))
+    self.assertTrue((  "abs(x)" == self.F ))
     pass  
 
   def test_element_and(self):
     s = wrapMathML("<apply> <and/> <ci>a</ci> <ci>b</ci> <ci>c</ci> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "and(a, b, c)" == self.F ))
+    self.assertTrue((  "and(a, b, c)" == self.F ))
     pass  
 
   def test_element_arccos(self):
     s = wrapMathML("<apply><arccos/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "acos(x)" == self.F ))
+    self.assertTrue((  "acos(x)" == self.F ))
     pass  
 
   def test_element_arccosh(self):
     s = wrapMathML("<apply><arccosh/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arccosh(x)" == self.F ))
+    self.assertTrue((  "arccosh(x)" == self.F ))
     pass  
 
   def test_element_arccot(self):
     s = wrapMathML("<apply><arccot/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arccot(x)" == self.F ))
+    self.assertTrue((  "arccot(x)" == self.F ))
     pass  
 
   def test_element_arccoth(self):
     s = wrapMathML("<apply><arccoth/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arccoth(x)" == self.F ))
+    self.assertTrue((  "arccoth(x)" == self.F ))
     pass  
 
   def test_element_arccsc(self):
     s = wrapMathML("<apply><arccsc/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arccsc(x)" == self.F ))
+    self.assertTrue((  "arccsc(x)" == self.F ))
     pass  
 
   def test_element_arccsch(self):
     s = wrapMathML("<apply><arccsch/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arccsch(x)" == self.F ))
+    self.assertTrue((  "arccsch(x)" == self.F ))
     pass  
 
   def test_element_arcsec(self):
     s = wrapMathML("<apply><arcsec/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arcsec(x)" == self.F ))
+    self.assertTrue((  "arcsec(x)" == self.F ))
     pass  
 
   def test_element_arcsech(self):
     s = wrapMathML("<apply><arcsech/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arcsech(x)" == self.F ))
+    self.assertTrue((  "arcsech(x)" == self.F ))
     pass  
 
   def test_element_arcsin(self):
     s = wrapMathML("<apply><arcsin/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "asin(x)" == self.F ))
+    self.assertTrue((  "asin(x)" == self.F ))
     pass  
 
   def test_element_arcsinh(self):
     s = wrapMathML("<apply><arcsinh/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arcsinh(x)" == self.F ))
+    self.assertTrue((  "arcsinh(x)" == self.F ))
     pass  
 
   def test_element_arctan(self):
     s = wrapMathML("<apply><arctan/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "atan(x)" == self.F ))
+    self.assertTrue((  "atan(x)" == self.F ))
     pass  
 
   def test_element_arctanh(self):
     s = wrapMathML("<apply><arctanh/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "arctanh(x)" == self.F ))
+    self.assertTrue((  "arctanh(x)" == self.F ))
     pass  
 
   def test_element_bug_apply_ci_1(self):
@@ -242,15 +242,15 @@ def test_element_bug_apply_ci_1(self):
     "  <cn> 1 </cn>" + 
     "</apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "Y" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 1 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "Y" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 1 )
     c = self.N.getLeftChild()
-    self.assert_( c != None )
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     pass  
 
   def test_element_bug_apply_ci_2(self):
@@ -260,54 +260,54 @@ def test_element_bug_apply_ci_2(self):
     "   definitionURL='http://www.sbml.org/sbml/symbols/time'> t </csymbol>" + 
     "</apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_FUNCTION )
-    self.assert_((  "Y" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 1 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_FUNCTION )
+    self.assertTrue((  "Y" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 1 )
     c = self.N.getLeftChild()
-    self.assert_( c != None )
-    self.assert_( c.getType() == libsbml.AST_NAME_TIME )
-    self.assert_((  "t" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getType() == libsbml.AST_NAME_TIME )
+    self.assertTrue((  "t" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     pass  
 
   def test_element_bug_cn_e_notation_1(self):
     s = wrapMathML("<cn type='e-notation'> 2 <sep/> -8 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL_E )
-    self.assert_( self.N.getMantissa() == 2.0 )
-    self.assert_( self.N.getExponent() == -8.0 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( self.N.getMantissa() == 2.0 )
+    self.assertTrue( self.N.getExponent() == -8.0 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_bug_cn_e_notation_2(self):
     s = wrapMathML("<cn type='e-notation'> -3 <sep/> 4 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL_E )
-    self.assert_( self.N.getMantissa() == -3.0 )
-    self.assert_( self.N.getExponent() == 4.0 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( self.N.getMantissa() == -3.0 )
+    self.assertTrue( self.N.getExponent() == 4.0 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_bug_cn_e_notation_3(self):
     s = wrapMathML("<cn type='e-notation'> -6 <sep/> -1 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL_E )
-    self.assert_( self.N.getMantissa() == -6.0 )
-    self.assert_( self.N.getExponent() == -1.0 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( self.N.getMantissa() == -6.0 )
+    self.assertTrue( self.N.getExponent() == -1.0 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_bug_cn_integer_negative(self):
     s = wrapMathML("<cn type='integer'> -7 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_INTEGER )
-    self.assert_( self.N.getInteger() == -7 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( self.N.getInteger() == -7 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_bug_csymbol_1(self):
@@ -318,19 +318,19 @@ def test_element_bug_csymbol_1(self):
     "  <cn>5000</cn>" + 
     "</apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_RELATIONAL_GT )
-    self.assert_( self.N.getNumChildren() == 2 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_RELATIONAL_GT )
+    self.assertTrue( self.N.getNumChildren() == 2 )
     c = self.N.getLeftChild()
-    self.assert_( c != None )
-    self.assert_( c.getType() == libsbml.AST_NAME_TIME )
-    self.assert_((  "time" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getType() == libsbml.AST_NAME_TIME )
+    self.assertTrue((  "time" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = self.N.getRightChild()
-    self.assert_( c != None )
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 5000 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 5000 )
+    self.assertTrue( c.getNumChildren() == 0 )
     pass  
 
   def test_element_bug_csymbol_delay_1(self):
@@ -341,20 +341,20 @@ def test_element_bug_csymbol_delay_1(self):
     "  <cn> 0.1 </cn>" + 
     "</apply>\n")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_FUNCTION_DELAY )
-    self.assert_((  "my_delay" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 2 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_FUNCTION_DELAY )
+    self.assertTrue((  "my_delay" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 2 )
     c = self.N.getLeftChild()
-    self.assert_( c != None )
-    self.assert_( c.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( c.getNumChildren() == 0 )
     c = self.N.getRightChild()
-    self.assert_( c != None )
-    self.assert_( c.getType() == libsbml.AST_REAL )
-    self.assert_( c.getReal() == 0.1 )
-    self.assert_( c.getNumChildren() == 0 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getType() == libsbml.AST_REAL )
+    self.assertTrue( c.getReal() == 0.1 )
+    self.assertTrue( c.getNumChildren() == 0 )
     pass  
 
   def test_element_bug_math_xmlns(self):
@@ -364,219 +364,219 @@ def test_element_bug_math_xmlns(self):
     "  </foo:apply>" + 
     "</foo:math>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "1 + 2" == self.F ))
+    self.assertTrue((  "1 + 2" == self.F ))
     pass  
 
   def test_element_ceiling(self):
     s = wrapMathML("<apply><ceiling/><cn> 1.6 </cn></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "ceil(1.6)" == self.F ))
+    self.assertTrue((  "ceil(1.6)" == self.F ))
     pass  
 
   def test_element_ci(self):
     s = wrapMathML("<ci> x </ci>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_ci_definitionURL(self):
     s = wrapMathML("<ci definitionURL=\"foobar\"> x </ci>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_NAME )
-    self.assert_((  "x" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 0 )
-    self.assert_( self.N.getDefinitionURL().getValue(0) ==  "foobar" )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "x" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N.getDefinitionURL().getValue(0) ==  "foobar" )
     pass  
 
   def test_element_ci_surrounding_spaces_bug(self):
     s = wrapMathML("  <ci> s </ci>  ")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_NAME )
-    self.assert_((  "s" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_NAME )
+    self.assertTrue((  "s" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_cn_default(self):
     s = wrapMathML("<cn> 12345.7 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL )
-    self.assert_( self.N.getReal() == 12345.7 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL )
+    self.assertTrue( self.N.getReal() == 12345.7 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_cn_e_notation(self):
     s = wrapMathML("<cn type='e-notation'> 12.3 <sep/> 5 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL_E )
-    self.assert_( self.N.getMantissa() == 12.3 )
-    self.assert_( self.N.getExponent() == 5 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL_E )
+    self.assertTrue( self.N.getMantissa() == 12.3 )
+    self.assertTrue( self.N.getExponent() == 5 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_cn_integer(self):
     s = wrapMathML("<cn type='integer'> 12345 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_INTEGER )
-    self.assert_( self.N.getInteger() == 12345 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_INTEGER )
+    self.assertTrue( self.N.getInteger() == 12345 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_cn_rational(self):
     s = wrapMathML("<cn type='rational'> 12342 <sep/> 2342342 </cn>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_RATIONAL )
-    self.assert_( self.N.getNumerator() == 12342 )
-    self.assert_( self.N.getDenominator() == 2342342 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_RATIONAL )
+    self.assertTrue( self.N.getNumerator() == 12342 )
+    self.assertTrue( self.N.getDenominator() == 2342342 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_cn_real(self):
     s = wrapMathML("<cn type='real'> 12345.7 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL )
-    self.assert_( self.N.getReal() == 12345.7 )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL )
+    self.assertTrue( self.N.getReal() == 12345.7 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_cn_units(self):
     s = wrapMathMLUnits("<cn sbml:units=\"mole\"> 12345.7 </cn>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL )
-    self.assert_( self.N.getReal() == 12345.7 )
-    self.assert_( self.N.getUnits() ==  "mole"    )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL )
+    self.assertTrue( self.N.getReal() == 12345.7 )
+    self.assertTrue( self.N.getUnits() ==  "mole"    )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_constants_exponentiale(self):
     s = wrapMathML("<exponentiale/>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_CONSTANT_E )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_CONSTANT_E )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_constants_false(self):
     s = wrapMathML("<false/>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_CONSTANT_FALSE )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_CONSTANT_FALSE )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_constants_infinity(self):
     s = wrapMathML("<infinity/>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL )
-    self.assert_( util_isInf(self.N.getReal()) == True )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL )
+    self.assertTrue( util_isInf(self.N.getReal()) == True )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_constants_notanumber(self):
     s = wrapMathML("<notanumber/>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_REAL )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_REAL )
     self.assertEqual( True, isnan(self.N.getReal()) )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_constants_pi(self):
     s = wrapMathML("<pi/>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_CONSTANT_PI )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_CONSTANT_PI )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_constants_true(self):
     s = wrapMathML("<true/>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_CONSTANT_TRUE )
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_CONSTANT_TRUE )
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_cos(self):
     s = wrapMathML("<apply><cos/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "cos(x)" == self.F ))
+    self.assertTrue((  "cos(x)" == self.F ))
     pass  
 
   def test_element_cosh(self):
     s = wrapMathML("<apply><cosh/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "cosh(x)" == self.F ))
+    self.assertTrue((  "cosh(x)" == self.F ))
     pass  
 
   def test_element_cot(self):
     s = wrapMathML("<apply><cot/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "cot(x)" == self.F ))
+    self.assertTrue((  "cot(x)" == self.F ))
     pass  
 
   def test_element_coth(self):
     s = wrapMathML("<apply><coth/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "coth(x)" == self.F ))
+    self.assertTrue((  "coth(x)" == self.F ))
     pass  
 
   def test_element_csc(self):
     s = wrapMathML("<apply><csc/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "csc(x)" == self.F ))
+    self.assertTrue((  "csc(x)" == self.F ))
     pass  
 
   def test_element_csch(self):
     s = wrapMathML("<apply><csch/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "csch(x)" == self.F ))
+    self.assertTrue((  "csch(x)" == self.F ))
     pass  
 
   def test_element_csymbol_avogadro(self):
     s = wrapMathML("<csymbol encoding='text' " + "definitionURL='http://www.sbml.org/sbml/symbols/avogadro'> NA </csymbol>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_NAME_AVOGADRO )
-    self.assert_((  "NA" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_NAME_AVOGADRO )
+    self.assertTrue((  "NA" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_csymbol_delay_1(self):
     s = wrapMathML("<csymbol encoding='text' " + "definitionURL='http://www.sbml.org/sbml/symbols/delay'> delay </csymbol>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_FUNCTION_DELAY )
-    self.assert_((  "delay" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_FUNCTION_DELAY )
+    self.assertTrue((  "delay" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_csymbol_delay_2(self):
@@ -587,9 +587,9 @@ def test_element_csymbol_delay_2(self):
     "  <cn> 0.1 </cn>" + 
     "</apply>\n")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "my_delay(x, 0.1)" == self.F ))
+    self.assertTrue((  "my_delay(x, 0.1)" == self.F ))
     pass  
 
   def test_element_csymbol_delay_3(self):
@@ -604,59 +604,59 @@ def test_element_csymbol_delay_3(self):
     "  <ci> q </ci>" + 
     "</apply>\n")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "pow(delay(P, delta_t), q)" == self.F ))
+    self.assertTrue((  "pow(delay(P, delta_t), q)" == self.F ))
     pass  
 
   def test_element_csymbol_time(self):
     s = wrapMathML("<csymbol encoding='text' " + "definitionURL='http://www.sbml.org/sbml/symbols/time'> t </csymbol>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_NAME_TIME )
-    self.assert_((  "t" == self.N.getName() ))
-    self.assert_( self.N.getNumChildren() == 0 )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_NAME_TIME )
+    self.assertTrue((  "t" == self.N.getName() ))
+    self.assertTrue( self.N.getNumChildren() == 0 )
     pass  
 
   def test_element_eq(self):
     s = wrapMathML("<apply> <eq/> <ci>a</ci> <ci>b</ci> <ci>c</ci> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "eq(a, b, c)" == self.F ))
+    self.assertTrue((  "eq(a, b, c)" == self.F ))
     pass  
 
   def test_element_exp(self):
     s = wrapMathML("<apply><exp/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "exp(x)" == self.F ))
+    self.assertTrue((  "exp(x)" == self.F ))
     pass  
 
   def test_element_factorial(self):
     s = wrapMathML("<apply><factorial/><cn> 5 </cn></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "factorial(5)" == self.F ))
+    self.assertTrue((  "factorial(5)" == self.F ))
     pass  
 
   def test_element_floor(self):
     s = wrapMathML("<apply><floor/><cn> 1.2 </cn></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "floor(1.2)" == self.F ))
+    self.assertTrue((  "floor(1.2)" == self.F ))
     pass  
 
   def test_element_function_call_1(self):
     s = wrapMathML("<apply> <ci> foo </ci> <ci> x </ci> </apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "foo(x)" == self.F ))
+    self.assertTrue((  "foo(x)" == self.F ))
     pass  
 
   def test_element_function_call_2(self):
@@ -664,18 +664,18 @@ def test_element_function_call_2(self):
     "                <apply> <ci> f </ci> <ci> x </ci> </apply>" + 
     "</apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "1 + f(x)" == self.F ))
+    self.assertTrue((  "1 + f(x)" == self.F ))
     pass  
 
   def test_element_geq(self):
     s = wrapMathML("<apply> <geq/> <cn>1</cn> <ci>x</ci> <cn>0</cn> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "geq(1, x, 0)" == self.F ))
+    self.assertTrue((  "geq(1, x, 0)" == self.F ))
     pass  
 
   def test_element_gt(self):
@@ -683,9 +683,9 @@ def test_element_gt(self):
     "              <apply> <minus/> <infinity/> <cn>1</cn> </apply>" + 
     "</apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "gt(INF, INF - 1)" == self.F ))
+    self.assertTrue((  "gt(INF, INF - 1)" == self.F ))
     pass  
 
   def test_element_invalid_mathml(self):
@@ -698,9 +698,9 @@ def test_element_invalid_mathml(self):
     "</apply>" + 
     "</lambda>\n")
     self.N = libsbml.readMathMLFromString(None)
-    self.assert_( self.N == None )
+    self.assertTrue( self.N == None )
     # self.N = libsbml.readMathMLFromString(invalid)
-    # self.assert_( self.N != None )
+    # self.assertTrue( self.N != None )
     pass  
 
   def test_element_lambda(self):
@@ -711,26 +711,26 @@ def test_element_lambda(self):
     "  </apply>" + 
     "</lambda>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "lambda(x, sin(x + 1))" == self.F ))
+    self.assertTrue((  "lambda(x, sin(x + 1))" == self.F ))
     pass  
 
   def test_element_leq(self):
     s = wrapMathML("<apply> <leq/> <cn>0</cn> <ci>x</ci> <cn>1</cn> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "leq(0, x, 1)" == self.F ))
+    self.assertTrue((  "leq(0, x, 1)" == self.F ))
     pass  
 
   def test_element_ln(self):
     s = wrapMathML("<apply><ln/><ci> a </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "log(a)" == self.F ))
+    self.assertTrue((  "log(a)" == self.F ))
     pass  
 
   def test_element_log_1(self):
@@ -738,17 +738,17 @@ def test_element_log_1(self):
     "               <ci> x </ci>" + 
     "</apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "log(3, x)" == self.F ))
+    self.assertTrue((  "log(3, x)" == self.F ))
     pass  
 
   def test_element_log_2(self):
     s = wrapMathML("<apply> <log/> <ci> x </ci> </apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "log10(x)" == self.F ))
+    self.assertTrue((  "log10(x)" == self.F ))
     pass  
 
   def test_element_lt(self):
@@ -756,61 +756,61 @@ def test_element_lt(self):
     "              <cn>1</cn>" + 
     "</apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "lt(INF - INF, 1)" == self.F ))
+    self.assertTrue((  "lt(INF - INF, 1)" == self.F ))
     pass  
 
   def test_element_math(self):
     s = wrapXML("<math xmlns='http://www.w3.org/1998/Math/MathML'/>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
-    self.assert_( self.N.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( self.N != None )
+    self.assertTrue( self.N.getType() == libsbml.AST_UNKNOWN )
     pass  
 
   def test_element_neq(self):
     s = wrapMathML("<apply> <neq/> <notanumber/> <notanumber/> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "neq(NaN, NaN)" == self.F ))
+    self.assertTrue((  "neq(NaN, NaN)" == self.F ))
     pass  
 
   def test_element_not(self):
     s = wrapMathML("<apply> <not/> <ci> TooShabby </ci> </apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "not(TooShabby)" == self.F ))
+    self.assertTrue((  "not(TooShabby)" == self.F ))
     pass  
 
   def test_element_operator_plus(self):
     s = wrapMathML("<apply> <plus/> <cn> 1 </cn> <cn> 2 </cn> <cn> 3 </cn> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "1 + 2 + 3" == self.F ))
+    self.assertTrue((  "1 + 2 + 3" == self.F ))
     pass  
 
   def test_element_operator_times(self):
     s = wrapMathML("<apply> <times/> <ci> x </ci> <ci> y </ci> <ci> z </ci> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "x * y * z" == self.F ))
+    self.assertTrue((  "x * y * z" == self.F ))
     pass  
 
   def test_element_or(self):
     s = wrapMathML("<apply> <or/> <ci>a</ci> <ci>b</ci> <ci>c</ci> <ci>d</ci> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "or(a, b, c, d)" == self.F ))
+    self.assertTrue((  "or(a, b, c, d)" == self.F ))
     pass  
 
   def test_element_piecewise(self):
@@ -829,9 +829,9 @@ def test_element_piecewise(self):
     "  </piece>" + 
     "</piecewise>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "piecewise(-x, lt(x, 0), 0, eq(x, 0), x, gt(x, 0))" == self.F ))
+    self.assertTrue((  "piecewise(-x, lt(x, 0), 0, eq(x, 0), x, gt(x, 0))" == self.F ))
     pass  
 
   def test_element_piecewise_otherwise(self):
@@ -845,17 +845,17 @@ def test_element_piecewise_otherwise(self):
     "  </otherwise>" + 
     "</piecewise>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "piecewise(0, lt(x, 0), x)" == self.F ))
+    self.assertTrue((  "piecewise(0, lt(x, 0), x)" == self.F ))
     pass  
 
   def test_element_power(self):
     s = wrapMathML("<apply><power/> <ci>x</ci> <cn>3</cn> </apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "pow(x, 3)" == self.F ))
+    self.assertTrue((  "pow(x, 3)" == self.F ))
     pass  
 
   def test_element_root_1(self):
@@ -863,74 +863,74 @@ def test_element_root_1(self):
     "               <ci> a </ci>" + 
     "</apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "root(3, a)" == self.F ))
+    self.assertTrue((  "root(3, a)" == self.F ))
     pass  
 
   def test_element_root_2(self):
     s = wrapMathML("<apply> <root/> <ci> a </ci> </apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "sqrt(a)" == self.F ))
+    self.assertTrue((  "sqrt(a)" == self.F ))
     pass  
 
   def test_element_sec(self):
     s = wrapMathML("<apply><sec/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "sec(x)" == self.F ))
+    self.assertTrue((  "sec(x)" == self.F ))
     pass  
 
   def test_element_sech(self):
     s = wrapMathML("<apply><sech/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "sech(x)" == self.F ))
+    self.assertTrue((  "sech(x)" == self.F ))
     pass  
 
   def test_element_sin(self):
     s = wrapMathML("<apply><sin/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "sin(x)" == self.F ))
+    self.assertTrue((  "sin(x)" == self.F ))
     pass  
 
   def test_element_sinh(self):
     s = wrapMathML("<apply><sinh/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "sinh(x)" == self.F ))
+    self.assertTrue((  "sinh(x)" == self.F ))
     pass  
 
   def test_element_tan(self):
     s = wrapMathML("<apply><tan/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "tan(x)" == self.F ))
+    self.assertTrue((  "tan(x)" == self.F ))
     pass  
 
   def test_element_tanh(self):
     s = wrapMathML("<apply><tanh/><ci> x </ci></apply>")
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "tanh(x)" == self.F ))
+    self.assertTrue((  "tanh(x)" == self.F ))
     pass  
 
   def test_element_xor(self):
     s = wrapMathML("<apply> <xor/> <ci>a</ci> <ci>b</ci> <ci>b</ci> <ci>a</ci> </apply>"  
     )
     self.N = libsbml.readMathMLFromString(s)
-    self.assert_( self.N != None )
+    self.assertTrue( self.N != None )
     self.F = libsbml.formulaToString(self.N)
-    self.assert_((  "xor(a, b, b, a)" == self.F ))
+    self.assertTrue((  "xor(a, b, b, a)" == self.F ))
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/math/TestValidASTNode.py b/src/bindings/python/test/math/TestValidASTNode.py
index 74de660dab..22464f69e6 100644
--- a/src/bindings/python/test/math/TestValidASTNode.py
+++ b/src/bindings/python/test/math/TestValidASTNode.py
@@ -42,7 +42,7 @@ def test_ValidASTNode_Name(self):
     self.assertEqual( True, n.isWellFormedASTNode() )
     #d = libsbml.parseFormula("d")
     #i = n.addChild(d)
-    #self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    #self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     n = None
     pass  
 
@@ -51,7 +51,7 @@ def test_ValidASTNode_Number(self):
     self.assertEqual( True, n.isWellFormedASTNode() )
     #d = libsbml.parseFormula("d")
     #i = n.addChild(d)
-    #self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    #self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     n = None
     pass  
 
@@ -73,10 +73,10 @@ def test_ValidASTNode_infix_nary_plus0(self):
     "    <plus/>" + 
     "  </apply>" + 
     "</math>")
-    self.assert_( n != None )
+    self.assertTrue( n != None )
     formula = libsbml.formulaToString(n)
     node = libsbml.parseFormula(formula)
-    self.assert_( node != None )
+    self.assertTrue( node != None )
     n = None
     node = None
     pass  
@@ -88,10 +88,10 @@ def test_ValidASTNode_infix_nary_plus1(self):
     "    <cn> 0 </cn>" + 
     "  </apply>" + 
     "</math>")
-    self.assert_( n != None )
+    self.assertTrue( n != None )
     formula = libsbml.formulaToString(n)
     node = libsbml.parseFormula(formula)
-    self.assert_( node != None )
+    self.assertTrue( node != None )
     n = None
     node = None
     pass  
@@ -102,10 +102,10 @@ def test_ValidASTNode_infix_nary_times0(self):
     "    <times/>" + 
     "  </apply>" + 
     "</math>")
-    self.assert_( n != None )
+    self.assertTrue( n != None )
     formula = libsbml.formulaToString(n)
     node = libsbml.parseFormula(formula)
-    self.assert_( node != None )
+    self.assertTrue( node != None )
     n = None
     node = None
     pass  
@@ -117,10 +117,10 @@ def test_ValidASTNode_infix_nary_times1(self):
     "    <cn> 0 </cn>" + 
     "  </apply>" + 
     "</math>")
-    self.assert_( n != None )
+    self.assertTrue( n != None )
     formula = libsbml.formulaToString(n)
     node = libsbml.parseFormula(formula)
-    self.assert_( node != None )
+    self.assertTrue( node != None )
     n = None
     node = None
     pass  
@@ -210,18 +210,18 @@ def test_ValidASTNode_root(self):
   def test_ValidASTNode_setType(self):
     n = libsbml.ASTNode()
     i = n.setType(libsbml.AST_REAL)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( n.getType() == libsbml.AST_REAL )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( n.getType() == libsbml.AST_REAL )
     i = n.setType(libsbml.AST_PLUS)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( n.getType() == libsbml.AST_PLUS )
-    self.assert_( n.getCharacter() ==  '+'  )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( n.getType() == libsbml.AST_PLUS )
+    self.assertTrue( n.getCharacter() ==  '+'  )
     i = n.setType(libsbml.AST_FUNCTION_ARCCOSH)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( n.getType() == libsbml.AST_FUNCTION_ARCCOSH )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOSH )
     i = n.setType(libsbml.AST_UNKNOWN)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( n.getType() == libsbml.AST_UNKNOWN )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( n.getType() == libsbml.AST_UNKNOWN )
     n = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestAlgebraicRule.py b/src/bindings/python/test/sbml/TestAlgebraicRule.py
index 085ff4249b..d9136ccb13 100644
--- a/src/bindings/python/test/sbml/TestAlgebraicRule.py
+++ b/src/bindings/python/test/sbml/TestAlgebraicRule.py
@@ -50,25 +50,25 @@ def tearDown(self):
     pass  
 
   def test_AlgebraicRule_create(self):
-    self.assert_( self.AR.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
-    self.assert_( self.AR.getMetaId() == "" )
-    self.assert_( self.AR.getNotes() == None )
-    self.assert_( self.AR.getAnnotation() == None )
-    self.assert_( self.AR.getFormula() == "" )
-    self.assert_( self.AR.getMath() == None )
+    self.assertTrue( self.AR.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
+    self.assertTrue( self.AR.getMetaId() == "" )
+    self.assertTrue( self.AR.getNotes() == None )
+    self.assertTrue( self.AR.getAnnotation() == None )
+    self.assertTrue( self.AR.getFormula() == "" )
+    self.assertTrue( self.AR.getMath() == None )
     pass  
 
   def test_AlgebraicRule_createWithFormula(self):
     ar = libsbml.AlgebraicRule(2,4)
     ar.setFormula( "1 + 1")
-    self.assert_( ar.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
-    self.assert_( ar.getMetaId() == "" )
+    self.assertTrue( ar.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
+    self.assertTrue( ar.getMetaId() == "" )
     math = ar.getMath()
-    self.assert_( math != None )
+    self.assertTrue( math != None )
     formula = libsbml.formulaToString(math)
-    self.assert_( formula != None )
-    self.assert_((  "1 + 1" == formula ))
-    self.assert_(( formula == ar.getFormula() ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "1 + 1" == formula ))
+    self.assertTrue(( formula == ar.getFormula() ))
     _dummyList = [ ar ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -76,10 +76,10 @@ def test_AlgebraicRule_createWithMath(self):
     math = libsbml.parseFormula("1 + 1")
     ar = libsbml.AlgebraicRule(2,4)
     ar.setMath(math)
-    self.assert_( ar.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
-    self.assert_( ar.getMetaId() == "" )
-    self.assert_((  "1 + 1" == ar.getFormula() ))
-    self.assert_( ar.getMath() != math )
+    self.assertTrue( ar.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
+    self.assertTrue( ar.getMetaId() == "" )
+    self.assertTrue((  "1 + 1" == ar.getFormula() ))
+    self.assertTrue( ar.getMath() != math )
     _dummyList = [ ar ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -89,14 +89,14 @@ def test_AlgebraicRule_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,3)
     sbmlns.addNamespaces(xmlns)
     r = libsbml.AlgebraicRule(sbmlns)
-    self.assert_( r.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
-    self.assert_( r.getMetaId() == "" )
-    self.assert_( r.getNotes() == None )
-    self.assert_( r.getAnnotation() == None )
-    self.assert_( r.getLevel() == 2 )
-    self.assert_( r.getVersion() == 3 )
-    self.assert_( r.getNamespaces() != None )
-    self.assert_( r.getNamespaces().getLength() == 2 )
+    self.assertTrue( r.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
+    self.assertTrue( r.getMetaId() == "" )
+    self.assertTrue( r.getNotes() == None )
+    self.assertTrue( r.getAnnotation() == None )
+    self.assertTrue( r.getLevel() == 2 )
+    self.assertTrue( r.getVersion() == 3 )
+    self.assertTrue( r.getNamespaces() != None )
+    self.assertTrue( r.getNamespaces().getLength() == 2 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestAncestor.py b/src/bindings/python/test/sbml/TestAncestor.py
index 0555637429..8be43f0502 100644
--- a/src/bindings/python/test/sbml/TestAncestor.py
+++ b/src/bindings/python/test/sbml/TestAncestor.py
@@ -41,30 +41,30 @@ def test_AlgebraicRule_ancestor_create(self):
     m = libsbml.Model(2,4)
     r = m.createAlgebraicRule()
     lo = m.getListOfRules()
-    self.assert_( r.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getRule(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_AssignmentRule_ancestor_create(self):
     m = libsbml.Model(2,4)
     r = m.createAssignmentRule()
     lo = m.getListOfRules()
-    self.assert_( r.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getRule(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_CompartmentType_ancestor_add(self):
@@ -75,25 +75,25 @@ def test_CompartmentType_ancestor_add(self):
     ct = None
     lo = m.getListOfCompartmentTypes()
     obj = m.getCompartmentType(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_CompartmentType_ancestor_create(self):
     m = libsbml.Model(2,4)
     ct = m.createCompartmentType()
     lo = m.getListOfCompartmentTypes()
-    self.assert_( ct.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( ct.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( ct.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ct.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( ct.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( ct.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( ct.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ct.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getCompartmentType(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Compartment_ancestor_add(self):
@@ -104,25 +104,25 @@ def test_Compartment_ancestor_add(self):
     c = None
     lo = m.getListOfCompartments()
     obj = m.getCompartment(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Compartment_ancestor_create(self):
     m = libsbml.Model(2,4)
     c = m.createCompartment()
     lo = m.getListOfCompartments()
-    self.assert_( c.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( c.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( c.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( c.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( c.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( c.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( c.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( c.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getCompartment(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Constraint_ancestor_add(self):
@@ -133,25 +133,25 @@ def test_Constraint_ancestor_add(self):
     ct = None
     lo = m.getListOfConstraints()
     obj = m.getConstraint(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Constraint_ancestor_create(self):
     m = libsbml.Model(2,4)
     ct = m.createConstraint()
     lo = m.getListOfConstraints()
-    self.assert_( ct.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( ct.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( ct.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ct.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( ct.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( ct.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( ct.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ct.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getConstraint(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Delay_ancestor_add(self):
@@ -161,37 +161,37 @@ def test_Delay_ancestor_add(self):
     e.setDelay(d)
     d = None
     obj = e.getDelay()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
     e = None
     pass  
 
   def test_Delay_ancestor_create(self):
     e = libsbml.Event(2,4)
     ea = e.createDelay()
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = e.getDelay()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_Delay_ancestor_create_model(self):
     m = libsbml.Model(2,4)
     e = m.createEvent()
     ea = m.createDelay()
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = e.getDelay()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_EventAssignment_ancestor_add(self):
@@ -203,25 +203,25 @@ def test_EventAssignment_ancestor_add(self):
     ea = None
     lo = e.getListOfEventAssignments()
     obj = e.getEventAssignment(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_EventAssignment_ancestor_create(self):
     e = libsbml.Event(2,4)
     ea = e.createEventAssignment()
     lo = e.getListOfEventAssignments()
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = e.getEventAssignment(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_EventAssignment_ancestor_create_model(self):
@@ -229,17 +229,17 @@ def test_EventAssignment_ancestor_create_model(self):
     e = m.createEvent()
     ea = m.createEventAssignment()
     lo = e.getListOfEventAssignments()
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = e.getEventAssignment(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_Event_ancestor_add(self):
@@ -253,25 +253,25 @@ def test_Event_ancestor_add(self):
     e = None
     lo = m.getListOfEvents()
     obj = m.getEvent(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_Event_ancestor_create(self):
     m = libsbml.Model(2,4)
     e = m.createEvent()
     lo = m.getListOfEvents()
-    self.assert_( e.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( e.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( e.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( e.getAncestorOfType(libsbml.SBML_PARAMETER) == None )
+    self.assertTrue( e.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( e.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( e.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( e.getAncestorOfType(libsbml.SBML_PARAMETER) == None )
     obj = m.getEvent(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_FunctionDefinition_ancestor_add(self):
@@ -283,25 +283,25 @@ def test_FunctionDefinition_ancestor_add(self):
     fd = None
     lo = m.getListOfFunctionDefinitions()
     obj = m.getFunctionDefinition(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_FunctionDefinition_ancestor_create(self):
     m = libsbml.Model(2,4)
     fd = m.createFunctionDefinition()
     lo = m.getListOfFunctionDefinitions()
-    self.assert_( fd.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( fd.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( fd.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( fd.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( fd.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( fd.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( fd.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( fd.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getFunctionDefinition(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_InitialAssignment_ancestor_add(self):
@@ -313,25 +313,25 @@ def test_InitialAssignment_ancestor_add(self):
     ia = None
     lo = m.getListOfInitialAssignments()
     obj = m.getInitialAssignment(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_InitialAssignment_ancestor_create(self):
     m = libsbml.Model(2,4)
     ia = m.createInitialAssignment()
     lo = m.getListOfInitialAssignments()
-    self.assert_( ia.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( ia.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( ia.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ia.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( ia.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( ia.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( ia.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ia.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getInitialAssignment(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_KineticLaw_Parameter_ancestor_add(self):
@@ -342,27 +342,27 @@ def test_KineticLaw_Parameter_ancestor_add(self):
     p = None
     lop = kl.getListOfParameters()
     obj = kl.getParameter(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     kl = None
     pass  
 
   def test_KineticLaw_Parameter_ancestor_create(self):
     kl = libsbml.KineticLaw(2,4)
     p = kl.createParameter()
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue( kl.getNumParameters() == 1 )
     lop = kl.getListOfParameters()
-    self.assert_( p.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = kl.getParameter(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     kl = None
     pass  
 
@@ -371,21 +371,21 @@ def test_KineticLaw_Parameter_ancestor_create_model(self):
     r = m.createReaction()
     kl = m.createKineticLaw()
     p = m.createKineticLawParameter()
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue( kl.getNumParameters() == 1 )
     lop = kl.getListOfParameters()
-    self.assert_( p.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = kl.getParameter(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_KINETIC_LAW) == kl )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lop )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     kl = None
     pass  
 
@@ -395,24 +395,24 @@ def test_KineticLaw_ancestor_add(self):
     r = libsbml.Reaction(2,4)
     r.setKineticLaw(kl)
     obj = r.getKineticLaw()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
     r = None
     pass  
 
   def test_KineticLaw_ancestor_create(self):
     r = libsbml.Reaction(2,4)
     kl = r.createKineticLaw()
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_DELAY) == None )
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_DELAY) == None )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
     obj = r.getKineticLaw()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DELAY) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DELAY) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
     r = None
     pass  
 
@@ -420,15 +420,15 @@ def test_KineticLaw_ancestor_create_model(self):
     m = libsbml.Model(2,4)
     r = m.createReaction()
     kl = r.createKineticLaw()
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_DELAY) == None )
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_DELAY) == None )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
     obj = r.getKineticLaw()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DELAY) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DELAY) == None )
     r = None
     pass  
 
@@ -436,16 +436,16 @@ def test_Model_ancestor_add(self):
     d = libsbml.SBMLDocument(2,4)
     m = libsbml.Model(2,4)
     d.setModel(m)
-    self.assert_( d == d.getModel().getAncestorOfType(libsbml.SBML_DOCUMENT) )
+    self.assertTrue( d == d.getModel().getAncestorOfType(libsbml.SBML_DOCUMENT) )
     d = None
     pass  
 
   def test_Model_ancestor_create(self):
     d = libsbml.SBMLDocument()
     m = d.createModel()
-    self.assert_( m.getAncestorOfType(libsbml.SBML_DOCUMENT) == d )
+    self.assertTrue( m.getAncestorOfType(libsbml.SBML_DOCUMENT) == d )
     obj = d.getModel()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == d )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == d )
     d = None
     pass  
 
@@ -457,40 +457,40 @@ def test_Parameter_ancestor_add(self):
     ia = None
     lo = m.getListOfParameters()
     obj = m.getParameter(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Parameter_ancestor_create(self):
     m = libsbml.Model(2,4)
     p = m.createParameter()
     lo = m.getListOfParameters()
-    self.assert_( p.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( p.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( p.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getParameter(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_RateRule_ancestor_create(self):
     m = libsbml.Model(2,4)
     r = m.createRateRule()
     lo = m.getListOfRules()
-    self.assert_( r.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getRule(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Reaction_ancestor_add(self):
@@ -501,25 +501,25 @@ def test_Reaction_ancestor_add(self):
     ia = None
     lo = m.getListOfReactions()
     obj = m.getReaction(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Reaction_ancestor_create(self):
     m = libsbml.Model(2,4)
     r = m.createReaction()
     lo = m.getListOfReactions()
-    self.assert_( r.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( r.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( r.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getReaction(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Rule_ancestor_add(self):
@@ -531,10 +531,10 @@ def test_Rule_ancestor_add(self):
     ia = None
     lo = m.getListOfRules()
     obj = m.getRule(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_SpeciesReference_Modifier_ancestor_add(self):
@@ -545,25 +545,25 @@ def test_SpeciesReference_Modifier_ancestor_add(self):
     sr = None
     lo = r.getListOfModifiers()
     obj = r.getModifier(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesReference_Modifier_ancestor_create(self):
     r = libsbml.Reaction(2,4)
     sr = r.createModifier()
     lo = r.getListOfModifiers()
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = r.getModifier(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesReference_Modifier_ancestor_create_model(self):
@@ -571,17 +571,17 @@ def test_SpeciesReference_Modifier_ancestor_create_model(self):
     r = m.createReaction()
     sr = m.createModifier()
     lo = r.getListOfModifiers()
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = r.getModifier(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesReference_Product_ancestor_add(self):
@@ -592,25 +592,25 @@ def test_SpeciesReference_Product_ancestor_add(self):
     sr = None
     lo = r.getListOfProducts()
     obj = r.getProduct(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesReference_Product_ancestor_create(self):
     r = libsbml.Reaction(2,4)
     sr = r.createProduct()
     lo = r.getListOfProducts()
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = r.getProduct(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesReference_Product_ancestor_create_model(self):
@@ -618,17 +618,17 @@ def test_SpeciesReference_Product_ancestor_create_model(self):
     r = m.createReaction()
     sr = m.createProduct()
     lo = r.getListOfProducts()
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = r.getProduct(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesReference_Reactant_ancestor_add(self):
@@ -639,25 +639,25 @@ def test_SpeciesReference_Reactant_ancestor_add(self):
     sr = None
     lo = r.getListOfReactants()
     obj = r.getReactant(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesReference_Reactant_ancestor_create(self):
     r = libsbml.Reaction(2,4)
     sr = r.createReactant()
     lo = r.getListOfReactants()
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = r.getReactant(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesReference_Reactant_ancestor_create_model(self):
@@ -665,17 +665,17 @@ def test_SpeciesReference_Reactant_ancestor_create_model(self):
     r = m.createReaction()
     sr = m.createReactant()
     lo = r.getListOfReactants()
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = r.getReactant(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_REACTION) == r )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_SpeciesType_ancestor_add(self):
@@ -686,25 +686,25 @@ def test_SpeciesType_ancestor_add(self):
     ia = None
     lo = m.getListOfSpeciesTypes()
     obj = m.getSpeciesType(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_SpeciesType_ancestor_create(self):
     m = libsbml.Model(2,4)
     st = m.createSpeciesType()
     lo = m.getListOfSpeciesTypes()
-    self.assert_( st.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( st.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( st.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( st.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( st.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( st.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( st.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( st.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getSpeciesType(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Species_ancestor_add(self):
@@ -716,25 +716,25 @@ def test_Species_ancestor_add(self):
     ia = None
     lo = m.getListOfSpecies()
     obj = m.getSpecies(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Species_ancestor_create(self):
     m = libsbml.Model(2,4)
     s = m.createSpecies()
     lo = m.getListOfSpecies()
-    self.assert_( s.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( s.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( s.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( s.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( s.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( s.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( s.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( s.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getSpecies(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_StoichiometryMath_ancestor_add(self):
@@ -744,22 +744,22 @@ def test_StoichiometryMath_ancestor_add(self):
     sr.setStoichiometryMath(m)
     m = None
     obj = sr.getStoichiometryMath()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_SPECIES_REFERENCE) == sr )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_SPECIES_REFERENCE) == sr )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
     sr = None
     pass  
 
   def test_StoichiometryMath_ancestor_create(self):
     sr = libsbml.SpeciesReference(2,4)
     sm = sr.createStoichiometryMath()
-    self.assert_( sm.getAncestorOfType(libsbml.SBML_SPECIES_REFERENCE) == sr )
-    self.assert_( sm.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( sm.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( sm.getAncestorOfType(libsbml.SBML_SPECIES_REFERENCE) == sr )
+    self.assertTrue( sm.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( sm.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = sr.getStoichiometryMath()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_SPECIES_REFERENCE) == sr )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_SPECIES_REFERENCE) == sr )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_Trigger_ancestor_add(self):
@@ -769,37 +769,37 @@ def test_Trigger_ancestor_add(self):
     e.setTrigger(d)
     d = None
     obj = e.getTrigger()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
     e = None
     pass  
 
   def test_Trigger_ancestor_create(self):
     e = libsbml.Event(2,4)
     ea = e.createTrigger()
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = e.getTrigger()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_Trigger_ancestor_create_model(self):
     m = libsbml.Model(2,4)
     e = m.createEvent()
     ea = m.createTrigger()
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = e.getTrigger()
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == e )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     pass  
 
   def test_UnitDefinition_ancestor_add(self):
@@ -811,25 +811,25 @@ def test_UnitDefinition_ancestor_add(self):
     ia = None
     lo = m.getListOfUnitDefinitions()
     obj = m.getUnitDefinition(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_UnitDefinition_ancestor_create(self):
     m = libsbml.Model(2,4)
     ud = m.createUnitDefinition()
     lo = m.getListOfUnitDefinitions()
-    self.assert_( ud.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( ud.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( ud.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( ud.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( ud.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( ud.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( ud.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( ud.getAncestorOfType(libsbml.SBML_EVENT) == None )
     obj = m.getUnitDefinition(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_EVENT) == None )
     pass  
 
   def test_Unit_ancestor_add(self):
@@ -838,30 +838,30 @@ def test_Unit_ancestor_add(self):
     u.setKind(libsbml.UNIT_KIND_MOLE)
     ud.addUnit(u)
     u = None
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
     lo = ud.getListOfUnits()
     obj = ud.getUnit(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     ud = None
     pass  
 
   def test_Unit_ancestor_create(self):
     ud = libsbml.UnitDefinition(2,4)
     u = ud.createUnit()
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
     lo = ud.getListOfUnits()
-    self.assert_( u.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
-    self.assert_( u.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( u.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( u.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = ud.getUnit(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     ud = None
     pass  
 
@@ -869,19 +869,19 @@ def test_Unit_ancestor_create_model(self):
     m = libsbml.Model(2,4)
     ud = m.createUnitDefinition()
     u = m.createUnit()
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
     lo = ud.getListOfUnits()
-    self.assert_( u.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
-    self.assert_( u.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( u.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( u.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( u.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     obj = ud.getUnit(0)
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == ud )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_LIST_OF) == lo )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_DOCUMENT) == None )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( obj.getAncestorOfType(libsbml.SBML_COMPARTMENT) == None )
     ud = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestAssignmentRule.py b/src/bindings/python/test/sbml/TestAssignmentRule.py
index ceb3e59da8..5b26f64060 100644
--- a/src/bindings/python/test/sbml/TestAssignmentRule.py
+++ b/src/bindings/python/test/sbml/TestAssignmentRule.py
@@ -50,29 +50,29 @@ def tearDown(self):
     pass  
 
   def test_AssignmentRule_L2_create(self):
-    self.assert_( self.AR.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
-    self.assert_( self.AR.getMetaId() == "" )
-    self.assert_( self.AR.getNotes() == None )
-    self.assert_( self.AR.getAnnotation() == None )
-    self.assert_( self.AR.getFormula() == "" )
-    self.assert_( self.AR.getMath() == None )
-    self.assert_( self.AR.getVariable() == "" )
-    self.assert_( self.AR.getType() == libsbml.RULE_TYPE_SCALAR )
+    self.assertTrue( self.AR.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( self.AR.getMetaId() == "" )
+    self.assertTrue( self.AR.getNotes() == None )
+    self.assertTrue( self.AR.getAnnotation() == None )
+    self.assertTrue( self.AR.getFormula() == "" )
+    self.assertTrue( self.AR.getMath() == None )
+    self.assertTrue( self.AR.getVariable() == "" )
+    self.assertTrue( self.AR.getType() == libsbml.RULE_TYPE_SCALAR )
     pass  
 
   def test_AssignmentRule_createWithFormula(self):
     ar = libsbml.AssignmentRule(2,4)
     ar.setVariable( "s")
     ar.setFormula( "1 + 1")
-    self.assert_( ar.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
-    self.assert_( ar.getMetaId() == "" )
-    self.assert_((  "s" == ar.getVariable() ))
+    self.assertTrue( ar.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( ar.getMetaId() == "" )
+    self.assertTrue((  "s" == ar.getVariable() ))
     math = ar.getMath()
-    self.assert_( math != None )
+    self.assertTrue( math != None )
     formula = libsbml.formulaToString(math)
-    self.assert_( formula != None )
-    self.assert_((  "1 + 1" == formula ))
-    self.assert_(( formula == ar.getFormula() ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "1 + 1" == formula ))
+    self.assertTrue(( formula == ar.getFormula() ))
     _dummyList = [ ar ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -81,11 +81,11 @@ def test_AssignmentRule_createWithMath(self):
     ar = libsbml.AssignmentRule(2,4)
     ar.setVariable( "s")
     ar.setMath(math)
-    self.assert_( ar.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
-    self.assert_( ar.getMetaId() == "" )
-    self.assert_((  "s" == ar.getVariable() ))
-    self.assert_((  "1 + 1" == ar.getFormula() ))
-    self.assert_( ar.getMath() != math )
+    self.assertTrue( ar.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( ar.getMetaId() == "" )
+    self.assertTrue((  "s" == ar.getVariable() ))
+    self.assertTrue((  "1 + 1" == ar.getFormula() ))
+    self.assertTrue( ar.getMath() != math )
     _dummyList = [ ar ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -95,14 +95,14 @@ def test_AssignmentRule_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.AssignmentRule(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -113,12 +113,12 @@ def test_AssignmentRule_free_NULL(self):
   def test_AssignmentRule_setVariable(self):
     variable =  "x";
     self.AR.setVariable(variable)
-    self.assert_(( variable == self.AR.getVariable() ))
+    self.assertTrue(( variable == self.AR.getVariable() ))
     self.assertEqual( True, self.AR.isSetVariable() )
     if (self.AR.getVariable() == variable):
       pass    
     self.AR.setVariable(self.AR.getVariable())
-    self.assert_(( variable == self.AR.getVariable() ))
+    self.assertTrue(( variable == self.AR.getVariable() ))
     self.AR.setVariable("")
     self.assertEqual( False, self.AR.isSetVariable() )
     if (self.AR.getVariable() != None):
diff --git a/src/bindings/python/test/sbml/TestCompartment.py b/src/bindings/python/test/sbml/TestCompartment.py
index f300b777b6..e473b1874e 100644
--- a/src/bindings/python/test/sbml/TestCompartment.py
+++ b/src/bindings/python/test/sbml/TestCompartment.py
@@ -50,17 +50,17 @@ def tearDown(self):
     pass  
 
   def test_Compartment_create(self):
-    self.assert_( self.C.getTypeCode() == libsbml.SBML_COMPARTMENT )
-    self.assert_( self.C.getMetaId() == "" )
-    self.assert_( self.C.getNotes() == None )
-    self.assert_( self.C.getAnnotation() == None )
-    self.assert_( self.C.getId() == "" )
-    self.assert_( self.C.getName() == "" )
-    self.assert_( self.C.getUnits() == "" )
-    self.assert_( self.C.getOutside() == "" )
-    self.assert_( self.C.getSpatialDimensions() == 3 )
-    self.assert_( self.C.getVolume() == 1.0 )
-    self.assert_( self.C.getConstant() == True )
+    self.assertTrue( self.C.getTypeCode() == libsbml.SBML_COMPARTMENT )
+    self.assertTrue( self.C.getMetaId() == "" )
+    self.assertTrue( self.C.getNotes() == None )
+    self.assertTrue( self.C.getAnnotation() == None )
+    self.assertTrue( self.C.getId() == "" )
+    self.assertTrue( self.C.getName() == "" )
+    self.assertTrue( self.C.getUnits() == "" )
+    self.assertTrue( self.C.getOutside() == "" )
+    self.assertTrue( self.C.getSpatialDimensions() == 3 )
+    self.assertTrue( self.C.getVolume() == 1.0 )
+    self.assertTrue( self.C.getConstant() == True )
     self.assertEqual( False, self.C.isSetId() )
     self.assertEqual( False, self.C.isSetName() )
     self.assertEqual( False, self.C.isSetSize() )
@@ -72,14 +72,14 @@ def test_Compartment_create(self):
   def test_Compartment_createWith(self):
     c = libsbml.Compartment(2,4)
     c.setId( "A")
-    self.assert_( c.getTypeCode() == libsbml.SBML_COMPARTMENT )
-    self.assert_( c.getMetaId() == "" )
-    self.assert_( c.getNotes() == None )
-    self.assert_( c.getAnnotation() == None )
-    self.assert_( c.getName() == "" )
-    self.assert_( c.getSpatialDimensions() == 3 )
-    self.assert_((  "A"      == c.getId() ))
-    self.assert_( c.getConstant() == True )
+    self.assertTrue( c.getTypeCode() == libsbml.SBML_COMPARTMENT )
+    self.assertTrue( c.getMetaId() == "" )
+    self.assertTrue( c.getNotes() == None )
+    self.assertTrue( c.getAnnotation() == None )
+    self.assertTrue( c.getName() == "" )
+    self.assertTrue( c.getSpatialDimensions() == 3 )
+    self.assertTrue((  "A"      == c.getId() ))
+    self.assertTrue( c.getConstant() == True )
     self.assertEqual( True, c.isSetId() )
     self.assertEqual( False, c.isSetName() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
@@ -91,17 +91,17 @@ def test_Compartment_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     c = libsbml.Compartment(sbmlns)
-    self.assert_( c.getTypeCode() == libsbml.SBML_COMPARTMENT )
-    self.assert_( c.getMetaId() == "" )
-    self.assert_( c.getNotes() == None )
-    self.assert_( c.getAnnotation() == None )
-    self.assert_( c.getLevel() == 2 )
-    self.assert_( c.getVersion() == 1 )
-    self.assert_( c.getNamespaces() != None )
-    self.assert_( c.getNamespaces().getLength() == 2 )
-    self.assert_( c.getName() == "" )
-    self.assert_( c.getSpatialDimensions() == 3 )
-    self.assert_( c.getConstant() == True )
+    self.assertTrue( c.getTypeCode() == libsbml.SBML_COMPARTMENT )
+    self.assertTrue( c.getMetaId() == "" )
+    self.assertTrue( c.getNotes() == None )
+    self.assertTrue( c.getAnnotation() == None )
+    self.assertTrue( c.getLevel() == 2 )
+    self.assertTrue( c.getVersion() == 1 )
+    self.assertTrue( c.getNamespaces() != None )
+    self.assertTrue( c.getNamespaces().getLength() == 2 )
+    self.assertTrue( c.getName() == "" )
+    self.assertTrue( c.getSpatialDimensions() == 3 )
+    self.assertTrue( c.getConstant() == True )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -111,17 +111,17 @@ def test_Compartment_free_NULL(self):
 
   def test_Compartment_getSpatialDimensions(self):
     self.C.setSpatialDimensions(1)
-    self.assert_( self.C.getSpatialDimensions() == 1 )
+    self.assertTrue( self.C.getSpatialDimensions() == 1 )
     pass  
 
   def test_Compartment_getsetConstant(self):
     self.C.setConstant(True)
-    self.assert_( self.C.getConstant() == True )
+    self.assertTrue( self.C.getConstant() == True )
     pass  
 
   def test_Compartment_getsetType(self):
     self.C.setCompartmentType( "cell")
-    self.assert_((  "cell"  == self.C.getCompartmentType() ))
+    self.assertTrue((  "cell"  == self.C.getCompartmentType() ))
     self.assertEqual( True, self.C.isSetCompartmentType() )
     self.C.unsetCompartmentType()
     self.assertEqual( False, self.C.isSetCompartmentType() )
@@ -131,13 +131,13 @@ def test_Compartment_initDefaults(self):
     c = libsbml.Compartment(2,4)
     c.setId( "A")
     c.initDefaults()
-    self.assert_((  "A" == c.getId() ))
-    self.assert_( c.getName() == "" )
-    self.assert_( c.getUnits() == "" )
-    self.assert_( c.getOutside() == "" )
-    self.assert_( c.getSpatialDimensions() == 3 )
-    self.assert_( c.getVolume() == 1.0 )
-    self.assert_( c.getConstant() == True )
+    self.assertTrue((  "A" == c.getId() ))
+    self.assertTrue( c.getName() == "" )
+    self.assertTrue( c.getUnits() == "" )
+    self.assertTrue( c.getOutside() == "" )
+    self.assertTrue( c.getSpatialDimensions() == 3 )
+    self.assertTrue( c.getVolume() == 1.0 )
+    self.assertTrue( c.getConstant() == True )
     self.assertEqual( True, c.isSetId() )
     self.assertEqual( False, c.isSetName() )
     self.assertEqual( False, c.isSetSize() )
@@ -152,12 +152,12 @@ def test_Compartment_initDefaults(self):
   def test_Compartment_setId(self):
     id =  "mitochondria";
     self.C.setId(id)
-    self.assert_(( id == self.C.getId() ))
+    self.assertTrue(( id == self.C.getId() ))
     self.assertEqual( True, self.C.isSetId() )
     if (self.C.getId() == id):
       pass    
     self.C.setId(self.C.getId())
-    self.assert_(( id == self.C.getId() ))
+    self.assertTrue(( id == self.C.getId() ))
     self.C.setId("")
     self.assertEqual( False, self.C.isSetId() )
     if (self.C.getId() != None):
@@ -167,12 +167,12 @@ def test_Compartment_setId(self):
   def test_Compartment_setName(self):
     name =  "My_Favorite_Factory";
     self.C.setName(name)
-    self.assert_(( name == self.C.getName() ))
+    self.assertTrue(( name == self.C.getName() ))
     self.assertEqual( True, self.C.isSetName() )
     if (self.C.getName() == name):
       pass    
     self.C.setName(self.C.getName())
-    self.assert_(( name == self.C.getName() ))
+    self.assertTrue(( name == self.C.getName() ))
     self.C.setName("")
     self.assertEqual( False, self.C.isSetName() )
     if (self.C.getName() != None):
@@ -182,12 +182,12 @@ def test_Compartment_setName(self):
   def test_Compartment_setOutside(self):
     outside =  "cell";
     self.C.setOutside(outside)
-    self.assert_(( outside == self.C.getOutside() ))
+    self.assertTrue(( outside == self.C.getOutside() ))
     self.assertEqual( True, self.C.isSetOutside() )
     if (self.C.getOutside() == outside):
       pass    
     self.C.setOutside(self.C.getOutside())
-    self.assert_(( outside == self.C.getOutside() ))
+    self.assertTrue(( outside == self.C.getOutside() ))
     self.C.setOutside("")
     self.assertEqual( False, self.C.isSetOutside() )
     if (self.C.getOutside() != None):
@@ -197,12 +197,12 @@ def test_Compartment_setOutside(self):
   def test_Compartment_setUnits(self):
     units =  "volume";
     self.C.setUnits(units)
-    self.assert_(( units == self.C.getUnits() ))
+    self.assertTrue(( units == self.C.getUnits() ))
     self.assertEqual( True, self.C.isSetUnits() )
     if (self.C.getUnits() == units):
       pass    
     self.C.setUnits(self.C.getUnits())
-    self.assert_(( units == self.C.getUnits() ))
+    self.assertTrue(( units == self.C.getUnits() ))
     self.C.setUnits("")
     self.assertEqual( False, self.C.isSetUnits() )
     if (self.C.getUnits() != None):
@@ -211,7 +211,7 @@ def test_Compartment_setUnits(self):
 
   def test_Compartment_unsetSize(self):
     self.C.setSize(0.2)
-    self.assert_( self.C.getSize() == 0.2 )
+    self.assertTrue( self.C.getSize() == 0.2 )
     self.assertEqual( True, self.C.isSetSize() )
     self.C.unsetSize()
     self.assertEqual( False, self.C.isSetSize() )
@@ -219,7 +219,7 @@ def test_Compartment_unsetSize(self):
 
   def test_Compartment_unsetVolume(self):
     self.C.setVolume(1.0)
-    self.assert_( self.C.getVolume() == 1.0 )
+    self.assertTrue( self.C.getVolume() == 1.0 )
     self.C.unsetVolume()
     self.assertEqual( False, self.C.isSetVolume() )
     pass  
diff --git a/src/bindings/python/test/sbml/TestCompartmentType.py b/src/bindings/python/test/sbml/TestCompartmentType.py
index 86c9cc8e5a..9b787e63c4 100644
--- a/src/bindings/python/test/sbml/TestCompartmentType.py
+++ b/src/bindings/python/test/sbml/TestCompartmentType.py
@@ -50,12 +50,12 @@ def tearDown(self):
     pass  
 
   def test_CompartmentType_create(self):
-    self.assert_( self.CT.getTypeCode() == libsbml.SBML_COMPARTMENT_TYPE )
-    self.assert_( self.CT.getMetaId() == "" )
-    self.assert_( self.CT.getNotes() == None )
-    self.assert_( self.CT.getAnnotation() == None )
-    self.assert_( self.CT.getId() == "" )
-    self.assert_( self.CT.getName() == "" )
+    self.assertTrue( self.CT.getTypeCode() == libsbml.SBML_COMPARTMENT_TYPE )
+    self.assertTrue( self.CT.getMetaId() == "" )
+    self.assertTrue( self.CT.getNotes() == None )
+    self.assertTrue( self.CT.getAnnotation() == None )
+    self.assertTrue( self.CT.getId() == "" )
+    self.assertTrue( self.CT.getName() == "" )
     self.assertEqual( False, self.CT.isSetId() )
     self.assertEqual( False, self.CT.isSetName() )
     pass  
@@ -66,14 +66,14 @@ def test_CompartmentType_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,2)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.CompartmentType(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_COMPARTMENT_TYPE )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 2 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_COMPARTMENT_TYPE )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 2 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -84,12 +84,12 @@ def test_CompartmentType_free_NULL(self):
   def test_CompartmentType_setId(self):
     id =  "mitochondria";
     self.CT.setId(id)
-    self.assert_(( id == self.CT.getId() ))
+    self.assertTrue(( id == self.CT.getId() ))
     self.assertEqual( True, self.CT.isSetId() )
     if (self.CT.getId() == id):
       pass    
     self.CT.setId(self.CT.getId())
-    self.assert_(( id == self.CT.getId() ))
+    self.assertTrue(( id == self.CT.getId() ))
     self.CT.setId("")
     self.assertEqual( False, self.CT.isSetId() )
     if (self.CT.getId() != None):
@@ -99,12 +99,12 @@ def test_CompartmentType_setId(self):
   def test_CompartmentType_setName(self):
     name =  "My_Favorite_Factory";
     self.CT.setName(name)
-    self.assert_(( name == self.CT.getName() ))
+    self.assertTrue(( name == self.CT.getName() ))
     self.assertEqual( True, self.CT.isSetName() )
     if (self.CT.getName() == name):
       pass    
     self.CT.setName(self.CT.getName())
-    self.assert_(( name == self.CT.getName() ))
+    self.assertTrue(( name == self.CT.getName() ))
     self.CT.setName("")
     self.assertEqual( False, self.CT.isSetName() )
     if (self.CT.getName() != None):
@@ -113,7 +113,7 @@ def test_CompartmentType_setName(self):
 
   def test_CompartmentType_unsetName(self):
     self.CT.setName( "name")
-    self.assert_((  "name"      == self.CT.getName() ))
+    self.assertTrue((  "name"      == self.CT.getName() ))
     self.assertEqual( True, self.CT.isSetName() )
     self.CT.unsetName()
     self.assertEqual( False, self.CT.isSetName() )
diff --git a/src/bindings/python/test/sbml/TestCompartmentType_newSetters.py b/src/bindings/python/test/sbml/TestCompartmentType_newSetters.py
index 33a34839d0..84f5e9e56a 100644
--- a/src/bindings/python/test/sbml/TestCompartmentType_newSetters.py
+++ b/src/bindings/python/test/sbml/TestCompartmentType_newSetters.py
@@ -51,44 +51,44 @@ def tearDown(self):
 
   def test_CompartmentType_setId2(self):
     i = self.C.setId( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.C.isSetId() )
     pass  
 
   def test_CompartmentType_setId3(self):
     i = self.C.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetId() )
-    self.assert_((  "cell"  == self.C.getId() ))
+    self.assertTrue((  "cell"  == self.C.getId() ))
     pass  
 
   def test_CompartmentType_setId4(self):
     i = self.C.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetId() )
     pass  
 
   def test_CompartmentType_setName1(self):
     i = self.C.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetName() )
     i = self.C.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetName() )
     pass  
 
   def test_CompartmentType_setName2(self):
     i = self.C.setName( "1cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetName() )
     i = self.C.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetName() )
     pass  
 
   def test_CompartmentType_setName3(self):
     i = self.C.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetName() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestCompartmentVolumeRule.py b/src/bindings/python/test/sbml/TestCompartmentVolumeRule.py
index dce4ae77c6..7ae5f3fde0 100644
--- a/src/bindings/python/test/sbml/TestCompartmentVolumeRule.py
+++ b/src/bindings/python/test/sbml/TestCompartmentVolumeRule.py
@@ -51,13 +51,13 @@ def tearDown(self):
     pass  
 
   def test_CompartmentVolumeRule_create(self):
-    self.assert_( self.CVR.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
-    self.assert_( self.CVR.getL1TypeCode() == libsbml.SBML_COMPARTMENT_VOLUME_RULE )
-    self.assert_( self.CVR.getNotes() == None )
-    self.assert_( self.CVR.getAnnotation() == None )
-    self.assert_( self.CVR.getFormula() == "" )
-    self.assert_( self.CVR.getType() == libsbml.RULE_TYPE_SCALAR )
-    self.assert_( self.CVR.getVariable() == "" )
+    self.assertTrue( self.CVR.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( self.CVR.getL1TypeCode() == libsbml.SBML_COMPARTMENT_VOLUME_RULE )
+    self.assertTrue( self.CVR.getNotes() == None )
+    self.assertTrue( self.CVR.getAnnotation() == None )
+    self.assertTrue( self.CVR.getFormula() == "" )
+    self.assertTrue( self.CVR.getType() == libsbml.RULE_TYPE_SCALAR )
+    self.assertTrue( self.CVR.getVariable() == "" )
     self.assertEqual( False, self.CVR.isSetVariable() )
     pass  
 
@@ -68,13 +68,13 @@ def test_CompartmentVolumeRule_free_NULL(self):
   def test_CompartmentVolumeRule_setCompartment(self):
     compartment =  "cell";
     self.CVR.setVariable(compartment)
-    self.assert_(( compartment == self.CVR.getVariable() ))
+    self.assertTrue(( compartment == self.CVR.getVariable() ))
     self.assertEqual( True, self.CVR.isSetVariable() )
     if (self.CVR.getVariable() == compartment):
       pass    
     c = self.CVR.getVariable()
     self.CVR.setVariable(c)
-    self.assert_(( compartment == self.CVR.getVariable() ))
+    self.assertTrue(( compartment == self.CVR.getVariable() ))
     self.CVR.setVariable("")
     self.assertEqual( False, self.CVR.isSetVariable() )
     if (self.CVR.getVariable() != None):
diff --git a/src/bindings/python/test/sbml/TestCompartment_newSetters.py b/src/bindings/python/test/sbml/TestCompartment_newSetters.py
index 06602605f2..f047de1dea 100644
--- a/src/bindings/python/test/sbml/TestCompartment_newSetters.py
+++ b/src/bindings/python/test/sbml/TestCompartment_newSetters.py
@@ -51,20 +51,20 @@ def tearDown(self):
 
   def test_Compartment_setCompartmentType1(self):
     i = self.C.setCompartmentType( "cell")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.C.isSetCompartmentType() )
     i = self.C.unsetCompartmentType()
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.C.isSetCompartmentType() )
     pass  
 
   def test_Compartment_setCompartmentType2(self):
     c = libsbml.Compartment(2,2)
     i = c.setCompartmentType( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, c.isSetCompartmentType() )
     i = c.unsetCompartmentType()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetCompartmentType() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -72,11 +72,11 @@ def test_Compartment_setCompartmentType2(self):
   def test_Compartment_setCompartmentType3(self):
     c = libsbml.Compartment(2,2)
     i = c.setCompartmentType( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, c.isSetCompartmentType() )
-    self.assert_((  "cell"  == c.getCompartmentType() ))
+    self.assertTrue((  "cell"  == c.getCompartmentType() ))
     i = c.unsetCompartmentType()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetCompartmentType() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -84,29 +84,29 @@ def test_Compartment_setCompartmentType3(self):
   def test_Compartment_setCompartmentType4(self):
     c = libsbml.Compartment(2,2)
     i = c.setCompartmentType("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetCompartmentType() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setConstant1(self):
     i = self.C.setConstant(False)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( self.C.getConstant() == False )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.C.getConstant() == False )
     pass  
 
   def test_Compartment_setConstant2(self):
     c = libsbml.Compartment(2,2)
     i = c.setConstant(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getConstant() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getConstant() == False )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setId2(self):
     c = libsbml.Compartment(2,2)
     i = c.setId( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, c.isSetId() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -114,171 +114,171 @@ def test_Compartment_setId2(self):
   def test_Compartment_setId3(self):
     c = libsbml.Compartment(2,2)
     i = c.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, c.isSetId() )
-    self.assert_((  "cell"  == c.getId() ))
+    self.assertTrue((  "cell"  == c.getId() ))
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setId4(self):
     c = libsbml.Compartment(2,2)
     i = c.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetId() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setName1(self):
     i = self.C.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetName() )
     i = self.C.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetName() )
     pass  
 
   def test_Compartment_setName2(self):
     c = libsbml.Compartment(1,2)
     i = c.setName( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, c.isSetName() )
     i = c.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetName() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setName3(self):
     i = self.C.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetName() )
     pass  
 
   def test_Compartment_setOutside1(self):
     i = self.C.setOutside( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.C.isSetOutside() )
     i = self.C.unsetOutside()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetOutside() )
     pass  
 
   def test_Compartment_setOutside2(self):
     i = self.C.setOutside( "litre")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetOutside() )
     i = self.C.unsetOutside()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetOutside() )
     pass  
 
   def test_Compartment_setOutside3(self):
     i = self.C.setOutside("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetOutside() )
     pass  
 
   def test_Compartment_setSize1(self):
     i = self.C.setSize(2.0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.getSize() == 2.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.getSize() == 2.0 )
     i = self.C.unsetSize()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     pass  
 
   def test_Compartment_setSize2(self):
     c = libsbml.Compartment(2,2)
     i = c.setSize(4)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getSize() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getSize() == 4 )
     self.assertEqual( True, c.isSetSize() )
     i = c.unsetSize()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetSize() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setSpatialDimensions1(self):
     i = self.C.setSpatialDimensions(2)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( self.C.getSpatialDimensions() == 3 )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.C.getSpatialDimensions() == 3 )
     pass  
 
   def test_Compartment_setSpatialDimensions2(self):
     c = libsbml.Compartment(2,2)
     i = c.setSpatialDimensions(4)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( c.getSpatialDimensions() == 3 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( c.getSpatialDimensions() == 3 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setSpatialDimensions3(self):
     c = libsbml.Compartment(2,2)
     i = c.setSpatialDimensions(2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getSpatialDimensions() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getSpatialDimensions() == 2 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setSpatialDimensions4(self):
     c = libsbml.Compartment(2,2)
     i = c.setSpatialDimensions(2.0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getSpatialDimensions() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getSpatialDimensions() == 2 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setSpatialDimensions5(self):
     c = libsbml.Compartment(2,2)
     i = c.setSpatialDimensions(2.2)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( c.getSpatialDimensions() == 3 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( c.getSpatialDimensions() == 3 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Compartment_setUnits1(self):
     i = self.C.setUnits( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.C.isSetUnits() )
     i = self.C.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetUnits() )
     pass  
 
   def test_Compartment_setUnits2(self):
     i = self.C.setUnits( "litre")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetUnits() )
     i = self.C.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetUnits() )
     pass  
 
   def test_Compartment_setUnits3(self):
     i = self.C.setUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetUnits() )
     pass  
 
   def test_Compartment_setVolume1(self):
     i = self.C.setVolume(2.0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.getVolume() == 2.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.getVolume() == 2.0 )
     self.assertEqual( True, self.C.isSetVolume() )
     i = self.C.unsetVolume()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.getVolume() == 1.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.getVolume() == 1.0 )
     self.assertEqual( True, self.C.isSetVolume() )
     pass  
 
   def test_Compartment_setVolume2(self):
     c = libsbml.Compartment(2,2)
     i = c.setVolume(4)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getVolume() == 4.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getVolume() == 4.0 )
     self.assertEqual( True, c.isSetVolume() )
     i = c.unsetVolume()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetVolume() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestConsistencyChecks.py b/src/bindings/python/test/sbml/TestConsistencyChecks.py
index d443cc3ad6..d8f5aed39d 100644
--- a/src/bindings/python/test/sbml/TestConsistencyChecks.py
+++ b/src/bindings/python/test/sbml/TestConsistencyChecks.py
@@ -45,36 +45,36 @@ def test_consistency_checks(self):
     if (d == None):
       pass    
     errors = d.checkConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10301 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10301 )
     d.getErrorLog().clearLog()
     d.setConsistencyChecks(libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY,False)
     errors = d.checkConsistency()
-    self.assert_( errors == 2 )
-    self.assert_( d.getError(0).getErrorId() == 10214 )
-    self.assert_( d.getError(1).getErrorId() == 20612 )
+    self.assertTrue( errors == 2 )
+    self.assertTrue( d.getError(0).getErrorId() == 10214 )
+    self.assertTrue( d.getError(1).getErrorId() == 20612 )
     d.getErrorLog().clearLog()
     d.setConsistencyChecks(libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY,False)
     errors = d.checkConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10701 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10701 )
     d.getErrorLog().clearLog()
     d.setConsistencyChecks(libsbml.LIBSBML_CAT_SBO_CONSISTENCY,False)
     errors = d.checkConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10214 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10214 )
     d.getErrorLog().clearLog()
     d.setConsistencyChecks(libsbml.LIBSBML_CAT_MATHML_CONSISTENCY,False)
     errors = d.checkConsistency()
-    self.assert_( errors == 4 )
-    self.assert_( d.getError(0).getErrorId() == 99505 )
-    self.assert_( d.getError(1).getErrorId() == 99505 )
-    self.assert_( d.getError(2).getErrorId() == 99505 )
-    self.assert_( d.getError(3).getErrorId() == 80701 )
+    self.assertTrue( errors == 4 )
+    self.assertTrue( d.getError(0).getErrorId() == 99505 )
+    self.assertTrue( d.getError(1).getErrorId() == 99505 )
+    self.assertTrue( d.getError(2).getErrorId() == 99505 )
+    self.assertTrue( d.getError(3).getErrorId() == 80701 )
     d.getErrorLog().clearLog()
     d.setConsistencyChecks(libsbml.LIBSBML_CAT_UNITS_CONSISTENCY,False)
     errors = d.checkConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestConstraint.py b/src/bindings/python/test/sbml/TestConstraint.py
index 6a885e8c5f..5bb6793dfe 100644
--- a/src/bindings/python/test/sbml/TestConstraint.py
+++ b/src/bindings/python/test/sbml/TestConstraint.py
@@ -50,10 +50,10 @@ def tearDown(self):
     pass  
 
   def test_Constraint_create(self):
-    self.assert_( self.C.getTypeCode() == libsbml.SBML_CONSTRAINT )
-    self.assert_( self.C.getMetaId() == "" )
-    self.assert_( self.C.getNotes() == None )
-    self.assert_( self.C.getAnnotation() == None )
+    self.assertTrue( self.C.getTypeCode() == libsbml.SBML_CONSTRAINT )
+    self.assertTrue( self.C.getMetaId() == "" )
+    self.assertTrue( self.C.getNotes() == None )
+    self.assertTrue( self.C.getAnnotation() == None )
     self.assertEqual( False, self.C.isSetMessage() )
     self.assertEqual( False, self.C.isSetMath() )
     pass  
@@ -64,14 +64,14 @@ def test_Constraint_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,2)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Constraint(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_CONSTRAINT )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 2 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_CONSTRAINT )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 2 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -82,10 +82,10 @@ def test_Constraint_free_NULL(self):
   def test_Constraint_setMath(self):
     math = libsbml.parseFormula("2 * k")
     self.C.setMath(math)
-    self.assert_( self.C.getMath() != math )
+    self.assertTrue( self.C.getMath() != math )
     self.assertEqual( True, self.C.isSetMath() )
     self.C.setMath(self.C.getMath())
-    self.assert_( self.C.getMath() != math )
+    self.assertTrue( self.C.getMath() != math )
     self.C.setMath(None)
     self.assertEqual( False, self.C.isSetMath() )
     if (self.C.getMath() != None):
@@ -106,11 +106,11 @@ def test_Constraint_setMessage(self):
     node = libsbml.XMLNode(triple1,att1)
     node.addChild(p)
     self.C.setMessage(node)
-    self.assert_( self.C.getMessage() != node )
-    self.assert_( self.C.isSetMessage() == True )
+    self.assertTrue( self.C.getMessage() != node )
+    self.assertTrue( self.C.isSetMessage() == True )
     self.C.setMessage(self.C.getMessage())
-    self.assert_( self.C.getMessage() != node )
-    self.assert_( self.C.getMessageString() != None )
+    self.assertTrue( self.C.getMessage() != node )
+    self.assertTrue( self.C.getMessageString() != None )
     self.C.unsetMessage()
     self.assertEqual( False, self.C.isSetMessage() )
     if (self.C.getMessage() != None):
diff --git a/src/bindings/python/test/sbml/TestConstraint_newSetters.py b/src/bindings/python/test/sbml/TestConstraint_newSetters.py
index 104e9028d3..8f2a2734e7 100644
--- a/src/bindings/python/test/sbml/TestConstraint_newSetters.py
+++ b/src/bindings/python/test/sbml/TestConstraint_newSetters.py
@@ -52,12 +52,12 @@ def tearDown(self):
   def test_Constraint_setMath1(self):
     math = libsbml.parseFormula("2 * k")
     i = self.C.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.getMath() != math )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.getMath() != math )
     self.assertEqual( True, self.C.isSetMath() )
     i = self.C.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.getMath() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.getMath() == None )
     self.assertEqual( False, self.C.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -65,7 +65,7 @@ def test_Constraint_setMath1(self):
   def test_Constraint_setMath2(self):
     math = libsbml.ASTNode(libsbml.AST_DIVIDE)
     i = self.C.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.C.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -73,10 +73,10 @@ def test_Constraint_setMath2(self):
   def test_Constraint_setMessage1(self):
     node = libsbml.XMLNode()
     i = self.C.setMessage(node)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( self.C.isSetMessage() == False )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( self.C.isSetMessage() == False )
     i = self.C.unsetMessage()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetMessage() )
     if (self.C.getMessage() != None):
       pass    
@@ -96,10 +96,10 @@ def test_Constraint_setMessage2(self):
     node = libsbml.XMLNode(triple1,att1)
     node.addChild(p)
     i = self.C.setMessage(node)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.isSetMessage() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.isSetMessage() == True )
     i = self.C.unsetMessage()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetMessage() )
     if (self.C.getMessage() != None):
       pass    
diff --git a/src/bindings/python/test/sbml/TestCopyAndClone.py b/src/bindings/python/test/sbml/TestCopyAndClone.py
index b4a2b037ee..9a547b52d2 100644
--- a/src/bindings/python/test/sbml/TestCopyAndClone.py
+++ b/src/bindings/python/test/sbml/TestCopyAndClone.py
@@ -40,11 +40,11 @@ class TestCopyAndClone(unittest.TestCase):
   def test_CompartmentType_assignmentOperator(self):
     o1 = libsbml.CompartmentType(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.CompartmentType(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -52,10 +52,10 @@ def test_CompartmentType_assignmentOperator(self):
   def test_CompartmentType_clone(self):
     o1 = libsbml.CompartmentType(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -63,10 +63,10 @@ def test_CompartmentType_clone(self):
   def test_CompartmentType_copyConstructor(self):
     o1 = libsbml.CompartmentType(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.CompartmentType(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -75,13 +75,13 @@ def test_Compartment_assignmentOperator(self):
     o1 = libsbml.Compartment(2,4)
     o1.setId("c")
     o1.setOutside("c2")
-    self.assert_( o1.getId() ==  "c" )
-    self.assert_( o1.getOutside() ==  "c2" )
+    self.assertTrue( o1.getId() ==  "c" )
+    self.assertTrue( o1.getOutside() ==  "c2" )
     o2 = libsbml.Compartment(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getOutside() ==  "c2" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getOutside() ==  "c2" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -90,12 +90,12 @@ def test_Compartment_clone(self):
     o1 = libsbml.Compartment(2,4)
     o1.setId("c")
     o1.setOutside("c2")
-    self.assert_( o1.getId() ==  "c" )
-    self.assert_( o1.getOutside() ==  "c2" )
+    self.assertTrue( o1.getId() ==  "c" )
+    self.assertTrue( o1.getOutside() ==  "c2" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getOutside() ==  "c2" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getOutside() ==  "c2" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -104,12 +104,12 @@ def test_Compartment_copyConstructor(self):
     o1 = libsbml.Compartment(2,4)
     o1.setId("c")
     o1.setOutside("c2")
-    self.assert_( o1.getId() ==  "c" )
-    self.assert_( o1.getOutside() ==  "c2" )
+    self.assertTrue( o1.getId() ==  "c" )
+    self.assertTrue( o1.getOutside() ==  "c2" )
     o2 = libsbml.Compartment(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getOutside() ==  "c2" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getOutside() ==  "c2" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -117,7 +117,7 @@ def test_Compartment_copyConstructor(self):
   def test_Constraint_assignmentOperator(self):
     o1 = libsbml.Constraint(2,4)
     o1.setMetaId("c")
-    self.assert_( o1.getMetaId() ==  "c" )
+    self.assertTrue( o1.getMetaId() ==  "c" )
     text = libsbml.XMLNode.convertStringToXMLNode(" Some text ")
     triple = libsbml.XMLTriple("p", "http://www.w3.org/1999/xhtml", "")
     att = libsbml.XMLAttributes()
@@ -134,16 +134,16 @@ def test_Constraint_assignmentOperator(self):
     o1.setMessage(message)
     math = None
     message = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     msg = o1.getMessage()
-    self.assert_( msg != None )
+    self.assertTrue( msg != None )
     o2 = libsbml.Constraint(2,4)
     o2 = o1
-    self.assert_( o2.getMetaId() ==  "c" )
-    self.assert_( o2.getMath() != None )
+    self.assertTrue( o2.getMetaId() ==  "c" )
+    self.assertTrue( o2.getMath() != None )
     msg = o2.getMessage()
-    self.assert_( msg != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( msg != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -151,7 +151,7 @@ def test_Constraint_assignmentOperator(self):
   def test_Constraint_clone(self):
     o1 = libsbml.Constraint(2,4)
     o1.setMetaId("c")
-    self.assert_( o1.getMetaId() ==  "c" )
+    self.assertTrue( o1.getMetaId() ==  "c" )
     text = libsbml.XMLNode.convertStringToXMLNode(" Some text ")
     triple = libsbml.XMLTriple("p", "http://www.w3.org/1999/xhtml", "")
     att = libsbml.XMLAttributes()
@@ -168,15 +168,15 @@ def test_Constraint_clone(self):
     o1.setMessage(message)
     math = None
     message = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     msg = o1.getMessage()
-    self.assert_( msg != None )
+    self.assertTrue( msg != None )
     o2 = o1.clone()
-    self.assert_( o2.getMetaId() ==  "c" )
-    self.assert_( o2.getMath() != None )
+    self.assertTrue( o2.getMetaId() ==  "c" )
+    self.assertTrue( o2.getMath() != None )
     msg = o2.getMessage()
-    self.assert_( msg != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( msg != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -184,7 +184,7 @@ def test_Constraint_clone(self):
   def test_Constraint_copyConstructor(self):
     o1 = libsbml.Constraint(2,4)
     o1.setMetaId("c")
-    self.assert_( o1.getMetaId() ==  "c" )
+    self.assertTrue( o1.getMetaId() ==  "c" )
     text = libsbml.XMLNode.convertStringToXMLNode(" Some text ")
     triple = libsbml.XMLTriple("p", "http://www.w3.org/1999/xhtml", "")
     att = libsbml.XMLAttributes()
@@ -201,15 +201,15 @@ def test_Constraint_copyConstructor(self):
     o1.setMessage(message)
     math = None
     message = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     msg = o1.getMessage()
-    self.assert_( msg != None )
+    self.assertTrue( msg != None )
     o2 = libsbml.Constraint(o1)
-    self.assert_( o2.getMetaId() ==  "c" )
-    self.assert_( o2.getMath() != None )
+    self.assertTrue( o2.getMetaId() ==  "c" )
+    self.assertTrue( o2.getMath() != None )
     msg = o2.getMessage()
-    self.assert_( msg != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( msg != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -219,11 +219,11 @@ def test_Delay_assignmentOperator(self):
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = libsbml.Delay(2,4)
     o2 = o1
-    self.assert_( o1.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o1.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -233,10 +233,10 @@ def test_Delay_clone(self):
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = o1.clone()
-    self.assert_( o1.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o1.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -246,10 +246,10 @@ def test_Delay_copyConstructor(self):
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = libsbml.Delay(o1)
-    self.assert_( o2.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -257,16 +257,16 @@ def test_Delay_copyConstructor(self):
   def test_EventAssignment_assignmentOperator(self):
     o1 = libsbml.EventAssignment(2,4)
     o1.setVariable("c2")
-    self.assert_( o1.getVariable() ==  "c2" )
+    self.assertTrue( o1.getVariable() ==  "c2" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = libsbml.EventAssignment(2,4)
     o2 = o1
-    self.assert_( o2.getVariable() ==  "c2" )
-    self.assert_( o2.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getVariable() ==  "c2" )
+    self.assertTrue( o2.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -274,15 +274,15 @@ def test_EventAssignment_assignmentOperator(self):
   def test_EventAssignment_clone(self):
     o1 = libsbml.EventAssignment(2,4)
     o1.setVariable("c2")
-    self.assert_( o1.getVariable() ==  "c2" )
+    self.assertTrue( o1.getVariable() ==  "c2" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = o1.clone()
-    self.assert_( o2.getVariable() ==  "c2" )
-    self.assert_( o2.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getVariable() ==  "c2" )
+    self.assertTrue( o2.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -290,15 +290,15 @@ def test_EventAssignment_clone(self):
   def test_EventAssignment_copyConstructor(self):
     o1 = libsbml.EventAssignment(2,4)
     o1.setVariable("c2")
-    self.assert_( o1.getVariable() ==  "c2" )
+    self.assertTrue( o1.getVariable() ==  "c2" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = libsbml.EventAssignment(o1)
-    self.assert_( o2.getVariable() ==  "c2" )
-    self.assert_( o2.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getVariable() ==  "c2" )
+    self.assertTrue( o2.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -306,11 +306,11 @@ def test_EventAssignment_copyConstructor(self):
   def test_Event_assignmentOperator(self):
     o1 = libsbml.Event(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.Event(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -318,10 +318,10 @@ def test_Event_assignmentOperator(self):
   def test_Event_clone(self):
     o1 = libsbml.Event(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -329,10 +329,10 @@ def test_Event_clone(self):
   def test_Event_copyConstructor(self):
     o1 = libsbml.Event(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.Event(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -340,16 +340,16 @@ def test_Event_copyConstructor(self):
   def test_FunctionDefinition_assignmentOperator(self):
     o1 = libsbml.FunctionDefinition(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = libsbml.FunctionDefinition(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -357,15 +357,15 @@ def test_FunctionDefinition_assignmentOperator(self):
   def test_FunctionDefinition_clone(self):
     o1 = libsbml.FunctionDefinition(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -373,15 +373,15 @@ def test_FunctionDefinition_clone(self):
   def test_FunctionDefinition_copyConstructor(self):
     o1 = libsbml.FunctionDefinition(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = libsbml.FunctionDefinition(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -389,11 +389,11 @@ def test_FunctionDefinition_copyConstructor(self):
   def test_InitialAssignment_assignmentOperator(self):
     o1 = libsbml.InitialAssignment(2,4)
     o1.setSymbol("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.InitialAssignment(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -401,10 +401,10 @@ def test_InitialAssignment_assignmentOperator(self):
   def test_InitialAssignment_clone(self):
     o1 = libsbml.InitialAssignment(2,4)
     o1.setSymbol("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -412,10 +412,10 @@ def test_InitialAssignment_clone(self):
   def test_InitialAssignment_copyConstructor(self):
     o1 = libsbml.InitialAssignment(2,4)
     o1.setSymbol("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.InitialAssignment(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -426,13 +426,13 @@ def test_KineticLaw_assignmentOperator(self):
     p.setId("jake")
     o1.addParameter(p)
     p = None
-    self.assert_( o1.getNumParameters() == 1 )
-    self.assert_( o1.getParameter(0).getId() ==  "jake" )
+    self.assertTrue( o1.getNumParameters() == 1 )
+    self.assertTrue( o1.getParameter(0).getId() ==  "jake" )
     o2 = libsbml.KineticLaw(2,4)
     o2 = o1
-    self.assert_( o2.getNumParameters() == 1 )
-    self.assert_( o2.getParameter(0).getId() ==  "jake" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getNumParameters() == 1 )
+    self.assertTrue( o2.getParameter(0).getId() ==  "jake" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -443,12 +443,12 @@ def test_KineticLaw_clone(self):
     p.setId("jake")
     o1.addParameter(p)
     p = None
-    self.assert_( o1.getNumParameters() == 1 )
-    self.assert_( o1.getParameter(0).getId() ==  "jake" )
+    self.assertTrue( o1.getNumParameters() == 1 )
+    self.assertTrue( o1.getParameter(0).getId() ==  "jake" )
     o2 = o1.clone()
-    self.assert_( o2.getNumParameters() == 1 )
-    self.assert_( o2.getParameter(0).getId() ==  "jake" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getNumParameters() == 1 )
+    self.assertTrue( o2.getParameter(0).getId() ==  "jake" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -459,12 +459,12 @@ def test_KineticLaw_copyConstructor(self):
     p.setId("jake")
     o1.addParameter(p)
     p = None
-    self.assert_( o1.getNumParameters() == 1 )
-    self.assert_( o1.getParameter(0).getId() ==  "jake" )
+    self.assertTrue( o1.getNumParameters() == 1 )
+    self.assertTrue( o1.getParameter(0).getId() ==  "jake" )
     o2 = libsbml.KineticLaw(o1)
-    self.assert_( o2.getNumParameters() == 1 )
-    self.assert_( o2.getParameter(0).getId() ==  "jake" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getNumParameters() == 1 )
+    self.assertTrue( o2.getParameter(0).getId() ==  "jake" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -477,9 +477,9 @@ def test_ListOf_assignmentOperator(self):
     s = None
     o2 = libsbml.ListOf(2,1)
     o2 = o1
-    self.assert_( o2.size() == 1 )
-    self.assert_( o2.get(0).getId() ==  "species_1" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.size() == 1 )
+    self.assertTrue( o2.get(0).getId() ==  "species_1" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -491,9 +491,9 @@ def test_ListOf_clone(self):
     o1.append(s)
     s = None
     o2 = o1.clone()
-    self.assert_( o2.size() == 1 )
-    self.assert_( o2.get(0).getId() ==  "species_1" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.size() == 1 )
+    self.assertTrue( o2.get(0).getId() ==  "species_1" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -505,9 +505,9 @@ def test_ListOf_copyConstructor(self):
     o1.append(s)
     s = None
     o2 = libsbml.ListOf(o1)
-    self.assert_( o2.size() == 1 )
-    self.assert_( o2.get(0).getId() ==  "species_1" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.size() == 1 )
+    self.assertTrue( o2.get(0).getId() ==  "species_1" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -515,11 +515,11 @@ def test_ListOf_copyConstructor(self):
   def test_Parameter_assignmentOperator(self):
     o1 = libsbml.Parameter(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.Parameter(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -527,10 +527,10 @@ def test_Parameter_assignmentOperator(self):
   def test_Parameter_clone(self):
     o1 = libsbml.Parameter(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -538,10 +538,10 @@ def test_Parameter_clone(self):
   def test_Parameter_copyConstructor(self):
     o1 = libsbml.Parameter(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.Parameter(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -549,19 +549,19 @@ def test_Parameter_copyConstructor(self):
   def test_Reaction_assignmentOperator(self):
     o1 = libsbml.Reaction(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     kl = libsbml.KineticLaw(2,4)
     kl.setMath(libsbml.parseFormula("1"))
     o1.setKineticLaw(kl)
     kl = None
-    self.assert_( o1.isSetKineticLaw() == True )
-    self.assert_( o1.getKineticLaw() != None )
+    self.assertTrue( o1.isSetKineticLaw() == True )
+    self.assertTrue( o1.getKineticLaw() != None )
     o2 = libsbml.Reaction(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.isSetKineticLaw() == True )
-    self.assert_( o2.getKineticLaw() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.isSetKineticLaw() == True )
+    self.assertTrue( o2.getKineticLaw() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -569,18 +569,18 @@ def test_Reaction_assignmentOperator(self):
   def test_Reaction_clone(self):
     o1 = libsbml.Reaction(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     kl = libsbml.KineticLaw(2,4)
     kl.setMath(libsbml.parseFormula("1"))
     o1.setKineticLaw(kl)
     kl = None
-    self.assert_( o1.isSetKineticLaw() == True )
-    self.assert_( o1.getKineticLaw() != None )
+    self.assertTrue( o1.isSetKineticLaw() == True )
+    self.assertTrue( o1.getKineticLaw() != None )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.isSetKineticLaw() == True )
-    self.assert_( o2.getKineticLaw() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.isSetKineticLaw() == True )
+    self.assertTrue( o2.getKineticLaw() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -588,18 +588,18 @@ def test_Reaction_clone(self):
   def test_Reaction_copyConstructor(self):
     o1 = libsbml.Reaction(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     kl = libsbml.KineticLaw(2,4)
     kl.setMath(libsbml.parseFormula("1"))
     o1.setKineticLaw(kl)
     kl = None
-    self.assert_( o1.isSetKineticLaw() == True )
-    self.assert_( o1.getKineticLaw() != None )
+    self.assertTrue( o1.isSetKineticLaw() == True )
+    self.assertTrue( o1.getKineticLaw() != None )
     o2 = libsbml.Reaction(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.isSetKineticLaw() == True )
-    self.assert_( o2.getKineticLaw() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.isSetKineticLaw() == True )
+    self.assertTrue( o2.getKineticLaw() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -607,16 +607,16 @@ def test_Reaction_copyConstructor(self):
   def test_Rule_assignmentOperator(self):
     o1 = libsbml.RateRule(2,4)
     o1.setVariable("a")
-    self.assert_( o1.getVariable() ==  "a" )
+    self.assertTrue( o1.getVariable() ==  "a" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.isSetMath() == True )
+    self.assertTrue( o1.isSetMath() == True )
     o2 = libsbml.RateRule(2,4)
     o2 = o1
-    self.assert_( o2.getVariable() ==  "a" )
-    self.assert_( o2.isSetMath() == True )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getVariable() ==  "a" )
+    self.assertTrue( o2.isSetMath() == True )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -624,15 +624,15 @@ def test_Rule_assignmentOperator(self):
   def test_Rule_clone(self):
     o1 = libsbml.RateRule(2,1)
     o1.setVariable("a")
-    self.assert_( o1.getVariable() ==  "a" )
+    self.assertTrue( o1.getVariable() ==  "a" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.isSetMath() == True )
+    self.assertTrue( o1.isSetMath() == True )
     o2 = o1.clone()
-    self.assert_( o2.getVariable() ==  "a" )
-    self.assert_( o2.isSetMath() == True )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getVariable() ==  "a" )
+    self.assertTrue( o2.isSetMath() == True )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -640,15 +640,15 @@ def test_Rule_clone(self):
   def test_Rule_copyConstructor(self):
     o1 = libsbml.RateRule(2,1)
     o1.setVariable("a")
-    self.assert_( o1.getVariable() ==  "a" )
+    self.assertTrue( o1.getVariable() ==  "a" )
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.isSetMath() == True )
+    self.assertTrue( o1.isSetMath() == True )
     o2 = libsbml.Rule(o1)
-    self.assert_( o2.getVariable() ==  "a" )
-    self.assert_( o2.isSetMath() == True )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getVariable() ==  "a" )
+    self.assertTrue( o2.isSetMath() == True )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -656,12 +656,12 @@ def test_Rule_copyConstructor(self):
   def test_SBMLDocument_assignmentOperator(self):
     o1 = libsbml.SBMLDocument()
     o1.setLevelAndVersion(2,1,False)
-    self.assert_( o1.getLevel() == 2 )
-    self.assert_( o1.getVersion() == 1 )
+    self.assertTrue( o1.getLevel() == 2 )
+    self.assertTrue( o1.getVersion() == 1 )
     o2 = libsbml.SBMLDocument()
     o2 = o1
-    self.assert_( o2.getLevel() == 2 )
-    self.assert_( o2.getVersion() == 1 )
+    self.assertTrue( o2.getLevel() == 2 )
+    self.assertTrue( o2.getVersion() == 1 )
     o2 = None
     o1 = None
     pass  
@@ -675,19 +675,19 @@ def test_SBMLDocument_clone(self):
     m.createReaction()
     m.setId("foo")
     o1.setModel(m)
-    self.assert_( o1.getLevel() == 1 )
-    self.assert_( o1.getVersion() == 1 )
-    self.assert_( o1.getModel().getId() ==  "foo" )
-    self.assert_( o1.getModel().getLevel() == 1 )
-    self.assert_( o1.getModel().getVersion() == 1 )
-    self.assert_( o1.getModel().getSBMLDocument() == o1 )
+    self.assertTrue( o1.getLevel() == 1 )
+    self.assertTrue( o1.getVersion() == 1 )
+    self.assertTrue( o1.getModel().getId() ==  "foo" )
+    self.assertTrue( o1.getModel().getLevel() == 1 )
+    self.assertTrue( o1.getModel().getVersion() == 1 )
+    self.assertTrue( o1.getModel().getSBMLDocument() == o1 )
     o2 = o1.clone()
-    self.assert_( o2.getLevel() == 1 )
-    self.assert_( o2.getVersion() == 1 )
-    self.assert_( o2.getModel().getId() ==  "foo" )
-    self.assert_( o2.getModel().getLevel() == 1 )
-    self.assert_( o2.getModel().getVersion() == 1 )
-    self.assert_( o2.getModel().getSBMLDocument() == o2 )
+    self.assertTrue( o2.getLevel() == 1 )
+    self.assertTrue( o2.getVersion() == 1 )
+    self.assertTrue( o2.getModel().getId() ==  "foo" )
+    self.assertTrue( o2.getModel().getLevel() == 1 )
+    self.assertTrue( o2.getModel().getVersion() == 1 )
+    self.assertTrue( o2.getModel().getSBMLDocument() == o2 )
     o2 = None
     o1 = None
     pass  
@@ -695,11 +695,11 @@ def test_SBMLDocument_clone(self):
   def test_SBMLDocument_copyConstructor(self):
     o1 = libsbml.SBMLDocument()
     o1.setLevelAndVersion(2,1,False)
-    self.assert_( o1.getLevel() == 2 )
-    self.assert_( o1.getVersion() == 1 )
+    self.assertTrue( o1.getLevel() == 2 )
+    self.assertTrue( o1.getVersion() == 1 )
     o2 = libsbml.SBMLDocument(o1)
-    self.assert_( o2.getLevel() == 2 )
-    self.assert_( o2.getVersion() == 1 )
+    self.assertTrue( o2.getLevel() == 2 )
+    self.assertTrue( o2.getVersion() == 1 )
     o2 = None
     o1 = None
     pass  
@@ -707,11 +707,11 @@ def test_SBMLDocument_copyConstructor(self):
   def test_SpeciesReference_assignmentOperator(self):
     o1 = libsbml.SpeciesReference(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.SpeciesReference(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -719,10 +719,10 @@ def test_SpeciesReference_assignmentOperator(self):
   def test_SpeciesReference_clone(self):
     o1 = libsbml.SpeciesReference(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -730,10 +730,10 @@ def test_SpeciesReference_clone(self):
   def test_SpeciesReference_copyConstructor(self):
     o1 = libsbml.SpeciesReference(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.SpeciesReference(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -741,11 +741,11 @@ def test_SpeciesReference_copyConstructor(self):
   def test_SpeciesType_assignmentOperator(self):
     o1 = libsbml.SpeciesType(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.SpeciesType(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -753,10 +753,10 @@ def test_SpeciesType_assignmentOperator(self):
   def test_SpeciesType_clone(self):
     o1 = libsbml.SpeciesType(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -764,10 +764,10 @@ def test_SpeciesType_clone(self):
   def test_SpeciesType_copyConstructor(self):
     o1 = libsbml.SpeciesType(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.SpeciesType(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -776,13 +776,13 @@ def test_Species_assignmentOperator(self):
     o1 = libsbml.Species(2,4)
     o1.setId("c")
     o1.setSpeciesType("c1")
-    self.assert_( o1.getId() ==  "c" )
-    self.assert_( o1.getSpeciesType() ==  "c1" )
+    self.assertTrue( o1.getId() ==  "c" )
+    self.assertTrue( o1.getSpeciesType() ==  "c1" )
     o2 = libsbml.Species(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getSpeciesType() ==  "c1" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getSpeciesType() ==  "c1" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -791,12 +791,12 @@ def test_Species_clone(self):
     o1 = libsbml.Species(2,4)
     o1.setId("c")
     o1.setSpeciesType("c1")
-    self.assert_( o1.getId() ==  "c" )
-    self.assert_( o1.getSpeciesType() ==  "c1" )
+    self.assertTrue( o1.getId() ==  "c" )
+    self.assertTrue( o1.getSpeciesType() ==  "c1" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getSpeciesType() ==  "c1" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getSpeciesType() ==  "c1" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -805,12 +805,12 @@ def test_Species_copyConstructor(self):
     o1 = libsbml.Species(2,4)
     o1.setId("c")
     o1.setSpeciesType("c1")
-    self.assert_( o1.getId() ==  "c" )
-    self.assert_( o1.getSpeciesType() ==  "c1" )
+    self.assertTrue( o1.getId() ==  "c" )
+    self.assertTrue( o1.getSpeciesType() ==  "c1" )
     o2 = libsbml.Species(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getSpeciesType() ==  "c1" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getSpeciesType() ==  "c1" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -820,11 +820,11 @@ def test_Trigger_assignmentOperator(self):
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = libsbml.Trigger(2,4)
     o2 = o1
-    self.assert_( o1.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o1.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -834,10 +834,10 @@ def test_Trigger_clone(self):
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = o1.clone()
-    self.assert_( o1.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o1.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -847,10 +847,10 @@ def test_Trigger_copyConstructor(self):
     node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
     o1.setMath(node)
     node = None
-    self.assert_( o1.getMath() != None )
+    self.assertTrue( o1.getMath() != None )
     o2 = libsbml.Trigger(o1)
-    self.assert_( o2.getMath() != None )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getMath() != None )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -858,11 +858,11 @@ def test_Trigger_copyConstructor(self):
   def test_UnitDefinition_assignmentOperator(self):
     o1 = libsbml.UnitDefinition(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.UnitDefinition(2,4)
     o2 = o1
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -870,10 +870,10 @@ def test_UnitDefinition_assignmentOperator(self):
   def test_UnitDefinition_clone(self):
     o1 = libsbml.UnitDefinition(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = o1.clone()
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -881,10 +881,10 @@ def test_UnitDefinition_clone(self):
   def test_UnitDefinition_copyConstructor(self):
     o1 = libsbml.UnitDefinition(2,4)
     o1.setId("c")
-    self.assert_( o1.getId() ==  "c" )
+    self.assertTrue( o1.getId() ==  "c" )
     o2 = libsbml.UnitDefinition(o1)
-    self.assert_( o2.getId() ==  "c" )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getId() ==  "c" )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -892,11 +892,11 @@ def test_UnitDefinition_copyConstructor(self):
   def test_Unit_assignmentOperator(self):
     o1 = libsbml.Unit(2,4)
     o1.setKind(libsbml.UNIT_KIND_MOLE)
-    self.assert_( o1.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( o1.getKind() == libsbml.UNIT_KIND_MOLE )
     o2 = libsbml.Unit(2,4)
     o2 = o1
-    self.assert_( o2.getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -904,10 +904,10 @@ def test_Unit_assignmentOperator(self):
   def test_Unit_clone(self):
     o1 = libsbml.Unit(2,4)
     o1.setKind(libsbml.UNIT_KIND_MOLE)
-    self.assert_( o1.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( o1.getKind() == libsbml.UNIT_KIND_MOLE )
     o2 = o1.clone()
-    self.assert_( o2.getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
@@ -915,10 +915,10 @@ def test_Unit_clone(self):
   def test_Unit_copyConstructor(self):
     o1 = libsbml.Unit(2,4)
     o1.setKind(libsbml.UNIT_KIND_MOLE)
-    self.assert_( o1.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( o1.getKind() == libsbml.UNIT_KIND_MOLE )
     o2 = libsbml.Unit(o1)
-    self.assert_( o2.getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
+    self.assertTrue( o2.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( o2.getParentSBMLObject() == o1.getParentSBMLObject() )
     o2 = None
     o1 = None
     pass  
diff --git a/src/bindings/python/test/sbml/TestDelay.py b/src/bindings/python/test/sbml/TestDelay.py
index 8d5e2e2a24..001f1e8e39 100644
--- a/src/bindings/python/test/sbml/TestDelay.py
+++ b/src/bindings/python/test/sbml/TestDelay.py
@@ -50,11 +50,11 @@ def tearDown(self):
     pass  
 
   def test_Delay_create(self):
-    self.assert_( self.D.getTypeCode() == libsbml.SBML_DELAY )
-    self.assert_( self.D.getMetaId() == "" )
-    self.assert_( self.D.getNotes() == None )
-    self.assert_( self.D.getAnnotation() == None )
-    self.assert_( self.D.getMath() == None )
+    self.assertTrue( self.D.getTypeCode() == libsbml.SBML_DELAY )
+    self.assertTrue( self.D.getMetaId() == "" )
+    self.assertTrue( self.D.getNotes() == None )
+    self.assertTrue( self.D.getAnnotation() == None )
+    self.assertTrue( self.D.getMath() == None )
     pass  
 
   def test_Delay_createWithNS(self):
@@ -63,14 +63,14 @@ def test_Delay_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Delay(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_DELAY )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_DELAY )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -82,18 +82,18 @@ def test_Delay_setMath(self):
     math = libsbml.parseFormula("lambda(x, x^3)")
     self.D.setMath(math)
     math1 = self.D.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
-    self.assert_( self.D.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( self.D.getMath() != math )
     self.assertEqual( True, self.D.isSetMath() )
     self.D.setMath(self.D.getMath())
     math1 = self.D.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
     self.D.setMath(None)
     self.assertEqual( False, self.D.isSetMath() )
     if (self.D.getMath() != None):
@@ -103,12 +103,12 @@ def test_Delay_setMath(self):
   def test_Delay_setMath1(self):
     math = libsbml.parseFormula("2 * k")
     i = self.D.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.D.getMath() != math )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.D.getMath() != math )
     self.assertEqual( True, self.D.isSetMath() )
     i = self.D.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.D.getMath() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.D.getMath() == None )
     self.assertEqual( False, self.D.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -116,7 +116,7 @@ def test_Delay_setMath1(self):
   def test_Delay_setMath2(self):
     math = libsbml.ASTNode(libsbml.AST_DIVIDE)
     i = self.D.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.D.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestEvent.py b/src/bindings/python/test/sbml/TestEvent.py
index 6cfa18616c..69da686109 100644
--- a/src/bindings/python/test/sbml/TestEvent.py
+++ b/src/bindings/python/test/sbml/TestEvent.py
@@ -50,20 +50,20 @@ def tearDown(self):
     pass  
 
   def test_Event_create(self):
-    self.assert_( self.E.getTypeCode() == libsbml.SBML_EVENT )
-    self.assert_( self.E.getMetaId() == "" )
-    self.assert_( self.E.getNotes() == None )
-    self.assert_( self.E.getAnnotation() == None )
-    self.assert_( self.E.getId() == "" )
-    self.assert_( self.E.getName() == "" )
-    self.assert_( self.E.getTrigger() == None )
-    self.assert_( self.E.getDelay() == None )
-    self.assert_( self.E.getTimeUnits() == "" )
+    self.assertTrue( self.E.getTypeCode() == libsbml.SBML_EVENT )
+    self.assertTrue( self.E.getMetaId() == "" )
+    self.assertTrue( self.E.getNotes() == None )
+    self.assertTrue( self.E.getAnnotation() == None )
+    self.assertTrue( self.E.getId() == "" )
+    self.assertTrue( self.E.getName() == "" )
+    self.assertTrue( self.E.getTrigger() == None )
+    self.assertTrue( self.E.getDelay() == None )
+    self.assertTrue( self.E.getTimeUnits() == "" )
     self.assertEqual( False, self.E.isSetId() )
     self.assertEqual( False, self.E.isSetTrigger() )
     self.assertEqual( False, self.E.isSetDelay() )
     self.assertEqual( True, self.E.isSetUseValuesFromTriggerTime() )
-    self.assert_( self.E.getNumEventAssignments() == 0 )
+    self.assertTrue( self.E.getNumEventAssignments() == 0 )
     pass  
 
   def test_Event_createWithNS(self):
@@ -72,14 +72,14 @@ def test_Event_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,4)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Event(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_EVENT )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 4 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_EVENT )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 4 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -100,8 +100,8 @@ def test_Event_full(self):
     e.setId( "e1")
     e.setName( "Set k2 to zero when P1 <= t")
     e.addEventAssignment(ea)
-    self.assert_( e.getNumEventAssignments() == 1 )
-    self.assert_( e.getEventAssignment(0) != ea )
+    self.assertTrue( e.getNumEventAssignments() == 1 )
+    self.assertTrue( e.getEventAssignment(0) != ea )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -111,12 +111,12 @@ def test_Event_removeEventAssignment(self):
     o2 = self.E.createEventAssignment()
     o3 = self.E.createEventAssignment()
     o3.setVariable("test")
-    self.assert_( self.E.removeEventAssignment(0) == o1 )
-    self.assert_( self.E.getNumEventAssignments() == 2 )
-    self.assert_( self.E.removeEventAssignment(0) == o2 )
-    self.assert_( self.E.getNumEventAssignments() == 1 )
-    self.assert_( self.E.removeEventAssignment("test") == o3 )
-    self.assert_( self.E.getNumEventAssignments() == 0 )
+    self.assertTrue( self.E.removeEventAssignment(0) == o1 )
+    self.assertTrue( self.E.getNumEventAssignments() == 2 )
+    self.assertTrue( self.E.removeEventAssignment(0) == o2 )
+    self.assertTrue( self.E.getNumEventAssignments() == 1 )
+    self.assertTrue( self.E.removeEventAssignment("test") == o3 )
+    self.assertTrue( self.E.getNumEventAssignments() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -127,12 +127,12 @@ def test_Event_setDelay(self):
     Delay = libsbml.Delay(2,4)
     Delay.setMath(math1)
     self.E.setDelay(Delay)
-    self.assert_( self.E.getDelay() != None )
+    self.assertTrue( self.E.getDelay() != None )
     self.assertEqual( True, self.E.isSetDelay() )
     if (self.E.getDelay() == Delay):
       pass    
     self.E.setDelay(self.E.getDelay())
-    self.assert_( self.E.getDelay() != Delay )
+    self.assertTrue( self.E.getDelay() != Delay )
     self.E.setDelay(None)
     self.assertEqual( False, self.E.isSetDelay() )
     if (self.E.getDelay() != None):
@@ -142,12 +142,12 @@ def test_Event_setDelay(self):
   def test_Event_setId(self):
     id =  "e1";
     self.E.setId(id)
-    self.assert_(( id == self.E.getId() ))
+    self.assertTrue(( id == self.E.getId() ))
     self.assertEqual( True, self.E.isSetId() )
     if (self.E.getId() == id):
       pass    
     self.E.setId(self.E.getId())
-    self.assert_(( id == self.E.getId() ))
+    self.assertTrue(( id == self.E.getId() ))
     self.E.setId("")
     self.assertEqual( False, self.E.isSetId() )
     if (self.E.getId() != None):
@@ -157,12 +157,12 @@ def test_Event_setId(self):
   def test_Event_setName(self):
     name =  "Set_k2";
     self.E.setName(name)
-    self.assert_(( name == self.E.getName() ))
+    self.assertTrue(( name == self.E.getName() ))
     self.assertEqual( True, self.E.isSetName() )
     if (self.E.getName() == name):
       pass    
     self.E.setName(self.E.getName())
-    self.assert_(( name == self.E.getName() ))
+    self.assertTrue(( name == self.E.getName() ))
     self.E.setName("")
     self.assertEqual( False, self.E.isSetName() )
     if (self.E.getName() != None):
@@ -173,12 +173,12 @@ def test_Event_setTimeUnits(self):
     E1 = libsbml.Event(2,1)
     units =  "second";
     E1.setTimeUnits(units)
-    self.assert_(( units == E1.getTimeUnits() ))
+    self.assertTrue(( units == E1.getTimeUnits() ))
     self.assertEqual( True, E1.isSetTimeUnits() )
     if (E1.getTimeUnits() == units):
       pass    
     E1.setTimeUnits(E1.getTimeUnits())
-    self.assert_(( units == E1.getTimeUnits() ))
+    self.assertTrue(( units == E1.getTimeUnits() ))
     E1.setTimeUnits("")
     self.assertEqual( False, E1.isSetTimeUnits() )
     if (E1.getTimeUnits() != None):
@@ -191,12 +191,12 @@ def test_Event_setTrigger(self):
     trigger = libsbml.Trigger(2,4)
     trigger.setMath(math1)
     self.E.setTrigger(trigger)
-    self.assert_( self.E.getTrigger() != None )
+    self.assertTrue( self.E.getTrigger() != None )
     self.assertEqual( True, self.E.isSetTrigger() )
     if (self.E.getTrigger() == trigger):
       pass    
     self.E.setTrigger(self.E.getTrigger())
-    self.assert_( self.E.getTrigger() != trigger )
+    self.assertTrue( self.E.getTrigger() != trigger )
     self.E.setTrigger(None)
     self.assertEqual( False, self.E.isSetTrigger() )
     if (self.E.getTrigger() != None):
@@ -206,9 +206,9 @@ def test_Event_setTrigger(self):
   def test_Event_setUseValuesFromTriggerTime(self):
     object = libsbml.Event(2,4)
     object.setUseValuesFromTriggerTime(False)
-    self.assert_( object.getUseValuesFromTriggerTime() == False )
+    self.assertTrue( object.getUseValuesFromTriggerTime() == False )
     object.setUseValuesFromTriggerTime(True)
-    self.assert_( object.getUseValuesFromTriggerTime() == True )
+    self.assertTrue( object.getUseValuesFromTriggerTime() == True )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestEventAssignment.py b/src/bindings/python/test/sbml/TestEventAssignment.py
index dc5b329d17..3d0ef51ce0 100644
--- a/src/bindings/python/test/sbml/TestEventAssignment.py
+++ b/src/bindings/python/test/sbml/TestEventAssignment.py
@@ -50,12 +50,12 @@ def tearDown(self):
     pass  
 
   def test_EventAssignment_create(self):
-    self.assert_( self.EA.getTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
-    self.assert_( self.EA.getMetaId() == "" )
-    self.assert_( self.EA.getNotes() == None )
-    self.assert_( self.EA.getAnnotation() == None )
-    self.assert_( self.EA.getVariable() == "" )
-    self.assert_( self.EA.getMath() == None )
+    self.assertTrue( self.EA.getTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
+    self.assertTrue( self.EA.getMetaId() == "" )
+    self.assertTrue( self.EA.getNotes() == None )
+    self.assertTrue( self.EA.getAnnotation() == None )
+    self.assertTrue( self.EA.getVariable() == "" )
+    self.assertTrue( self.EA.getMath() == None )
     pass  
 
   def test_EventAssignment_createWithNS(self):
@@ -64,14 +64,14 @@ def test_EventAssignment_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.EventAssignment(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -83,19 +83,19 @@ def test_EventAssignment_setMath(self):
     math = libsbml.parseFormula("2 * k")
     self.EA.setMath(math)
     math1 = self.EA.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "2 * k" == formula ))
-    self.assert_( self.EA.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "2 * k" == formula ))
+    self.assertTrue( self.EA.getMath() != math )
     self.assertEqual( True, self.EA.isSetMath() )
     self.EA.setMath(self.EA.getMath())
     math1 = self.EA.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "2 * k" == formula ))
-    self.assert_( self.EA.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "2 * k" == formula ))
+    self.assertTrue( self.EA.getMath() != math )
     self.EA.setMath(None)
     self.assertEqual( False, self.EA.isSetMath() )
     if (self.EA.getMath() != None):
@@ -106,12 +106,12 @@ def test_EventAssignment_setMath(self):
   def test_EventAssignment_setVariable(self):
     variable =  "k2";
     self.EA.setVariable(variable)
-    self.assert_(( variable == self.EA.getVariable() ))
+    self.assertTrue(( variable == self.EA.getVariable() ))
     self.assertEqual( True, self.EA.isSetVariable() )
     if (self.EA.getVariable() == variable):
       pass    
     self.EA.setVariable(self.EA.getVariable())
-    self.assert_(( variable == self.EA.getVariable() ))
+    self.assertTrue(( variable == self.EA.getVariable() ))
     self.EA.setVariable("")
     self.assertEqual( False, self.EA.isSetVariable() )
     if (self.EA.getVariable() != None):
diff --git a/src/bindings/python/test/sbml/TestEventAssignment_newSetters.py b/src/bindings/python/test/sbml/TestEventAssignment_newSetters.py
index fb75e36634..83a0de405d 100644
--- a/src/bindings/python/test/sbml/TestEventAssignment_newSetters.py
+++ b/src/bindings/python/test/sbml/TestEventAssignment_newSetters.py
@@ -52,12 +52,12 @@ def tearDown(self):
   def test_EventAssignment_setMath1(self):
     math = libsbml.parseFormula("2 * k")
     i = self.E.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.E.getMath() != math )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.E.getMath() != math )
     self.assertEqual( True, self.E.isSetMath() )
     i = self.E.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.E.getMath() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.E.getMath() == None )
     self.assertEqual( False, self.E.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -65,7 +65,7 @@ def test_EventAssignment_setMath1(self):
   def test_EventAssignment_setMath2(self):
     math = libsbml.ASTNode(libsbml.AST_DIVIDE)
     i = self.E.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.E.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -73,18 +73,18 @@ def test_EventAssignment_setMath2(self):
   def test_EventAssignment_setVariable1(self):
     id =  "1e1";
     i = self.E.setVariable(id)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.E.isSetVariable() )
     pass  
 
   def test_EventAssignment_setVariable2(self):
     id =  "e1";
     i = self.E.setVariable(id)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( id == self.E.getVariable() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( id == self.E.getVariable() ))
     self.assertEqual( True, self.E.isSetVariable() )
     i = self.E.setVariable("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetVariable() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestEvent_newSetters.py b/src/bindings/python/test/sbml/TestEvent_newSetters.py
index af7f7a2121..2f11b834eb 100644
--- a/src/bindings/python/test/sbml/TestEvent_newSetters.py
+++ b/src/bindings/python/test/sbml/TestEvent_newSetters.py
@@ -53,14 +53,14 @@ def test_Event_addEventAssignment1(self):
     e = libsbml.Event(2,2)
     ea = libsbml.EventAssignment(2,2)
     i = e.addEventAssignment(ea)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     ea.setVariable( "f")
     i = e.addEventAssignment(ea)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     ea.setMath(libsbml.parseFormula("a-n"))
     i = e.addEventAssignment(ea)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( e.getNumEventAssignments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( e.getNumEventAssignments() == 1 )
     _dummyList = [ ea ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -71,8 +71,8 @@ def test_Event_addEventAssignment2(self):
     ea.setVariable( "f")
     ea.setMath(libsbml.parseFormula("a-n"))
     i = e.addEventAssignment(ea)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( e.getNumEventAssignments() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( e.getNumEventAssignments() == 0 )
     _dummyList = [ ea ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -80,8 +80,8 @@ def test_Event_addEventAssignment2(self):
   def test_Event_addEventAssignment3(self):
     e = libsbml.Event(2,2)
     i = e.addEventAssignment(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( e.getNumEventAssignments() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( e.getNumEventAssignments() == 0 )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -94,11 +94,11 @@ def test_Event_addEventAssignment4(self):
     ea1.setVariable( "c")
     ea1.setMath(libsbml.parseFormula("a-n"))
     i = e.addEventAssignment(ea)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( e.getNumEventAssignments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( e.getNumEventAssignments() == 1 )
     i = e.addEventAssignment(ea1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( e.getNumEventAssignments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( e.getNumEventAssignments() == 1 )
     _dummyList = [ ea ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ea1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
@@ -107,9 +107,9 @@ def test_Event_addEventAssignment4(self):
   def test_Event_createEventAssignment(self):
     e = libsbml.Event(2,2)
     ea = e.createEventAssignment()
-    self.assert_( e.getNumEventAssignments() == 1 )
-    self.assert_( (ea).getLevel() == 2 )
-    self.assert_( (ea).getVersion() == 2 )
+    self.assertTrue( e.getNumEventAssignments() == 1 )
+    self.assertTrue( (ea).getLevel() == 2 )
+    self.assertTrue( (ea).getVersion() == 2 )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -118,11 +118,11 @@ def test_Event_setDelay1(self):
     Delay = libsbml.Delay(2,4)
     Delay.setMath(math1)
     i = self.E.setDelay(Delay)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.E.getDelay() != None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.E.getDelay() != None )
     self.assertEqual( True, self.E.isSetDelay() )
     i = self.E.unsetDelay()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetDelay() )
     pass  
 
@@ -130,64 +130,64 @@ def test_Event_setDelay2(self):
     Delay = libsbml.Delay(2,1)
     Delay.setMath(libsbml.parseFormula("1"))
     i = self.E.setDelay(Delay)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
     self.assertEqual( False, self.E.isSetDelay() )
     i = self.E.unsetDelay()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     pass  
 
   def test_Event_setId1(self):
     id =  "1e1";
     i = self.E.setId(id)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.E.isSetId() )
     pass  
 
   def test_Event_setId2(self):
     id =  "e1";
     i = self.E.setId(id)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( id == self.E.getId() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( id == self.E.getId() ))
     self.assertEqual( True, self.E.isSetId() )
     i = self.E.unsetId()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetId() )
     pass  
 
   def test_Event_setId3(self):
     i = self.E.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetId() )
     pass  
 
   def test_Event_setName1(self):
     name =  "3Set_k2";
     i = self.E.setName(name)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.E.isSetName() )
     pass  
 
   def test_Event_setName2(self):
     name =  "Set k2";
     i = self.E.setName(name)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( name == self.E.getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( name == self.E.getName() ))
     self.assertEqual( True, self.E.isSetName() )
     i = self.E.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetName() )
     pass  
 
   def test_Event_setName3(self):
     i = self.E.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetName() )
     pass  
 
   def test_Event_setTimeUnits1(self):
     units =  "second";
     i = self.E.setTimeUnits(units)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.E.isSetTimeUnits() )
     pass  
 
@@ -195,11 +195,11 @@ def test_Event_setTimeUnits2(self):
     units =  "second";
     e = libsbml.Event(2,1)
     i = e.setTimeUnits(units)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( units == e.getTimeUnits() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( units == e.getTimeUnits() ))
     self.assertEqual( True, e.isSetTimeUnits() )
     i = e.unsetTimeUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, e.isSetTimeUnits() )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -208,10 +208,10 @@ def test_Event_setTimeUnits3(self):
     units =  "1second";
     e = libsbml.Event(2,1)
     i = e.setTimeUnits(units)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, e.isSetTimeUnits() )
     i = e.unsetTimeUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, e.isSetTimeUnits() )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -219,7 +219,7 @@ def test_Event_setTimeUnits3(self):
   def test_Event_setTimeUnits4(self):
     e = libsbml.Event(2,1)
     i = e.setTimeUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, e.isSetTimeUnits() )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -228,7 +228,7 @@ def test_Event_setTrigger1(self):
     trigger = libsbml.Trigger(2,1)
     trigger.setMath(libsbml.parseFormula("true"))
     i = self.E.setTrigger(trigger)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
     self.assertEqual( False, self.E.isSetTrigger() )
     pass  
 
@@ -237,26 +237,26 @@ def test_Event_setTrigger2(self):
     trigger = libsbml.Trigger(2,4)
     trigger.setMath(math1)
     i = self.E.setTrigger(trigger)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.E.getTrigger() != None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.E.getTrigger() != None )
     self.assertEqual( True, self.E.isSetTrigger() )
     pass  
 
   def test_Event_setUseValuesFromTriggerTime1(self):
     e = libsbml.Event(2,4)
     i = e.setUseValuesFromTriggerTime(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( e.getUseValuesFromTriggerTime() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( e.getUseValuesFromTriggerTime() == False )
     i = e.setUseValuesFromTriggerTime(True)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( e.getUseValuesFromTriggerTime() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( e.getUseValuesFromTriggerTime() == True )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Event_setUseValuesFromTriggerTime2(self):
     e = libsbml.Event(2,2)
     i = e.setUseValuesFromTriggerTime(False)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestFunctionDefinition.py b/src/bindings/python/test/sbml/TestFunctionDefinition.py
index 67871018a7..ca0848823c 100644
--- a/src/bindings/python/test/sbml/TestFunctionDefinition.py
+++ b/src/bindings/python/test/sbml/TestFunctionDefinition.py
@@ -50,13 +50,13 @@ def tearDown(self):
     pass  
 
   def test_FunctionDefinition_create(self):
-    self.assert_( self.FD.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
-    self.assert_( self.FD.getMetaId() == "" )
-    self.assert_( self.FD.getNotes() == None )
-    self.assert_( self.FD.getAnnotation() == None )
-    self.assert_( self.FD.getId() == "" )
-    self.assert_( self.FD.getName() == "" )
-    self.assert_( self.FD.getMath() == None )
+    self.assertTrue( self.FD.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
+    self.assertTrue( self.FD.getMetaId() == "" )
+    self.assertTrue( self.FD.getNotes() == None )
+    self.assertTrue( self.FD.getAnnotation() == None )
+    self.assertTrue( self.FD.getId() == "" )
+    self.assertTrue( self.FD.getName() == "" )
+    self.assertTrue( self.FD.getMath() == None )
     pass  
 
   def test_FunctionDefinition_createWith(self):
@@ -64,19 +64,19 @@ def test_FunctionDefinition_createWith(self):
     fd = libsbml.FunctionDefinition(2,4)
     fd.setId( "pow3")
     fd.setMath(math)
-    self.assert_( fd.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
-    self.assert_( fd.getMetaId() == "" )
-    self.assert_( fd.getNotes() == None )
-    self.assert_( fd.getAnnotation() == None )
-    self.assert_( fd.getName() == "" )
+    self.assertTrue( fd.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
+    self.assertTrue( fd.getMetaId() == "" )
+    self.assertTrue( fd.getNotes() == None )
+    self.assertTrue( fd.getAnnotation() == None )
+    self.assertTrue( fd.getName() == "" )
     math1 = fd.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
-    self.assert_( fd.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( fd.getMath() != math )
     self.assertEqual( True, fd.isSetMath() )
-    self.assert_((  "pow3" == fd.getId() ))
+    self.assertTrue((  "pow3" == fd.getId() ))
     self.assertEqual( True, fd.isSetId() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ fd ]; _dummyList[:] = []; del _dummyList
@@ -88,14 +88,14 @@ def test_FunctionDefinition_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.FunctionDefinition(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -105,41 +105,41 @@ def test_FunctionDefinition_free_NULL(self):
 
   def test_FunctionDefinition_getArguments(self):
     self.FD.setMath(libsbml.parseFormula("lambda(x, y, x^y)"))
-    self.assert_( self.FD.getNumArguments() == 2 )
+    self.assertTrue( self.FD.getNumArguments() == 2 )
     math = self.FD.getArgument(0)
-    self.assert_( math != None )
+    self.assertTrue( math != None )
     self.assertEqual( True, math.isName() )
-    self.assert_((  "x" == math.getName() ))
-    self.assert_( math.getNumChildren() == 0 )
+    self.assertTrue((  "x" == math.getName() ))
+    self.assertTrue( math.getNumChildren() == 0 )
     math = self.FD.getArgument(1)
-    self.assert_( math != None )
+    self.assertTrue( math != None )
     self.assertEqual( True, math.isName() )
-    self.assert_((  "y" == math.getName() ))
-    self.assert_( math.getNumChildren() == 0 )
-    self.assert_( self.FD.getArgument(0) == self.FD.getArgument( "x") )
-    self.assert_( self.FD.getArgument(1) == self.FD.getArgument( "y") )
+    self.assertTrue((  "y" == math.getName() ))
+    self.assertTrue( math.getNumChildren() == 0 )
+    self.assertTrue( self.FD.getArgument(0) == self.FD.getArgument( "x") )
+    self.assertTrue( self.FD.getArgument(1) == self.FD.getArgument( "y") )
     pass  
 
   def test_FunctionDefinition_getBody(self):
     math1 = libsbml.parseFormula("lambda(x, x)")
     self.FD.setMath(math1)
     math = self.FD.getBody()
-    self.assert_( math != None )
+    self.assertTrue( math != None )
     self.assertEqual( True, math.isName() )
-    self.assert_((  "x" == math.getName() ))
-    self.assert_( math.getNumChildren() == 0 )
+    self.assertTrue((  "x" == math.getName() ))
+    self.assertTrue( math.getNumChildren() == 0 )
     _dummyList = [ math1 ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_FunctionDefinition_setId(self):
     id =  "pow3";
     self.FD.setId(id)
-    self.assert_(( id == self.FD.getId() ))
+    self.assertTrue(( id == self.FD.getId() ))
     self.assertEqual( True, self.FD.isSetId() )
     if (self.FD.getId() == id):
       pass    
     self.FD.setId(self.FD.getId())
-    self.assert_(( id == self.FD.getId() ))
+    self.assertTrue(( id == self.FD.getId() ))
     self.FD.setId("")
     self.assertEqual( False, self.FD.isSetId() )
     if (self.FD.getId() != None):
@@ -150,19 +150,19 @@ def test_FunctionDefinition_setMath(self):
     math = libsbml.parseFormula("lambda(x, x^3)")
     self.FD.setMath(math)
     math1 = self.FD.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
-    self.assert_( self.FD.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( self.FD.getMath() != math )
     self.assertEqual( True, self.FD.isSetMath() )
     self.FD.setMath(self.FD.getMath())
     math1 = self.FD.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
-    self.assert_( self.FD.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( self.FD.getMath() != math )
     self.FD.setMath(None)
     self.assertEqual( False, self.FD.isSetMath() )
     if (self.FD.getMath() != None):
@@ -172,12 +172,12 @@ def test_FunctionDefinition_setMath(self):
   def test_FunctionDefinition_setName(self):
     name =  "Cube_Me";
     self.FD.setName(name)
-    self.assert_(( name == self.FD.getName() ))
+    self.assertTrue(( name == self.FD.getName() ))
     self.assertEqual( True, self.FD.isSetName() )
     if (self.FD.getName() == name):
       pass    
     self.FD.setName(self.FD.getName())
-    self.assert_(( name == self.FD.getName() ))
+    self.assertTrue(( name == self.FD.getName() ))
     self.FD.setName("")
     self.assertEqual( False, self.FD.isSetName() )
     if (self.FD.getName() != None):
diff --git a/src/bindings/python/test/sbml/TestFunctionDefinition_newSetters.py b/src/bindings/python/test/sbml/TestFunctionDefinition_newSetters.py
index 3da95f33c6..327a599ad3 100644
--- a/src/bindings/python/test/sbml/TestFunctionDefinition_newSetters.py
+++ b/src/bindings/python/test/sbml/TestFunctionDefinition_newSetters.py
@@ -52,30 +52,30 @@ def tearDown(self):
   def test_FunctionDefinition_setId1(self):
     id =  "1e1";
     i = self.E.setId(id)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.E.isSetId() )
     pass  
 
   def test_FunctionDefinition_setId2(self):
     id =  "e1";
     i = self.E.setId(id)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( id == self.E.getId() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( id == self.E.getId() ))
     self.assertEqual( True, self.E.isSetId() )
     i = self.E.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetId() )
     pass  
 
   def test_FunctionDefinition_setMath1(self):
     math = libsbml.parseFormula("2 * k")
     i = self.E.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.E.getMath() != math )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.E.getMath() != math )
     self.assertEqual( True, self.E.isSetMath() )
     i = self.E.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.E.getMath() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.E.getMath() == None )
     self.assertEqual( False, self.E.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -83,7 +83,7 @@ def test_FunctionDefinition_setMath1(self):
   def test_FunctionDefinition_setMath2(self):
     math = libsbml.ASTNode(libsbml.AST_DIVIDE)
     i = self.E.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.E.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -91,24 +91,24 @@ def test_FunctionDefinition_setMath2(self):
   def test_FunctionDefinition_setName1(self):
     name =  "3Set_k2";
     i = self.E.setName(name)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.E.isSetName() )
     pass  
 
   def test_FunctionDefinition_setName2(self):
     name =  "Set k2";
     i = self.E.setName(name)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( name == self.E.getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( name == self.E.getName() ))
     self.assertEqual( True, self.E.isSetName() )
     i = self.E.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetName() )
     pass  
 
   def test_FunctionDefinition_setName3(self):
     i = self.E.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetName() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestGetMultipleObjects.py b/src/bindings/python/test/sbml/TestGetMultipleObjects.py
index 6c29ce6536..a69f3e8ac4 100644
--- a/src/bindings/python/test/sbml/TestGetMultipleObjects.py
+++ b/src/bindings/python/test/sbml/TestGetMultipleObjects.py
@@ -46,7 +46,7 @@ def test_GetMultipleObjects_allElements(self):
     if (d == None):
       pass    
     list = d.getListOfAllElements()
-    self.assert_( list.getSize() == 37 )
+    self.assertTrue( list.getSize() == 37 )
     d = None
     pass  
 
@@ -58,30 +58,30 @@ def test_GetMultipleObjects_getId(self):
     if (d == None):
       pass    
     obj = d.getElementBySId("no_id")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementBySId("")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementBySId("find_id")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_MODEL )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_MODEL )
     obj = d.getElementBySId("func1")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
     obj = d.getElementBySId("comp")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_COMPARTMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_COMPARTMENT )
     obj = d.getElementBySId("b")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_SPECIES )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_SPECIES )
     obj = d.getElementBySId("x")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_PARAMETER )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_PARAMETER )
     obj = d.getElementBySId("J0")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_REACTION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_REACTION )
     obj = d.getElementBySId("E0")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_EVENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_EVENT )
     d = None
     pass  
 
@@ -93,128 +93,128 @@ def test_GetMultipleObjects_getMetaId(self):
     if (d == None):
       pass    
     obj = d.getElementByMetaId("no_id")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementByMetaId("")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementByMetaId("meta1")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_DOCUMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_DOCUMENT )
     obj = d.getElementByMetaId("meta2")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_MODEL )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_MODEL )
     obj = d.getElementByMetaId("meta3")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_COMPARTMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_COMPARTMENT )
     obj = d.getElementByMetaId("meta4")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_COMPARTMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_COMPARTMENT )
     obj = d.getElementByMetaId("meta5")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_SPECIES )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_SPECIES )
     obj = d.getElementByMetaId("meta6")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_SPECIES )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_SPECIES )
     obj = d.getElementByMetaId("meta7")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_REACTION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_REACTION )
     obj = d.getElementByMetaId("meta8")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_REACTION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_REACTION )
     obj = d.getElementByMetaId("meta9")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
     obj = d.getElementByMetaId("meta10")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
     obj = d.getElementByMetaId("meta11")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_KINETIC_LAW )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_KINETIC_LAW )
     obj = d.getElementByMetaId("meta12")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_EVENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_EVENT )
     obj = d.getElementByMetaId("meta13")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_EVENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_EVENT )
     obj = d.getElementByMetaId("meta14")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_TRIGGER )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_TRIGGER )
     obj = d.getElementByMetaId("meta15")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
     obj = d.getElementByMetaId("meta16")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
     obj = d.getElementByMetaId("meta17")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_DELAY )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_DELAY )
     obj = d.getElementByMetaId("meta18")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_PARAMETER )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_PARAMETER )
     obj = d.getElementByMetaId("meta19")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_PRIORITY )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_PRIORITY )
     obj = d.getElementByMetaId("meta20")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
     obj = d.getElementByMetaId("meta21")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_FUNCTION_DEFINITION )
     obj = d.getElementByMetaId("meta22")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
     obj = d.getElementByMetaId("meta23")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
     obj = d.getElementByMetaId("meta24")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_RULE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_RULE )
     obj = d.getElementByMetaId("meta25")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_RATE_RULE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_RATE_RULE )
     obj = d.getElementByMetaId("meta26")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
     obj = d.getElementByMetaId("meta27")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
     obj = d.getElementByMetaId("meta28")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
     obj = d.getElementByMetaId("meta29")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_UNIT_DEFINITION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_UNIT_DEFINITION )
     obj = d.getElementByMetaId("meta30")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
     obj = d.getElementByMetaId("meta31")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_UNIT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_UNIT )
     obj = d.getElementByMetaId("meta32")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_UNIT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_UNIT )
     obj = d.getElementByMetaId("meta33")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_PARAMETER )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_PARAMETER )
     obj = d.getElementByMetaId("meta34")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( obj.getItemTypeCode() == libsbml.SBML_MODIFIER_SPECIES_REFERENCE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( obj.getItemTypeCode() == libsbml.SBML_MODIFIER_SPECIES_REFERENCE )
     obj = d.getElementByMetaId("meta35")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_MODIFIER_SPECIES_REFERENCE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_MODIFIER_SPECIES_REFERENCE )
     d = None
     pass  
 
@@ -226,25 +226,25 @@ def test_GetMultipleObjects_noAssignments(self):
     if (d.getModel() == None):
       pass    
     obj = d.getElementBySId("ia")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementByMetaId("ia_meta")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
     obj = d.getElementBySId("ar")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementByMetaId("ar_meta")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
     obj = d.getElementBySId("rr")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementByMetaId("rr_meta")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_RATE_RULE )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_RATE_RULE )
     obj = d.getElementBySId("ea")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementByMetaId("ea_meta")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_EVENT_ASSIGNMENT )
     d = None
     pass  
 
@@ -256,12 +256,12 @@ def test_GetMultipleObjects_noLocalParameters(self):
     if (d == None):
       pass    
     rxn = d.getElementBySId("J0")
-    self.assert_( rxn != None )
+    self.assertTrue( rxn != None )
     obj = rxn.getElementBySId("x")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = rxn.getElementByMetaId("meta28")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
     d = None
     pass  
 
@@ -273,10 +273,10 @@ def test_GetMultipleObjects_noUnits(self):
     if (d == None):
       pass    
     obj = d.getElementBySId("volume")
-    self.assert_( obj == None )
+    self.assertTrue( obj == None )
     obj = d.getElementByMetaId("meta30")
-    self.assert_( obj != None )
-    self.assert_( obj.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
+    self.assertTrue( obj != None )
+    self.assertTrue( obj.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
     d = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestInitialAssignment.py b/src/bindings/python/test/sbml/TestInitialAssignment.py
index 3f5254c5d3..db7a763402 100644
--- a/src/bindings/python/test/sbml/TestInitialAssignment.py
+++ b/src/bindings/python/test/sbml/TestInitialAssignment.py
@@ -50,12 +50,12 @@ def tearDown(self):
     pass  
 
   def test_InitialAssignment_create(self):
-    self.assert_( self.IA.getTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
-    self.assert_( self.IA.getMetaId() == "" )
-    self.assert_( self.IA.getNotes() == None )
-    self.assert_( self.IA.getAnnotation() == None )
-    self.assert_( self.IA.getSymbol() == "" )
-    self.assert_( self.IA.getMath() == None )
+    self.assertTrue( self.IA.getTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
+    self.assertTrue( self.IA.getMetaId() == "" )
+    self.assertTrue( self.IA.getNotes() == None )
+    self.assertTrue( self.IA.getAnnotation() == None )
+    self.assertTrue( self.IA.getSymbol() == "" )
+    self.assertTrue( self.IA.getMath() == None )
     pass  
 
   def test_InitialAssignment_createWithNS(self):
@@ -64,14 +64,14 @@ def test_InitialAssignment_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,3)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.InitialAssignment(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 3 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_INITIAL_ASSIGNMENT )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 3 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -83,19 +83,19 @@ def test_InitialAssignment_setMath(self):
     math = libsbml.parseFormula("2 * k")
     self.IA.setMath(math)
     math1 = self.IA.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "2 * k" == formula ))
-    self.assert_( self.IA.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "2 * k" == formula ))
+    self.assertTrue( self.IA.getMath() != math )
     self.assertEqual( True, self.IA.isSetMath() )
     self.IA.setMath(self.IA.getMath())
     math1 = self.IA.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "2 * k" == formula ))
-    self.assert_( self.IA.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "2 * k" == formula ))
+    self.assertTrue( self.IA.getMath() != math )
     self.IA.setMath(None)
     self.assertEqual( False, self.IA.isSetMath() )
     if (self.IA.getMath() != None):
@@ -106,12 +106,12 @@ def test_InitialAssignment_setMath(self):
   def test_InitialAssignment_setSymbol(self):
     Symbol =  "k2";
     self.IA.setSymbol(Symbol)
-    self.assert_(( Symbol == self.IA.getSymbol() ))
+    self.assertTrue(( Symbol == self.IA.getSymbol() ))
     self.assertEqual( True, self.IA.isSetSymbol() )
     if (self.IA.getSymbol() == Symbol):
       pass    
     self.IA.setSymbol(self.IA.getSymbol())
-    self.assert_(( Symbol == self.IA.getSymbol() ))
+    self.assertTrue(( Symbol == self.IA.getSymbol() ))
     self.IA.setSymbol("")
     self.assertEqual( False, self.IA.isSetSymbol() )
     if (self.IA.getSymbol() != None):
diff --git a/src/bindings/python/test/sbml/TestInitialAssignment_newSetters.py b/src/bindings/python/test/sbml/TestInitialAssignment_newSetters.py
index f85132a581..960bcc1146 100644
--- a/src/bindings/python/test/sbml/TestInitialAssignment_newSetters.py
+++ b/src/bindings/python/test/sbml/TestInitialAssignment_newSetters.py
@@ -52,12 +52,12 @@ def tearDown(self):
   def test_InitialAssignment_setMath1(self):
     math = libsbml.parseFormula("2 * k")
     i = self.E.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.E.getMath() != math )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.E.getMath() != math )
     self.assertEqual( True, self.E.isSetMath() )
     i = self.E.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.E.getMath() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.E.getMath() == None )
     self.assertEqual( False, self.E.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -65,7 +65,7 @@ def test_InitialAssignment_setMath1(self):
   def test_InitialAssignment_setMath2(self):
     math = libsbml.ASTNode(libsbml.AST_DIVIDE)
     i = self.E.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.E.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -73,18 +73,18 @@ def test_InitialAssignment_setMath2(self):
   def test_InitialAssignment_setSymbol1(self):
     id =  "1e1";
     i = self.E.setSymbol(id)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.E.isSetSymbol() )
     pass  
 
   def test_InitialAssignment_setSymbol2(self):
     id =  "e1";
     i = self.E.setSymbol(id)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( id == self.E.getSymbol() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( id == self.E.getSymbol() ))
     self.assertEqual( True, self.E.isSetSymbol() )
     i = self.E.setSymbol("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetSymbol() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestInternalConsistencyChecks.py b/src/bindings/python/test/sbml/TestInternalConsistencyChecks.py
index 0d96255b67..60efe68893 100644
--- a/src/bindings/python/test/sbml/TestInternalConsistencyChecks.py
+++ b/src/bindings/python/test/sbml/TestInternalConsistencyChecks.py
@@ -43,12 +43,12 @@ def test_internal_consistency_check_20306(self):
     fd = m.createFunctionDefinition()
     fd.setId("fd")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20306 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20306 )
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     fd.setMath(ast)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -59,12 +59,12 @@ def test_internal_consistency_check_20307(self):
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     fd.setMath(ast)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20307 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20307 )
     fd.setId("fd")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -73,12 +73,12 @@ def test_internal_consistency_check_20419(self):
     m = d.createModel()
     ud = m.createUnitDefinition()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20419 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20419 )
     ud.setId("ud")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -89,33 +89,33 @@ def test_internal_consistency_check_20421(self):
     ud.setId("ud")
     u = ud.createUnit()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 4 )
-    self.assert_( d.getError(0).getErrorId() == 20421 )
-    self.assert_( d.getError(1).getErrorId() == 20421 )
-    self.assert_( d.getError(2).getErrorId() == 20421 )
-    self.assert_( d.getError(3).getErrorId() == 20421 )
+    self.assertTrue( errors == 4 )
+    self.assertTrue( d.getError(0).getErrorId() == 20421 )
+    self.assertTrue( d.getError(1).getErrorId() == 20421 )
+    self.assertTrue( d.getError(2).getErrorId() == 20421 )
+    self.assertTrue( d.getError(3).getErrorId() == 20421 )
     u.setKind(libsbml.UNIT_KIND_MOLE)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 3 )
-    self.assert_( d.getError(0).getErrorId() == 20421 )
-    self.assert_( d.getError(1).getErrorId() == 20421 )
-    self.assert_( d.getError(2).getErrorId() == 20421 )
+    self.assertTrue( errors == 3 )
+    self.assertTrue( d.getError(0).getErrorId() == 20421 )
+    self.assertTrue( d.getError(1).getErrorId() == 20421 )
+    self.assertTrue( d.getError(2).getErrorId() == 20421 )
     u.setExponent(1.0)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
-    self.assert_( d.getError(0).getErrorId() == 20421 )
-    self.assert_( d.getError(1).getErrorId() == 20421 )
+    self.assertTrue( errors == 2 )
+    self.assertTrue( d.getError(0).getErrorId() == 20421 )
+    self.assertTrue( d.getError(1).getErrorId() == 20421 )
     u.setScale(0)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20421 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20421 )
     u.setMultiplier(1.0)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -124,18 +124,18 @@ def test_internal_consistency_check_20517(self):
     m = d.createModel()
     c = m.createCompartment()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
-    self.assert_( d.getError(0).getErrorId() == 20517 )
-    self.assert_( d.getError(1).getErrorId() == 20517 )
+    self.assertTrue( errors == 2 )
+    self.assertTrue( d.getError(0).getErrorId() == 20517 )
+    self.assertTrue( d.getError(1).getErrorId() == 20517 )
     c.setId("c")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20517 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20517 )
     c.setConstant(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -147,42 +147,42 @@ def test_internal_consistency_check_20623(self):
     c.setConstant(True)
     s = m.createSpecies()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 5 )
-    self.assert_( d.getError(0).getErrorId() == 20623 )
-    self.assert_( d.getError(1).getErrorId() == 20614 )
-    self.assert_( d.getError(2).getErrorId() == 20623 )
-    self.assert_( d.getError(3).getErrorId() == 20623 )
-    self.assert_( d.getError(4).getErrorId() == 20623 )
+    self.assertTrue( errors == 5 )
+    self.assertTrue( d.getError(0).getErrorId() == 20623 )
+    self.assertTrue( d.getError(1).getErrorId() == 20614 )
+    self.assertTrue( d.getError(2).getErrorId() == 20623 )
+    self.assertTrue( d.getError(3).getErrorId() == 20623 )
+    self.assertTrue( d.getError(4).getErrorId() == 20623 )
     s.setId("s")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 4 )
-    self.assert_( d.getError(0).getErrorId() == 20614 )
-    self.assert_( d.getError(1).getErrorId() == 20623 )
-    self.assert_( d.getError(2).getErrorId() == 20623 )
-    self.assert_( d.getError(3).getErrorId() == 20623 )
+    self.assertTrue( errors == 4 )
+    self.assertTrue( d.getError(0).getErrorId() == 20614 )
+    self.assertTrue( d.getError(1).getErrorId() == 20623 )
+    self.assertTrue( d.getError(2).getErrorId() == 20623 )
+    self.assertTrue( d.getError(3).getErrorId() == 20623 )
     s.setCompartment("c")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 3 )
-    self.assert_( d.getError(0).getErrorId() == 20623 )
-    self.assert_( d.getError(1).getErrorId() == 20623 )
-    self.assert_( d.getError(2).getErrorId() == 20623 )
+    self.assertTrue( errors == 3 )
+    self.assertTrue( d.getError(0).getErrorId() == 20623 )
+    self.assertTrue( d.getError(1).getErrorId() == 20623 )
+    self.assertTrue( d.getError(2).getErrorId() == 20623 )
     s.setHasOnlySubstanceUnits(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
-    self.assert_( d.getError(0).getErrorId() == 20623 )
-    self.assert_( d.getError(1).getErrorId() == 20623 )
+    self.assertTrue( errors == 2 )
+    self.assertTrue( d.getError(0).getErrorId() == 20623 )
+    self.assertTrue( d.getError(1).getErrorId() == 20623 )
     s.setBoundaryCondition(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20623 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20623 )
     s.setConstant(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -191,18 +191,18 @@ def test_internal_consistency_check_20706(self):
     m = d.createModel()
     p = m.createParameter()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
-    self.assert_( d.getError(0).getErrorId() == 20706 )
-    self.assert_( d.getError(1).getErrorId() == 20706 )
+    self.assertTrue( errors == 2 )
+    self.assertTrue( d.getError(0).getErrorId() == 20706 )
+    self.assertTrue( d.getError(1).getErrorId() == 20706 )
     p.setId("c")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20706 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20706 )
     p.setConstant(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -212,13 +212,13 @@ def test_internal_consistency_check_20804(self):
     ia = m.createInitialAssignment()
     ia.setSymbol("fd")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20804 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20804 )
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     ia.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -229,12 +229,12 @@ def test_internal_consistency_check_20805(self):
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     ia.setMath(ast)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20805 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20805 )
     ia.setSymbol("fd")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -243,13 +243,13 @@ def test_internal_consistency_check_20907_alg(self):
     m = d.createModel()
     r = m.createAlgebraicRule()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20907 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20907 )
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     r.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -259,13 +259,13 @@ def test_internal_consistency_check_20907_assign(self):
     r = m.createAssignmentRule()
     r.setVariable("fd")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20907 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20907 )
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     r.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -275,13 +275,13 @@ def test_internal_consistency_check_20907_rate(self):
     r = m.createRateRule()
     r.setVariable("fd")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20907 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20907 )
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     r.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -292,12 +292,12 @@ def test_internal_consistency_check_20908(self):
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     r.setMath(ast)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20908 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20908 )
     r.setVariable("fd")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -308,12 +308,12 @@ def test_internal_consistency_check_20909(self):
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     r.setMath(ast)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20909 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20909 )
     r.setVariable("fd")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -322,13 +322,13 @@ def test_internal_consistency_check_21007(self):
     m = d.createModel()
     r = m.createConstraint()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21007 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21007 )
     ast = libsbml.parseFormula("lambda(x, 2*x)")
     r.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -340,14 +340,14 @@ def test_internal_consistency_check_21101(self):
     r.setReversible(True)
     r.setFast(False)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21101 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21101 )
     sr = r.createReactant()
     sr.setSpecies("s")
     sr.setConstant(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -359,25 +359,25 @@ def test_internal_consistency_check_21110(self):
     sr.setSpecies("s")
     sr.setConstant(True)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 3 )
-    self.assert_( d.getError(0).getErrorId() == 21110 )
-    self.assert_( d.getError(1).getErrorId() == 21110 )
-    self.assert_( d.getError(2).getErrorId() == 21110 )
+    self.assertTrue( errors == 3 )
+    self.assertTrue( d.getError(0).getErrorId() == 21110 )
+    self.assertTrue( d.getError(1).getErrorId() == 21110 )
+    self.assertTrue( d.getError(2).getErrorId() == 21110 )
     r.setId("r")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
-    self.assert_( d.getError(0).getErrorId() == 21110 )
-    self.assert_( d.getError(1).getErrorId() == 21110 )
+    self.assertTrue( errors == 2 )
+    self.assertTrue( d.getError(0).getErrorId() == 21110 )
+    self.assertTrue( d.getError(1).getErrorId() == 21110 )
     r.setReversible(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21110 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21110 )
     r.setFast(False)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -390,18 +390,18 @@ def test_internal_consistency_check_21116(self):
     r.setFast(False)
     sr = r.createReactant()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
-    self.assert_( d.getError(0).getErrorId() == 21116 )
-    self.assert_( d.getError(1).getErrorId() == 21116 )
+    self.assertTrue( errors == 2 )
+    self.assertTrue( d.getError(0).getErrorId() == 21116 )
+    self.assertTrue( d.getError(1).getErrorId() == 21116 )
     sr.setSpecies("s")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21116 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21116 )
     sr.setConstant(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -418,12 +418,12 @@ def test_internal_consistency_check_21117(self):
     msr = r.createModifier()
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21117 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21117 )
     msr.setSpecies("s")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -441,13 +441,13 @@ def test_internal_consistency_check_21130(self):
     lp = kl.createLocalParameter()
     lp.setId("s")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21130 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21130 )
     ast = libsbml.parseFormula("2*x")
     kl.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -466,12 +466,12 @@ def test_internal_consistency_check_21172(self):
     kl.setMath(ast)
     lp = kl.createLocalParameter()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21172 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21172 )
     lp.setId("pp")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -486,15 +486,15 @@ def test_internal_consistency_check_21201(self):
     ea.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21201 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21201 )
     t = r.createTrigger()
     t.setPersistent(True)
     t.setInitialValue(False)
     t.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -510,14 +510,14 @@ def test_internal_consistency_check_21203(self):
     t.setInitialValue(False)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
-    #self.assert_( d.getError(0).getErrorId() == 21203 )
+    self.assertTrue( errors == 0 )
+    #self.assertTrue( d.getError(0).getErrorId() == 21203 )
     ea = r.createEventAssignment()
     ea.setVariable("ea")
     ea.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -535,12 +535,12 @@ def test_internal_consistency_check_21209(self):
     t.setInitialValue(False)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21209 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21209 )
     t.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -560,12 +560,12 @@ def test_internal_consistency_check_21210(self):
     delay = r.createDelay()
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21210 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21210 )
     delay.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -583,12 +583,12 @@ def test_internal_consistency_check_21213(self):
     t.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21213 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21213 )
     ea.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -606,12 +606,12 @@ def test_internal_consistency_check_21214(self):
     t.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21214 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21214 )
     ea.setVariable("s")
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -629,12 +629,12 @@ def test_internal_consistency_check_21225(self):
     t.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21225 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21225 )
     r.setUseValuesFromTriggerTime(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -651,18 +651,18 @@ def test_internal_consistency_check_21226(self):
     t.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
-    self.assert_( d.getError(0).getErrorId() == 21226 )
-    self.assert_( d.getError(1).getErrorId() == 21226 )
+    self.assertTrue( errors == 2 )
+    self.assertTrue( d.getError(0).getErrorId() == 21226 )
+    self.assertTrue( d.getError(1).getErrorId() == 21226 )
     t.setPersistent(True)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21226 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21226 )
     t.setInitialValue(False)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -682,12 +682,12 @@ def test_internal_consistency_check_21231(self):
     prior = r.createPriority()
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21231 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21231 )
     prior.setMath(ast)
     d.getErrorLog().clearLog()
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -701,8 +701,8 @@ def test_internal_consistency_check_99901(self):
     c.setId("c")
     m.addCompartment(c)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10103 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10103 )
     d = None
     pass  
 
@@ -715,8 +715,8 @@ def test_internal_consistency_check_99902(self):
     c.setId("c")
     m.addCompartment(c)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10103 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10103 )
     d = None
     pass  
 
@@ -732,7 +732,7 @@ def test_internal_consistency_check_99903(self):
     r.setVariable("c")
     r.setFormula("2*3")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 3 )
+    self.assertTrue( errors == 3 )
     d = None
     pass  
 
@@ -753,7 +753,7 @@ def test_internal_consistency_check_99903_localparam(self):
     p.setConstant(False)
     kl.addParameter(p)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -771,7 +771,7 @@ def test_internal_consistency_check_99903_param(self):
     r.setVariable("c")
     r.setFormula("2*3")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
+    self.assertTrue( errors == 2 )
     d = None
     pass  
 
@@ -784,8 +784,8 @@ def test_internal_consistency_check_99904(self):
     c.setMetaId("mmm")
     m.addCompartment(c)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10103 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10103 )
     d = None
     pass  
 
@@ -804,7 +804,7 @@ def test_internal_consistency_check_99904_kl(self):
     kl.setMetaId("mmm")
     r.setKineticLaw(kl)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -817,8 +817,8 @@ def test_internal_consistency_check_99904_model(self):
     m.setMetaId("mmm")
     d.setModel(m)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20201 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20201 )
     d = None
     pass  
 
@@ -833,7 +833,7 @@ def test_internal_consistency_check_99904_param(self):
     p.setMetaId("mmm")
     m.addParameter(p)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -848,7 +848,7 @@ def test_internal_consistency_check_99904_react(self):
     r.setMetaId("mmm")
     m.addReaction(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -863,7 +863,7 @@ def test_internal_consistency_check_99904_rule_alg(self):
     r.setFormula("2")
     m.addRule(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -880,7 +880,7 @@ def test_internal_consistency_check_99904_rule_assign(self):
     r.setMetaId("mmm")
     m.addRule(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -897,7 +897,7 @@ def test_internal_consistency_check_99904_rule_rate(self):
     r.setMetaId("mmm")
     m.addRule(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -913,7 +913,7 @@ def test_internal_consistency_check_99904_species(self):
     s.setMetaId("mmm")
     m.addSpecies(s)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -933,8 +933,8 @@ def test_internal_consistency_check_99904_speciesRef(self):
     sr.setMetaId("mmm")
     r.addProduct(sr)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21101 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21101 )
     d = None
     pass  
 
@@ -951,7 +951,7 @@ def test_internal_consistency_check_99904_unit(self):
     u.setKind(libsbml.UNIT_KIND_MOLE)
     ud.addUnit(u)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -967,7 +967,7 @@ def test_internal_consistency_check_99904_unitdef(self):
     u.createUnit()
     m.addUnitDefinition(u)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -980,8 +980,8 @@ def test_internal_consistency_check_99905(self):
     c.setSBOTerm(2)
     m.addCompartment(c)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10103 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10103 )
     d = None
     pass  
 
@@ -994,7 +994,7 @@ def test_internal_consistency_check_99905_ct(self):
     ct.setSBOTerm(5)
     m.addCompartmentType(ct)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1008,7 +1008,7 @@ def test_internal_consistency_check_99905_delay(self):
     e.setDelay(delay)
     m.addEvent(e)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1024,7 +1024,7 @@ def test_internal_consistency_check_99905_species(self):
     s.setSBOTerm(2)
     m.addSpecies(s)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1037,7 +1037,7 @@ def test_internal_consistency_check_99905_st(self):
     ct.setSBOTerm(5)
     m.addSpeciesType(ct)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1058,7 +1058,7 @@ def test_internal_consistency_check_99905_stoichmath(self):
     sm.setSBOTerm(5)
     sr.setStoichiometryMath(sm)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1072,7 +1072,7 @@ def test_internal_consistency_check_99905_trigger(self):
     e.setTrigger(trigger)
     m.addEvent(e)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1087,7 +1087,7 @@ def test_internal_consistency_check_99905_unit(self):
     u.setSBOTerm(9)
     ud.addUnit(u)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1101,7 +1101,7 @@ def test_internal_consistency_check_99905_unitdef(self):
     u.createUnit()
     m.addUnitDefinition(u)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1114,8 +1114,8 @@ def test_internal_consistency_check_99906(self):
     c.setUnits("mole")
     m.addCompartment(c)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10103 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10103 )
     d = None
     pass  
 
@@ -1128,8 +1128,8 @@ def test_internal_consistency_check_99907(self):
     c.unsetVolume()
     m.addCompartment(c)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 10103 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 10103 )
     d = None
     pass  
 
@@ -1141,7 +1141,7 @@ def test_internal_consistency_check_99908(self):
     ct.setId("ct")
     m.addCompartmentType(ct)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1152,7 +1152,7 @@ def test_internal_consistency_check_99909(self):
     d.setLevelAndVersion(2,1,False)
     m.addConstraint(ct)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1166,7 +1166,7 @@ def test_internal_consistency_check_99910(self):
     c.setConstant(False)
     m.addEvent(e)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1187,8 +1187,8 @@ def test_internal_consistency_check_99911_ea(self):
     ea.setMath(ast)
     e.addEventAssignment(ea)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21203 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21203 )
     d = None
     pass  
 
@@ -1200,7 +1200,7 @@ def test_internal_consistency_check_99911_event(self):
     e.setSBOTerm(2)
     m.addEvent(e)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1213,7 +1213,7 @@ def test_internal_consistency_check_99911_fd(self):
     fd.setSBOTerm(2)
     m.addFunctionDefinition(fd)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1231,7 +1231,7 @@ def test_internal_consistency_check_99911_kl(self):
     p.setId("p")
     r.setKineticLaw(kl)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1242,8 +1242,8 @@ def test_internal_consistency_check_99911_model(self):
     m.setSBOTerm(2)
     d.setModel(m)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 20201 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 20201 )
     d = None
     pass  
 
@@ -1256,7 +1256,7 @@ def test_internal_consistency_check_99911_param(self):
     p.setSBOTerm(2)
     m.addParameter(p)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1269,7 +1269,7 @@ def test_internal_consistency_check_99911_react(self):
     r.setSBOTerm(2)
     m.addReaction(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1281,7 +1281,7 @@ def test_internal_consistency_check_99911_rule_alg(self):
     r.setSBOTerm(2)
     m.addRule(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1297,7 +1297,7 @@ def test_internal_consistency_check_99911_rule_assign(self):
     r.setSBOTerm(2)
     m.addRule(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1313,7 +1313,7 @@ def test_internal_consistency_check_99911_rule_rate(self):
     r.setSBOTerm(2)
     m.addRule(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1333,8 +1333,8 @@ def test_internal_consistency_check_99911_speciesRef(self):
     sr.setSBOTerm(4)
     r.addReactant(sr)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21101 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21101 )
     d = None
     pass  
 
@@ -1348,7 +1348,7 @@ def test_internal_consistency_check_99912(self):
     c.setConstant(False)
     m.addFunctionDefinition(fd)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1362,7 +1362,7 @@ def test_internal_consistency_check_99913(self):
     c.setConstant(False)
     m.addInitialAssignment(ia)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1374,7 +1374,7 @@ def test_internal_consistency_check_99914(self):
     r.setVariable("kk")
     m.addRule(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1386,7 +1386,7 @@ def test_internal_consistency_check_99915_alg(self):
     r.setUnits("kk")
     m.addRule(r)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1403,7 +1403,7 @@ def test_internal_consistency_check_99915_assign(self):
     r.setFormula("2")
     r.setUnits("mmm")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1420,7 +1420,7 @@ def test_internal_consistency_check_99915_rate(self):
     r.setVariable("c")
     r.setUnits("mmm")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1440,7 +1440,7 @@ def test_internal_consistency_check_99916_reaction(self):
     sr.setSpecies("s")
     m.addSpecies(s)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1459,7 +1459,7 @@ def test_internal_consistency_check_99916_rule(self):
     r.setVariable("s")
     r.setFormula("2")
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 2 )
+    self.assertTrue( errors == 2 )
     d = None
     pass  
 
@@ -1475,7 +1475,7 @@ def test_internal_consistency_check_99917(self):
     s.setSpatialSizeUnits("kkk")
     m.addSpecies(s)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1491,7 +1491,7 @@ def test_internal_consistency_check_99918(self):
     s.setSpeciesType("kkk")
     m.addSpecies(s)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1507,7 +1507,7 @@ def test_internal_consistency_check_99919(self):
     s.setHasOnlySubstanceUnits(True)
     m.addSpecies(s)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1527,8 +1527,8 @@ def test_internal_consistency_check_99920(self):
     sr.setId("mmm")
     r.addProduct(sr)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21101 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21101 )
     d = None
     pass  
 
@@ -1548,8 +1548,8 @@ def test_internal_consistency_check_99921(self):
     sr.setName("mmm")
     r.addReactant(sr)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 1 )
-    self.assert_( d.getError(0).getErrorId() == 21101 )
+    self.assertTrue( errors == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == 21101 )
     d = None
     pass  
 
@@ -1561,7 +1561,7 @@ def test_internal_consistency_check_99922(self):
     d.setLevelAndVersion(2,1,False)
     m.addSpeciesType(ct)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1581,7 +1581,7 @@ def test_internal_consistency_check_99923(self):
     sr.setSpecies("s")
     sr.setStoichiometryMath(sm)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1598,7 +1598,7 @@ def test_internal_consistency_check_99924(self):
     u.setMultiplier(9)
     ud.addUnit(u)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
@@ -1615,7 +1615,7 @@ def test_internal_consistency_check_99925(self):
     u.setOffset(9)
     ud.addUnit(u)
     errors = d.checkInternalConsistency()
-    self.assert_( errors == 0 )
+    self.assertTrue( errors == 0 )
     d = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestKineticLaw.py b/src/bindings/python/test/sbml/TestKineticLaw.py
index 6aae8a566e..7d89c7ed6a 100644
--- a/src/bindings/python/test/sbml/TestKineticLaw.py
+++ b/src/bindings/python/test/sbml/TestKineticLaw.py
@@ -53,24 +53,24 @@ def test_KineticLaw_addParameter(self):
     p = libsbml.Parameter(2,4)
     p.setId( "p")
     self.kl.addParameter(p)
-    self.assert_( self.kl.getNumParameters() == 1 )
+    self.assertTrue( self.kl.getNumParameters() == 1 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_KineticLaw_create(self):
-    self.assert_( self.kl.getTypeCode() == libsbml.SBML_KINETIC_LAW )
-    self.assert_( self.kl.getMetaId() == "" )
-    self.assert_( self.kl.getNotes() == None )
-    self.assert_( self.kl.getAnnotation() == None )
-    self.assert_( self.kl.getFormula() == "" )
-    self.assert_( self.kl.getMath() == None )
-    self.assert_( self.kl.getTimeUnits() == "" )
-    self.assert_( self.kl.getSubstanceUnits() == "" )
+    self.assertTrue( self.kl.getTypeCode() == libsbml.SBML_KINETIC_LAW )
+    self.assertTrue( self.kl.getMetaId() == "" )
+    self.assertTrue( self.kl.getNotes() == None )
+    self.assertTrue( self.kl.getAnnotation() == None )
+    self.assertTrue( self.kl.getFormula() == "" )
+    self.assertTrue( self.kl.getMath() == None )
+    self.assertTrue( self.kl.getTimeUnits() == "" )
+    self.assertTrue( self.kl.getSubstanceUnits() == "" )
     self.assertEqual( False, self.kl.isSetFormula() )
     self.assertEqual( False, self.kl.isSetMath() )
     self.assertEqual( False, self.kl.isSetTimeUnits() )
     self.assertEqual( False, self.kl.isSetSubstanceUnits() )
-    self.assert_( self.kl.getNumParameters() == 0 )
+    self.assertTrue( self.kl.getNumParameters() == 0 )
     pass  
 
   def test_KineticLaw_createWithNS(self):
@@ -79,14 +79,14 @@ def test_KineticLaw_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.KineticLaw(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_KINETIC_LAW )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_KINETIC_LAW )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -105,13 +105,13 @@ def test_KineticLaw_getParameter(self):
     self.kl.addParameter(k2)
     _dummyList = [ k1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ k2 ]; _dummyList[:] = []; del _dummyList
-    self.assert_( self.kl.getNumParameters() == 2 )
+    self.assertTrue( self.kl.getNumParameters() == 2 )
     k1 = self.kl.getParameter(0)
     k2 = self.kl.getParameter(1)
-    self.assert_((  "k1" == k1.getId() ))
-    self.assert_((  "k2" == k2.getId() ))
-    self.assert_( k1.getValue() == 3.14 )
-    self.assert_( k2.getValue() == 2.72 )
+    self.assertTrue((  "k1" == k1.getId() ))
+    self.assertTrue((  "k2" == k2.getId() ))
+    self.assertTrue( k1.getValue() == 3.14 )
+    self.assertTrue( k2.getValue() == 2.72 )
     pass  
 
   def test_KineticLaw_getParameterById(self):
@@ -125,13 +125,13 @@ def test_KineticLaw_getParameterById(self):
     self.kl.addParameter(k2)
     _dummyList = [ k1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ k2 ]; _dummyList[:] = []; del _dummyList
-    self.assert_( self.kl.getNumParameters() == 2 )
+    self.assertTrue( self.kl.getNumParameters() == 2 )
     k1 = self.kl.getParameter( "k1")
     k2 = self.kl.getParameter( "k2")
-    self.assert_((  "k1" == k1.getId() ))
-    self.assert_((  "k2" == k2.getId() ))
-    self.assert_( k1.getValue() == 3.14 )
-    self.assert_( k2.getValue() == 2.72 )
+    self.assertTrue((  "k1" == k1.getId() ))
+    self.assertTrue((  "k2" == k2.getId() ))
+    self.assertTrue( k1.getValue() == 3.14 )
+    self.assertTrue( k2.getValue() == 2.72 )
     pass  
 
   def test_KineticLaw_removeParameter(self):
@@ -139,12 +139,12 @@ def test_KineticLaw_removeParameter(self):
     o2 = self.kl.createParameter()
     o3 = self.kl.createParameter()
     o3.setId("test")
-    self.assert_( self.kl.removeParameter(0) == o1 )
-    self.assert_( self.kl.getNumParameters() == 2 )
-    self.assert_( self.kl.removeParameter(0) == o2 )
-    self.assert_( self.kl.getNumParameters() == 1 )
-    self.assert_( self.kl.removeParameter("test") == o3 )
-    self.assert_( self.kl.getNumParameters() == 0 )
+    self.assertTrue( self.kl.removeParameter(0) == o1 )
+    self.assertTrue( self.kl.getNumParameters() == 2 )
+    self.assertTrue( self.kl.removeParameter(0) == o2 )
+    self.assertTrue( self.kl.getNumParameters() == 1 )
+    self.assertTrue( self.kl.removeParameter("test") == o3 )
+    self.assertTrue( self.kl.getNumParameters() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -160,12 +160,12 @@ def test_KineticLaw_setBadFormula(self):
   def test_KineticLaw_setFormula(self):
     formula =  "k1*X0";
     self.kl.setFormula(formula)
-    self.assert_(( formula == self.kl.getFormula() ))
+    self.assertTrue(( formula == self.kl.getFormula() ))
     self.assertEqual( True, self.kl.isSetFormula() )
     if (self.kl.getFormula() == formula):
       pass    
     self.kl.setFormula(self.kl.getFormula())
-    self.assert_(( formula == self.kl.getFormula() ))
+    self.assertTrue(( formula == self.kl.getFormula() ))
     self.kl.setFormula("")
     self.assertEqual( False, self.kl.isSetFormula() )
     if (self.kl.getFormula() != None):
@@ -179,7 +179,7 @@ def test_KineticLaw_setFormulaFromMath(self):
     self.kl.setMath(math)
     self.assertEqual( True, self.kl.isSetMath() )
     self.assertEqual( True, self.kl.isSetFormula() )
-    self.assert_((  "k1 * X0" == self.kl.getFormula() ))
+    self.assertTrue((  "k1 * X0" == self.kl.getFormula() ))
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -187,19 +187,19 @@ def test_KineticLaw_setMath(self):
     math = libsbml.parseFormula("k3 / k2")
     self.kl.setMath(math)
     math1 = self.kl.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "k3 / k2" == formula ))
-    self.assert_( self.kl.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "k3 / k2" == formula ))
+    self.assertTrue( self.kl.getMath() != math )
     self.assertEqual( True, self.kl.isSetMath() )
     self.kl.setMath(self.kl.getMath())
     math1 = self.kl.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "k3 / k2" == formula ))
-    self.assert_( self.kl.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "k3 / k2" == formula ))
+    self.assertTrue( self.kl.getMath() != math )
     self.kl.setMath(None)
     self.assertEqual( False, self.kl.isSetMath() )
     if (self.kl.getMath() != None):
@@ -215,7 +215,7 @@ def test_KineticLaw_setMathFromFormula(self):
     self.assertEqual( True, self.kl.isSetMath() )
     self.assertEqual( True, self.kl.isSetFormula() )
     formula = libsbml.formulaToString(self.kl.getMath())
-    self.assert_((  "k3 / k2" == formula ))
+    self.assertTrue((  "k3 / k2" == formula ))
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestKineticLaw_newSetters.py b/src/bindings/python/test/sbml/TestKineticLaw_newSetters.py
index cccee30146..66869ecdd6 100644
--- a/src/bindings/python/test/sbml/TestKineticLaw_newSetters.py
+++ b/src/bindings/python/test/sbml/TestKineticLaw_newSetters.py
@@ -53,11 +53,11 @@ def test_KineticLaw_addParameter1(self):
     self.kl = libsbml.KineticLaw(2,2)
     p = libsbml.Parameter(2,2)
     i = self.kl.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     p.setId( "p")
     i = self.kl.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.kl.getNumParameters() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.kl.getNumParameters() == 1 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ self.kl ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -67,8 +67,8 @@ def test_KineticLaw_addParameter2(self):
     p = libsbml.Parameter(2,1)
     p.setId( "p")
     i = self.kl.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( self.kl.getNumParameters() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( self.kl.getNumParameters() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ self.kl ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -78,8 +78,8 @@ def test_KineticLaw_addParameter3(self):
     p = libsbml.Parameter(1,2)
     p.setId( "p")
     i = self.kl.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( self.kl.getNumParameters() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( self.kl.getNumParameters() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ self.kl ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -88,38 +88,38 @@ def test_KineticLaw_addParameter4(self):
     self.kl = libsbml.KineticLaw(2,2)
     p = None
     i = self.kl.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( self.kl.getNumParameters() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( self.kl.getNumParameters() == 0 )
     _dummyList = [ self.kl ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_KineticLaw_createParameter(self):
     self.kl = libsbml.KineticLaw(2,2)
     p = self.kl.createParameter()
-    self.assert_( self.kl.getNumParameters() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( self.kl.getNumParameters() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ self.kl ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_KineticLaw_setFormula1(self):
     formula =  "k1*X0";
     i = self.kl.setFormula(formula)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( formula == self.kl.getFormula() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( formula == self.kl.getFormula() ))
     self.assertEqual( True, self.kl.isSetFormula() )
     pass  
 
   def test_KineticLaw_setFormula2(self):
     i = self.kl.setFormula("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.kl.isSetFormula() )
     pass  
 
   def test_KineticLaw_setFormula3(self):
     formula =  "k1 X0";
     i = self.kl.setFormula(formula)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.kl.isSetFormula() )
     pass  
 
@@ -132,13 +132,13 @@ def test_KineticLaw_setMath1(self):
     math.addChild(a)
     math.addChild(b)
     i = self.kl.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.kl.isSetMath() )
     math1 = self.kl.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "a * b" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "a * b" == formula ))
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -148,33 +148,33 @@ def test_KineticLaw_setMath2(self):
     a.setName( "a")
     math.addChild(a)
     i = self.kl.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.kl.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_KineticLaw_setMath3(self):
     i = self.kl.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.kl.isSetMath() )
     pass  
 
   def test_KineticLaw_setSubstanceUnits1(self):
     i = self.kl.setSubstanceUnits( "mole")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.kl.isSetSubstanceUnits() )
     i = self.kl.unsetSubstanceUnits()
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.kl.isSetSubstanceUnits() )
     pass  
 
   def test_KineticLaw_setSubstanceUnits2(self):
     kl1 = libsbml.KineticLaw(1,2)
     i = kl1.setSubstanceUnits( "mole")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, kl1.isSetSubstanceUnits() )
     i = kl1.unsetSubstanceUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, kl1.isSetSubstanceUnits() )
     _dummyList = [ kl1 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -182,10 +182,10 @@ def test_KineticLaw_setSubstanceUnits2(self):
   def test_KineticLaw_setSubstanceUnits3(self):
     kl1 = libsbml.KineticLaw(1,2)
     i = kl1.setSubstanceUnits( "1second")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, kl1.isSetSubstanceUnits() )
     i = kl1.unsetSubstanceUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, kl1.isSetSubstanceUnits() )
     _dummyList = [ kl1 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -193,27 +193,27 @@ def test_KineticLaw_setSubstanceUnits3(self):
   def test_KineticLaw_setSubstanceUnits4(self):
     kl1 = libsbml.KineticLaw(1,2)
     i = kl1.setSubstanceUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, kl1.isSetSubstanceUnits() )
     _dummyList = [ kl1 ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_KineticLaw_setTimeUnits1(self):
     i = self.kl.setTimeUnits( "second")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.kl.isSetTimeUnits() )
     i = self.kl.unsetTimeUnits()
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.kl.isSetTimeUnits() )
     pass  
 
   def test_KineticLaw_setTimeUnits2(self):
     kl1 = libsbml.KineticLaw(1,2)
     i = kl1.setTimeUnits( "second")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, kl1.isSetTimeUnits() )
     i = kl1.unsetTimeUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, kl1.isSetTimeUnits() )
     _dummyList = [ kl1 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -221,10 +221,10 @@ def test_KineticLaw_setTimeUnits2(self):
   def test_KineticLaw_setTimeUnits3(self):
     kl1 = libsbml.KineticLaw(1,2)
     i = kl1.setTimeUnits( "1second")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, kl1.isSetTimeUnits() )
     i = kl1.unsetTimeUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, kl1.isSetTimeUnits() )
     _dummyList = [ kl1 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -232,7 +232,7 @@ def test_KineticLaw_setTimeUnits3(self):
   def test_KineticLaw_setTimeUnits4(self):
     kl1 = libsbml.KineticLaw(1,2)
     i = kl1.setTimeUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, kl1.isSetTimeUnits() )
     _dummyList = [ kl1 ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestL3Compartment.py b/src/bindings/python/test/sbml/TestL3Compartment.py
index 3978a8425a..787d81b07b 100644
--- a/src/bindings/python/test/sbml/TestL3Compartment.py
+++ b/src/bindings/python/test/sbml/TestL3Compartment.py
@@ -53,33 +53,33 @@ def tearDown(self):
     pass  
 
   def test_L3_Compartment_NS(self):
-    self.assert_( self.C.getNamespaces() != None )
-    self.assert_( self.C.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.C.getNamespaces().getURI(0) ))
+    self.assertTrue( self.C.getNamespaces() != None )
+    self.assertTrue( self.C.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.C.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_Compartment_constant(self):
-    self.assert_( self.C.isSetConstant() == False )
+    self.assertTrue( self.C.isSetConstant() == False )
     self.C.setConstant(True)
-    self.assert_( self.C.getConstant() == True )
-    self.assert_( self.C.isSetConstant() == True )
+    self.assertTrue( self.C.getConstant() == True )
+    self.assertTrue( self.C.isSetConstant() == True )
     self.C.setConstant(False)
-    self.assert_( self.C.getConstant() == False )
-    self.assert_( self.C.isSetConstant() == True )
+    self.assertTrue( self.C.getConstant() == False )
+    self.assertTrue( self.C.isSetConstant() == True )
     pass  
 
   def test_L3_Compartment_create(self):
-    self.assert_( self.C.getTypeCode() == libsbml.SBML_COMPARTMENT )
-    self.assert_( self.C.getMetaId() == "" )
-    self.assert_( self.C.getNotes() == None )
-    self.assert_( self.C.getAnnotation() == None )
-    self.assert_( self.C.getId() == "" )
-    self.assert_( self.C.getName() == "" )
-    self.assert_( self.C.getUnits() == "" )
-    self.assert_( self.C.getOutside() == "" )
+    self.assertTrue( self.C.getTypeCode() == libsbml.SBML_COMPARTMENT )
+    self.assertTrue( self.C.getMetaId() == "" )
+    self.assertTrue( self.C.getNotes() == None )
+    self.assertTrue( self.C.getAnnotation() == None )
+    self.assertTrue( self.C.getId() == "" )
+    self.assertTrue( self.C.getName() == "" )
+    self.assertTrue( self.C.getUnits() == "" )
+    self.assertTrue( self.C.getOutside() == "" )
     self.assertEqual( True, isnan(self.C.getSpatialDimensionsAsDouble()) )
     self.assertEqual( True, isnan(self.C.getVolume()) )
-    self.assert_( self.C.getConstant() == True )
+    self.assertTrue( self.C.getConstant() == True )
     self.assertEqual( False, self.C.isSetId() )
     self.assertEqual( False, self.C.isSetSpatialDimensions() )
     self.assertEqual( False, self.C.isSetName() )
@@ -96,21 +96,21 @@ def test_L3_Compartment_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     c = libsbml.Compartment(sbmlns)
-    self.assert_( c.getTypeCode() == libsbml.SBML_COMPARTMENT )
-    self.assert_( c.getMetaId() == "" )
-    self.assert_( c.getNotes() == None )
-    self.assert_( c.getAnnotation() == None )
-    self.assert_( c.getLevel() == 3 )
-    self.assert_( c.getVersion() == 1 )
-    self.assert_( c.getNamespaces() != None )
-    self.assert_( c.getNamespaces().getLength() == 2 )
-    self.assert_( c.getId() == "" )
-    self.assert_( c.getName() == "" )
-    self.assert_( c.getUnits() == "" )
-    self.assert_( c.getOutside() == "" )
+    self.assertTrue( c.getTypeCode() == libsbml.SBML_COMPARTMENT )
+    self.assertTrue( c.getMetaId() == "" )
+    self.assertTrue( c.getNotes() == None )
+    self.assertTrue( c.getAnnotation() == None )
+    self.assertTrue( c.getLevel() == 3 )
+    self.assertTrue( c.getVersion() == 1 )
+    self.assertTrue( c.getNamespaces() != None )
+    self.assertTrue( c.getNamespaces().getLength() == 2 )
+    self.assertTrue( c.getId() == "" )
+    self.assertTrue( c.getName() == "" )
+    self.assertTrue( c.getUnits() == "" )
+    self.assertTrue( c.getOutside() == "" )
     self.assertEqual( True, isnan(c.getSpatialDimensionsAsDouble()) )
     self.assertEqual( True, isnan(c.getVolume()) )
-    self.assert_( c.getConstant() == True )
+    self.assertTrue( c.getConstant() == True )
     self.assertEqual( False, c.isSetId() )
     self.assertEqual( False, c.isSetSpatialDimensions() )
     self.assertEqual( False, c.isSetName() )
@@ -140,7 +140,7 @@ def test_L3_Compartment_id(self):
     id =  "mitochondria";
     self.assertEqual( False, self.C.isSetId() )
     self.C.setId(id)
-    self.assert_(( id == self.C.getId() ))
+    self.assertTrue(( id == self.C.getId() ))
     self.assertEqual( True, self.C.isSetId() )
     if (self.C.getId() == id):
       pass    
@@ -157,12 +157,12 @@ def test_L3_Compartment_initDefaults(self):
     self.assertEqual( False, c.isSetConstant() )
     self.assertEqual( False, c.isSetSpatialDimensions() )
     c.initDefaults()
-    self.assert_((  "A" == c.getId() ))
-    self.assert_( c.getName() == "" )
-    self.assert_((  "litre" == c.getUnits() ))
-    self.assert_( c.getSpatialDimensions() == 3 )
-    self.assert_( c.getSize() == 1 )
-    self.assert_( c.getConstant() == True )
+    self.assertTrue((  "A" == c.getId() ))
+    self.assertTrue( c.getName() == "" )
+    self.assertTrue((  "litre" == c.getUnits() ))
+    self.assertTrue( c.getSpatialDimensions() == 3 )
+    self.assertTrue( c.getSize() == 1 )
+    self.assertTrue( c.getConstant() == True )
     self.assertEqual( True, c.isSetId() )
     self.assertEqual( False, c.isSetName() )
     self.assertEqual( False, c.isSetSize() )
@@ -177,7 +177,7 @@ def test_L3_Compartment_name(self):
     name =  "My_Favorite_Factory";
     self.assertEqual( False, self.C.isSetName() )
     self.C.setName(name)
-    self.assert_(( name == self.C.getName() ))
+    self.assertTrue(( name == self.C.getName() ))
     self.assertEqual( True, self.C.isSetName() )
     if (self.C.getName() == name):
       pass    
@@ -192,7 +192,7 @@ def test_L3_Compartment_size(self):
     self.assertEqual( False, self.C.isSetSize() )
     self.assertEqual( True, isnan(self.C.getSize()) )
     self.C.setSize(size)
-    self.assert_( self.C.getSize() == size )
+    self.assertTrue( self.C.getSize() == size )
     self.assertEqual( True, self.C.isSetSize() )
     self.C.unsetSize()
     self.assertEqual( False, self.C.isSetSize() )
@@ -204,7 +204,7 @@ def test_L3_Compartment_spatialDimensions(self):
     self.assertEqual( True, isnan(self.C.getSpatialDimensionsAsDouble()) )
     self.C.setSpatialDimensions(1.5)
     self.assertEqual( True, self.C.isSetSpatialDimensions() )
-    self.assert_( self.C.getSpatialDimensionsAsDouble() == 1.5 )
+    self.assertTrue( self.C.getSpatialDimensionsAsDouble() == 1.5 )
     self.C.unsetSpatialDimensions()
     self.assertEqual( False, self.C.isSetSpatialDimensions() )
     self.assertEqual( True, isnan(self.C.getSpatialDimensionsAsDouble()) )
@@ -214,7 +214,7 @@ def test_L3_Compartment_units(self):
     units =  "volume";
     self.assertEqual( False, self.C.isSetUnits() )
     self.C.setUnits(units)
-    self.assert_(( units == self.C.getUnits() ))
+    self.assertTrue(( units == self.C.getUnits() ))
     self.assertEqual( True, self.C.isSetUnits() )
     if (self.C.getUnits() == units):
       pass    
diff --git a/src/bindings/python/test/sbml/TestL3Event.py b/src/bindings/python/test/sbml/TestL3Event.py
index d2f5b23f80..c6a6a6f1e3 100644
--- a/src/bindings/python/test/sbml/TestL3Event.py
+++ b/src/bindings/python/test/sbml/TestL3Event.py
@@ -50,19 +50,19 @@ def tearDown(self):
     pass  
 
   def test_L3_Event_NS(self):
-    self.assert_( self.E.getNamespaces() != None )
-    self.assert_( self.E.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.E.getNamespaces().getURI(0) ))
+    self.assertTrue( self.E.getNamespaces() != None )
+    self.assertTrue( self.E.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.E.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_Event_create(self):
-    self.assert_( self.E.getTypeCode() == libsbml.SBML_EVENT )
-    self.assert_( self.E.getMetaId() == "" )
-    self.assert_( self.E.getNotes() == None )
-    self.assert_( self.E.getAnnotation() == None )
-    self.assert_( self.E.getId() == "" )
-    self.assert_( self.E.getName() == "" )
-    self.assert_( self.E.getUseValuesFromTriggerTime() == True )
+    self.assertTrue( self.E.getTypeCode() == libsbml.SBML_EVENT )
+    self.assertTrue( self.E.getMetaId() == "" )
+    self.assertTrue( self.E.getNotes() == None )
+    self.assertTrue( self.E.getAnnotation() == None )
+    self.assertTrue( self.E.getId() == "" )
+    self.assertTrue( self.E.getName() == "" )
+    self.assertTrue( self.E.getUseValuesFromTriggerTime() == True )
     self.assertEqual( False, self.E.isSetId() )
     self.assertEqual( False, self.E.isSetName() )
     self.assertEqual( False, self.E.isSetUseValuesFromTriggerTime() )
@@ -74,17 +74,17 @@ def test_L3_Event_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     e = libsbml.Event(sbmlns)
-    self.assert_( e.getTypeCode() == libsbml.SBML_EVENT )
-    self.assert_( e.getMetaId() == "" )
-    self.assert_( e.getNotes() == None )
-    self.assert_( e.getAnnotation() == None )
-    self.assert_( e.getLevel() == 3 )
-    self.assert_( e.getVersion() == 1 )
-    self.assert_( e.getNamespaces() != None )
-    self.assert_( e.getNamespaces().getLength() == 2 )
-    self.assert_( e.getId() == "" )
-    self.assert_( e.getName() == "" )
-    self.assert_( e.getUseValuesFromTriggerTime() == True )
+    self.assertTrue( e.getTypeCode() == libsbml.SBML_EVENT )
+    self.assertTrue( e.getMetaId() == "" )
+    self.assertTrue( e.getNotes() == None )
+    self.assertTrue( e.getAnnotation() == None )
+    self.assertTrue( e.getLevel() == 3 )
+    self.assertTrue( e.getVersion() == 1 )
+    self.assertTrue( e.getNamespaces() != None )
+    self.assertTrue( e.getNamespaces().getLength() == 2 )
+    self.assertTrue( e.getId() == "" )
+    self.assertTrue( e.getName() == "" )
+    self.assertTrue( e.getUseValuesFromTriggerTime() == True )
     self.assertEqual( False, e.isSetId() )
     self.assertEqual( False, e.isSetName() )
     self.assertEqual( False, e.isSetUseValuesFromTriggerTime() )
@@ -119,7 +119,7 @@ def test_L3_Event_id(self):
     id =  "mitochondria";
     self.assertEqual( False, self.E.isSetId() )
     self.E.setId(id)
-    self.assert_(( id == self.E.getId() ))
+    self.assertTrue(( id == self.E.getId() ))
     self.assertEqual( True, self.E.isSetId() )
     if (self.E.getId() == id):
       pass    
@@ -133,7 +133,7 @@ def test_L3_Event_name(self):
     name =  "My_Favorite_Factory";
     self.assertEqual( False, self.E.isSetName() )
     self.E.setName(name)
-    self.assert_(( name == self.E.getName() ))
+    self.assertTrue(( name == self.E.getName() ))
     self.assertEqual( True, self.E.isSetName() )
     if (self.E.getName() == name):
       pass    
@@ -149,10 +149,10 @@ def test_L3_Event_setPriority1(self):
     priority.setMath(math1)
     self.assertEqual( False, self.E.isSetPriority() )
     i = self.E.setPriority(priority)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.E.isSetPriority() )
     i = self.E.unsetPriority()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.E.isSetPriority() )
     _dummyList = [ priority ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -161,18 +161,18 @@ def test_L3_Event_setPriority2(self):
     priority = self.E.createPriority()
     self.assertEqual( True, self.E.isSetPriority() )
     p = self.E.getPriority()
-    self.assert_( p != None )
+    self.assertTrue( p != None )
     self.assertEqual( False, p.isSetMath() )
     pass  
 
   def test_L3_Event_useValuesFromTriggerTime(self):
-    self.assert_( self.E.isSetUseValuesFromTriggerTime() == False )
+    self.assertTrue( self.E.isSetUseValuesFromTriggerTime() == False )
     self.E.setUseValuesFromTriggerTime(True)
-    self.assert_( self.E.getUseValuesFromTriggerTime() == True )
-    self.assert_( self.E.isSetUseValuesFromTriggerTime() == True )
+    self.assertTrue( self.E.getUseValuesFromTriggerTime() == True )
+    self.assertTrue( self.E.isSetUseValuesFromTriggerTime() == True )
     self.E.setUseValuesFromTriggerTime(False)
-    self.assert_( self.E.getUseValuesFromTriggerTime() == False )
-    self.assert_( self.E.isSetUseValuesFromTriggerTime() == True )
+    self.assertTrue( self.E.getUseValuesFromTriggerTime() == False )
+    self.assertTrue( self.E.isSetUseValuesFromTriggerTime() == True )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestL3KineticLaw.py b/src/bindings/python/test/sbml/TestL3KineticLaw.py
index 905006748d..4e69822026 100644
--- a/src/bindings/python/test/sbml/TestL3KineticLaw.py
+++ b/src/bindings/python/test/sbml/TestL3KineticLaw.py
@@ -53,20 +53,20 @@ def test_L3_KineticLaw_addParameter1(self):
     kl = libsbml.KineticLaw(3,1)
     p = libsbml.Parameter(3,1)
     i = self.KL.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     p.setId( "p")
     i = self.KL.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.KL.getNumParameters() == 1 )
-    self.assert_( self.KL.getNumLocalParameters() == 1 )
-    self.assert_( kl.getNumParameters() == 0 )
-    self.assert_( kl.getNumLocalParameters() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.KL.getNumParameters() == 1 )
+    self.assertTrue( self.KL.getNumLocalParameters() == 1 )
+    self.assertTrue( kl.getNumParameters() == 0 )
+    self.assertTrue( kl.getNumLocalParameters() == 0 )
     i = kl.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.KL.getNumParameters() == 1 )
-    self.assert_( self.KL.getNumLocalParameters() == 1 )
-    self.assert_( kl.getNumParameters() == 1 )
-    self.assert_( kl.getNumLocalParameters() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.KL.getNumParameters() == 1 )
+    self.assertTrue( self.KL.getNumLocalParameters() == 1 )
+    self.assertTrue( kl.getNumParameters() == 1 )
+    self.assertTrue( kl.getNumLocalParameters() == 1 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ kl ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -76,28 +76,28 @@ def test_L3_KineticLaw_addParameter2(self):
     lp = libsbml.LocalParameter(3,1)
     lp1 = libsbml.LocalParameter(3,1)
     i = kl.addLocalParameter(lp)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     lp.setId( "p")
     lp1.setId("p1");
     i = kl.addLocalParameter(lp)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( kl.getNumParameters() == 1 )
-    self.assert_( kl.getNumLocalParameters() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( kl.getNumParameters() == 1 )
+    self.assertTrue( kl.getNumLocalParameters() == 1 )
     i = kl.addParameter(lp1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( kl.getNumParameters() == 2 )
-    self.assert_( kl.getNumLocalParameters() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( kl.getNumParameters() == 2 )
+    self.assertTrue( kl.getNumLocalParameters() == 2 )
     _dummyList = [ lp ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ kl ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_L3_KineticLaw_create(self):
-    self.assert_( self.KL.getTypeCode() == libsbml.SBML_KINETIC_LAW )
-    self.assert_( self.KL.getMetaId() == "" )
-    self.assert_( self.KL.getNotes() == None )
-    self.assert_( self.KL.getAnnotation() == None )
-    self.assert_( self.KL.getNumParameters() == 0 )
-    self.assert_( self.KL.getNumLocalParameters() == 0 )
+    self.assertTrue( self.KL.getTypeCode() == libsbml.SBML_KINETIC_LAW )
+    self.assertTrue( self.KL.getMetaId() == "" )
+    self.assertTrue( self.KL.getNotes() == None )
+    self.assertTrue( self.KL.getAnnotation() == None )
+    self.assertTrue( self.KL.getNumParameters() == 0 )
+    self.assertTrue( self.KL.getNumLocalParameters() == 0 )
     pass  
 
   def test_L3_KineticLaw_free_NULL(self):
diff --git a/src/bindings/python/test/sbml/TestL3LocalParameter.py b/src/bindings/python/test/sbml/TestL3LocalParameter.py
index 1f3d2599f2..191f047334 100644
--- a/src/bindings/python/test/sbml/TestL3LocalParameter.py
+++ b/src/bindings/python/test/sbml/TestL3LocalParameter.py
@@ -53,19 +53,19 @@ def tearDown(self):
     pass  
 
   def test_L3_LocalParameter_NS(self):
-    self.assert_( self.P.getNamespaces() != None )
-    self.assert_( self.P.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.P.getNamespaces().getURI(0) ))
+    self.assertTrue( self.P.getNamespaces() != None )
+    self.assertTrue( self.P.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.P.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_LocalParameter_create(self):
-    self.assert_( self.P.getTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
-    self.assert_( self.P.getMetaId() == "" )
-    self.assert_( self.P.getNotes() == None )
-    self.assert_( self.P.getAnnotation() == None )
-    self.assert_( self.P.getId() == "" )
-    self.assert_( self.P.getName() == "" )
-    self.assert_( self.P.getUnits() == "" )
+    self.assertTrue( self.P.getTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
+    self.assertTrue( self.P.getMetaId() == "" )
+    self.assertTrue( self.P.getNotes() == None )
+    self.assertTrue( self.P.getAnnotation() == None )
+    self.assertTrue( self.P.getId() == "" )
+    self.assertTrue( self.P.getName() == "" )
+    self.assertTrue( self.P.getUnits() == "" )
     self.assertEqual( True, isnan(self.P.getValue()) )
     self.assertEqual( False, self.P.isSetId() )
     self.assertEqual( False, self.P.isSetName() )
@@ -79,17 +79,17 @@ def test_L3_LocalParameter_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     p = libsbml.LocalParameter(sbmlns)
-    self.assert_( p.getTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
-    self.assert_( p.getMetaId() == "" )
-    self.assert_( p.getNotes() == None )
-    self.assert_( p.getAnnotation() == None )
-    self.assert_( p.getLevel() == 3 )
-    self.assert_( p.getVersion() == 1 )
-    self.assert_( p.getNamespaces() != None )
-    self.assert_( p.getNamespaces().getLength() == 2 )
-    self.assert_( p.getId() == "" )
-    self.assert_( p.getName() == "" )
-    self.assert_( p.getUnits() == "" )
+    self.assertTrue( p.getTypeCode() == libsbml.SBML_LOCAL_PARAMETER )
+    self.assertTrue( p.getMetaId() == "" )
+    self.assertTrue( p.getNotes() == None )
+    self.assertTrue( p.getAnnotation() == None )
+    self.assertTrue( p.getLevel() == 3 )
+    self.assertTrue( p.getVersion() == 1 )
+    self.assertTrue( p.getNamespaces() != None )
+    self.assertTrue( p.getNamespaces().getLength() == 2 )
+    self.assertTrue( p.getId() == "" )
+    self.assertTrue( p.getName() == "" )
+    self.assertTrue( p.getUnits() == "" )
     self.assertEqual( True, isnan(p.getValue()) )
     self.assertEqual( False, p.isSetId() )
     self.assertEqual( False, p.isSetName() )
@@ -114,7 +114,7 @@ def test_L3_LocalParameter_id(self):
     id =  "mitochondria";
     self.assertEqual( False, self.P.isSetId() )
     self.P.setId(id)
-    self.assert_(( id == self.P.getId() ))
+    self.assertTrue(( id == self.P.getId() ))
     self.assertEqual( True, self.P.isSetId() )
     if (self.P.getId() == id):
       pass    
@@ -124,7 +124,7 @@ def test_L3_LocalParameter_name(self):
     name =  "My_Favorite_Factory";
     self.assertEqual( False, self.P.isSetName() )
     self.P.setName(name)
-    self.assert_(( name == self.P.getName() ))
+    self.assertTrue(( name == self.P.getName() ))
     self.assertEqual( True, self.P.isSetName() )
     if (self.P.getName() == name):
       pass    
@@ -138,7 +138,7 @@ def test_L3_LocalParameter_units(self):
     units =  "volume";
     self.assertEqual( False, self.P.isSetUnits() )
     self.P.setUnits(units)
-    self.assert_(( units == self.P.getUnits() ))
+    self.assertTrue(( units == self.P.getUnits() ))
     self.assertEqual( True, self.P.isSetUnits() )
     if (self.P.getUnits() == units):
       pass    
@@ -153,7 +153,7 @@ def test_L3_LocalParameter_value(self):
     self.assertEqual( True, isnan(self.P.getValue()) )
     self.P.setValue(1.5)
     self.assertEqual( True, self.P.isSetValue() )
-    self.assert_( self.P.getValue() == 1.5 )
+    self.assertTrue( self.P.getValue() == 1.5 )
     self.P.unsetValue()
     self.assertEqual( False, self.P.isSetValue() )
     self.assertEqual( True, isnan(self.P.getValue()) )
diff --git a/src/bindings/python/test/sbml/TestL3Model.py b/src/bindings/python/test/sbml/TestL3Model.py
index 443233a9ce..1d67030ab1 100644
--- a/src/bindings/python/test/sbml/TestL3Model.py
+++ b/src/bindings/python/test/sbml/TestL3Model.py
@@ -50,16 +50,16 @@ def tearDown(self):
     pass  
 
   def test_L3_Model_NS(self):
-    self.assert_( self.M.getNamespaces() != None )
-    self.assert_( self.M.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.M.getNamespaces().getURI(0) ))
+    self.assertTrue( self.M.getNamespaces() != None )
+    self.assertTrue( self.M.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.M.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_Model_areaUnits(self):
     units =  "mole";
     self.assertEqual( False, self.M.isSetAreaUnits() )
     self.M.setAreaUnits(units)
-    self.assert_(( units == self.M.getAreaUnits() ))
+    self.assertTrue(( units == self.M.getAreaUnits() ))
     self.assertEqual( True, self.M.isSetAreaUnits() )
     if (self.M.getAreaUnits() == units):
       pass    
@@ -73,7 +73,7 @@ def test_L3_Model_conversionFactor(self):
     units =  "mole";
     self.assertEqual( False, self.M.isSetConversionFactor() )
     self.M.setConversionFactor(units)
-    self.assert_(( units == self.M.getConversionFactor() ))
+    self.assertTrue(( units == self.M.getConversionFactor() ))
     self.assertEqual( True, self.M.isSetConversionFactor() )
     if (self.M.getConversionFactor() == units):
       pass    
@@ -84,18 +84,18 @@ def test_L3_Model_conversionFactor(self):
     pass  
 
   def test_L3_Model_create(self):
-    self.assert_( self.M.getTypeCode() == libsbml.SBML_MODEL )
-    self.assert_( self.M.getMetaId() == "" )
-    self.assert_( self.M.getNotes() == None )
-    self.assert_( self.M.getAnnotation() == None )
-    self.assert_( self.M.getId() == "" )
-    self.assert_( self.M.getName() == "" )
-    self.assert_( self.M.getSubstanceUnits() == "" )
-    self.assert_( self.M.getTimeUnits() == "" )
-    self.assert_( self.M.getVolumeUnits() == "" )
-    self.assert_( self.M.getAreaUnits() == "" )
-    self.assert_( self.M.getLengthUnits() == "" )
-    self.assert_( self.M.getConversionFactor() == "" )
+    self.assertTrue( self.M.getTypeCode() == libsbml.SBML_MODEL )
+    self.assertTrue( self.M.getMetaId() == "" )
+    self.assertTrue( self.M.getNotes() == None )
+    self.assertTrue( self.M.getAnnotation() == None )
+    self.assertTrue( self.M.getId() == "" )
+    self.assertTrue( self.M.getName() == "" )
+    self.assertTrue( self.M.getSubstanceUnits() == "" )
+    self.assertTrue( self.M.getTimeUnits() == "" )
+    self.assertTrue( self.M.getVolumeUnits() == "" )
+    self.assertTrue( self.M.getAreaUnits() == "" )
+    self.assertTrue( self.M.getLengthUnits() == "" )
+    self.assertTrue( self.M.getConversionFactor() == "" )
     self.assertEqual( False, self.M.isSetId() )
     self.assertEqual( False, self.M.isSetName() )
     self.assertEqual( False, self.M.isSetSubstanceUnits() )
@@ -112,22 +112,22 @@ def test_L3_Model_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     m = libsbml.Model(sbmlns)
-    self.assert_( m.getTypeCode() == libsbml.SBML_MODEL )
-    self.assert_( m.getMetaId() == "" )
-    self.assert_( m.getNotes() == None )
-    self.assert_( m.getAnnotation() == None )
-    self.assert_( m.getLevel() == 3 )
-    self.assert_( m.getVersion() == 1 )
-    self.assert_( m.getNamespaces() != None )
-    self.assert_( m.getNamespaces().getLength() == 2 )
-    self.assert_( m.getId() == "" )
-    self.assert_( m.getName() == "" )
-    self.assert_( m.getSubstanceUnits() == "" )
-    self.assert_( m.getTimeUnits() == "" )
-    self.assert_( m.getVolumeUnits() == "" )
-    self.assert_( m.getAreaUnits() == "" )
-    self.assert_( m.getLengthUnits() == "" )
-    self.assert_( m.getConversionFactor() == "" )
+    self.assertTrue( m.getTypeCode() == libsbml.SBML_MODEL )
+    self.assertTrue( m.getMetaId() == "" )
+    self.assertTrue( m.getNotes() == None )
+    self.assertTrue( m.getAnnotation() == None )
+    self.assertTrue( m.getLevel() == 3 )
+    self.assertTrue( m.getVersion() == 1 )
+    self.assertTrue( m.getNamespaces() != None )
+    self.assertTrue( m.getNamespaces().getLength() == 2 )
+    self.assertTrue( m.getId() == "" )
+    self.assertTrue( m.getName() == "" )
+    self.assertTrue( m.getSubstanceUnits() == "" )
+    self.assertTrue( m.getTimeUnits() == "" )
+    self.assertTrue( m.getVolumeUnits() == "" )
+    self.assertTrue( m.getAreaUnits() == "" )
+    self.assertTrue( m.getLengthUnits() == "" )
+    self.assertTrue( m.getConversionFactor() == "" )
     self.assertEqual( False, m.isSetId() )
     self.assertEqual( False, m.isSetName() )
     self.assertEqual( False, m.isSetSubstanceUnits() )
@@ -143,7 +143,7 @@ def test_L3_Model_extentUnits(self):
     units =  "mole";
     self.assertEqual( False, self.M.isSetExtentUnits() )
     self.M.setExtentUnits(units)
-    self.assert_(( units == self.M.getExtentUnits() ))
+    self.assertTrue(( units == self.M.getExtentUnits() ))
     self.assertEqual( True, self.M.isSetExtentUnits() )
     if (self.M.getExtentUnits() == units):
       pass    
@@ -161,7 +161,7 @@ def test_L3_Model_id(self):
     id =  "mitochondria";
     self.assertEqual( False, self.M.isSetId() )
     self.M.setId(id)
-    self.assert_(( id == self.M.getId() ))
+    self.assertTrue(( id == self.M.getId() ))
     self.assertEqual( True, self.M.isSetId() )
     if (self.M.getId() == id):
       pass    
@@ -175,7 +175,7 @@ def test_L3_Model_lengthUnits(self):
     units =  "mole";
     self.assertEqual( False, self.M.isSetLengthUnits() )
     self.M.setLengthUnits(units)
-    self.assert_(( units == self.M.getLengthUnits() ))
+    self.assertTrue(( units == self.M.getLengthUnits() ))
     self.assertEqual( True, self.M.isSetLengthUnits() )
     if (self.M.getLengthUnits() == units):
       pass    
@@ -189,7 +189,7 @@ def test_L3_Model_name(self):
     name =  "My_Favorite_Factory";
     self.assertEqual( False, self.M.isSetName() )
     self.M.setName(name)
-    self.assert_(( name == self.M.getName() ))
+    self.assertTrue(( name == self.M.getName() ))
     self.assertEqual( True, self.M.isSetName() )
     if (self.M.getName() == name):
       pass    
@@ -203,7 +203,7 @@ def test_L3_Model_substanceUnits(self):
     units =  "mole";
     self.assertEqual( False, self.M.isSetSubstanceUnits() )
     self.M.setSubstanceUnits(units)
-    self.assert_(( units == self.M.getSubstanceUnits() ))
+    self.assertTrue(( units == self.M.getSubstanceUnits() ))
     self.assertEqual( True, self.M.isSetSubstanceUnits() )
     if (self.M.getSubstanceUnits() == units):
       pass    
@@ -217,7 +217,7 @@ def test_L3_Model_timeUnits(self):
     units =  "mole";
     self.assertEqual( False, self.M.isSetTimeUnits() )
     self.M.setTimeUnits(units)
-    self.assert_(( units == self.M.getTimeUnits() ))
+    self.assertTrue(( units == self.M.getTimeUnits() ))
     self.assertEqual( True, self.M.isSetTimeUnits() )
     if (self.M.getTimeUnits() == units):
       pass    
@@ -231,7 +231,7 @@ def test_L3_Model_volumeUnits(self):
     units =  "mole";
     self.assertEqual( False, self.M.isSetVolumeUnits() )
     self.M.setVolumeUnits(units)
-    self.assert_(( units == self.M.getVolumeUnits() ))
+    self.assertTrue(( units == self.M.getVolumeUnits() ))
     self.assertEqual( True, self.M.isSetVolumeUnits() )
     if (self.M.getVolumeUnits() == units):
       pass    
diff --git a/src/bindings/python/test/sbml/TestL3Parameter.py b/src/bindings/python/test/sbml/TestL3Parameter.py
index ab3e37d6f1..3bb7842a80 100644
--- a/src/bindings/python/test/sbml/TestL3Parameter.py
+++ b/src/bindings/python/test/sbml/TestL3Parameter.py
@@ -53,31 +53,31 @@ def tearDown(self):
     pass  
 
   def test_L3_Parameter_NS(self):
-    self.assert_( self.P.getNamespaces() != None )
-    self.assert_( self.P.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.P.getNamespaces().getURI(0) ))
+    self.assertTrue( self.P.getNamespaces() != None )
+    self.assertTrue( self.P.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.P.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_Parameter_constant(self):
-    self.assert_( self.P.isSetConstant() == False )
+    self.assertTrue( self.P.isSetConstant() == False )
     self.P.setConstant(True)
-    self.assert_( self.P.getConstant() == True )
-    self.assert_( self.P.isSetConstant() == True )
+    self.assertTrue( self.P.getConstant() == True )
+    self.assertTrue( self.P.isSetConstant() == True )
     self.P.setConstant(False)
-    self.assert_( self.P.getConstant() == False )
-    self.assert_( self.P.isSetConstant() == True )
+    self.assertTrue( self.P.getConstant() == False )
+    self.assertTrue( self.P.isSetConstant() == True )
     pass  
 
   def test_L3_Parameter_create(self):
-    self.assert_( self.P.getTypeCode() == libsbml.SBML_PARAMETER )
-    self.assert_( self.P.getMetaId() == "" )
-    self.assert_( self.P.getNotes() == None )
-    self.assert_( self.P.getAnnotation() == None )
-    self.assert_( self.P.getId() == "" )
-    self.assert_( self.P.getName() == "" )
-    self.assert_( self.P.getUnits() == "" )
+    self.assertTrue( self.P.getTypeCode() == libsbml.SBML_PARAMETER )
+    self.assertTrue( self.P.getMetaId() == "" )
+    self.assertTrue( self.P.getNotes() == None )
+    self.assertTrue( self.P.getAnnotation() == None )
+    self.assertTrue( self.P.getId() == "" )
+    self.assertTrue( self.P.getName() == "" )
+    self.assertTrue( self.P.getUnits() == "" )
     self.assertEqual( True, isnan(self.P.getValue()) )
-    self.assert_( self.P.getConstant() == True )
+    self.assertTrue( self.P.getConstant() == True )
     self.assertEqual( False, self.P.isSetId() )
     self.assertEqual( False, self.P.isSetName() )
     self.assertEqual( False, self.P.isSetValue() )
@@ -91,19 +91,19 @@ def test_L3_Parameter_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     p = libsbml.Parameter(sbmlns)
-    self.assert_( p.getTypeCode() == libsbml.SBML_PARAMETER )
-    self.assert_( p.getMetaId() == "" )
-    self.assert_( p.getNotes() == None )
-    self.assert_( p.getAnnotation() == None )
-    self.assert_( p.getLevel() == 3 )
-    self.assert_( p.getVersion() == 1 )
-    self.assert_( p.getNamespaces() != None )
-    self.assert_( p.getNamespaces().getLength() == 2 )
-    self.assert_( p.getId() == "" )
-    self.assert_( p.getName() == "" )
-    self.assert_( p.getUnits() == "" )
+    self.assertTrue( p.getTypeCode() == libsbml.SBML_PARAMETER )
+    self.assertTrue( p.getMetaId() == "" )
+    self.assertTrue( p.getNotes() == None )
+    self.assertTrue( p.getAnnotation() == None )
+    self.assertTrue( p.getLevel() == 3 )
+    self.assertTrue( p.getVersion() == 1 )
+    self.assertTrue( p.getNamespaces() != None )
+    self.assertTrue( p.getNamespaces().getLength() == 2 )
+    self.assertTrue( p.getId() == "" )
+    self.assertTrue( p.getName() == "" )
+    self.assertTrue( p.getUnits() == "" )
     self.assertEqual( True, isnan(p.getValue()) )
-    self.assert_( p.getConstant() == True )
+    self.assertTrue( p.getConstant() == True )
     self.assertEqual( False, p.isSetId() )
     self.assertEqual( False, p.isSetName() )
     self.assertEqual( False, p.isSetValue() )
@@ -130,7 +130,7 @@ def test_L3_Parameter_id(self):
     id =  "mitochondria";
     self.assertEqual( False, self.P.isSetId() )
     self.P.setId(id)
-    self.assert_(( id == self.P.getId() ))
+    self.assertTrue(( id == self.P.getId() ))
     self.assertEqual( True, self.P.isSetId() )
     if (self.P.getId() == id):
       pass    
@@ -140,7 +140,7 @@ def test_L3_Parameter_name(self):
     name =  "My_Favorite_Factory";
     self.assertEqual( False, self.P.isSetName() )
     self.P.setName(name)
-    self.assert_(( name == self.P.getName() ))
+    self.assertTrue(( name == self.P.getName() ))
     self.assertEqual( True, self.P.isSetName() )
     if (self.P.getName() == name):
       pass    
@@ -154,7 +154,7 @@ def test_L3_Parameter_units(self):
     units =  "volume";
     self.assertEqual( False, self.P.isSetUnits() )
     self.P.setUnits(units)
-    self.assert_(( units == self.P.getUnits() ))
+    self.assertTrue(( units == self.P.getUnits() ))
     self.assertEqual( True, self.P.isSetUnits() )
     if (self.P.getUnits() == units):
       pass    
@@ -169,7 +169,7 @@ def test_L3_Parameter_value(self):
     self.assertEqual( True, isnan(self.P.getValue()) )
     self.P.setValue(1.5)
     self.assertEqual( True, self.P.isSetValue() )
-    self.assert_( self.P.getValue() == 1.5 )
+    self.assertTrue( self.P.getValue() == 1.5 )
     self.P.unsetValue()
     self.assertEqual( False, self.P.isSetValue() )
     self.assertEqual( True, isnan(self.P.getValue()) )
diff --git a/src/bindings/python/test/sbml/TestL3Reaction.py b/src/bindings/python/test/sbml/TestL3Reaction.py
index c8c49300d9..75e7514e02 100644
--- a/src/bindings/python/test/sbml/TestL3Reaction.py
+++ b/src/bindings/python/test/sbml/TestL3Reaction.py
@@ -50,16 +50,16 @@ def tearDown(self):
     pass  
 
   def test_L3_Reaction_NS(self):
-    self.assert_( self.R.getNamespaces() != None )
-    self.assert_( self.R.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.R.getNamespaces().getURI(0) ))
+    self.assertTrue( self.R.getNamespaces() != None )
+    self.assertTrue( self.R.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.R.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_Reaction_compartment(self):
     compartment =  "cell";
     self.assertEqual( False, self.R.isSetCompartment() )
     self.R.setCompartment(compartment)
-    self.assert_(( compartment == self.R.getCompartment() ))
+    self.assertTrue(( compartment == self.R.getCompartment() ))
     self.assertEqual( True, self.R.isSetCompartment() )
     if (self.R.getCompartment() == compartment):
       pass    
@@ -70,15 +70,15 @@ def test_L3_Reaction_compartment(self):
     pass  
 
   def test_L3_Reaction_create(self):
-    self.assert_( self.R.getTypeCode() == libsbml.SBML_REACTION )
-    self.assert_( self.R.getMetaId() == "" )
-    self.assert_( self.R.getNotes() == None )
-    self.assert_( self.R.getAnnotation() == None )
-    self.assert_( self.R.getId() == "" )
-    self.assert_( self.R.getName() == "" )
-    self.assert_( self.R.getCompartment() == "" )
-    self.assert_( self.R.getFast() == False )
-    self.assert_( self.R.getReversible() == True )
+    self.assertTrue( self.R.getTypeCode() == libsbml.SBML_REACTION )
+    self.assertTrue( self.R.getMetaId() == "" )
+    self.assertTrue( self.R.getNotes() == None )
+    self.assertTrue( self.R.getAnnotation() == None )
+    self.assertTrue( self.R.getId() == "" )
+    self.assertTrue( self.R.getName() == "" )
+    self.assertTrue( self.R.getCompartment() == "" )
+    self.assertTrue( self.R.getFast() == False )
+    self.assertTrue( self.R.getReversible() == True )
     self.assertEqual( False, self.R.isSetId() )
     self.assertEqual( False, self.R.isSetName() )
     self.assertEqual( False, self.R.isSetCompartment() )
@@ -92,19 +92,19 @@ def test_L3_Reaction_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     r = libsbml.Reaction(sbmlns)
-    self.assert_( r.getTypeCode() == libsbml.SBML_REACTION )
-    self.assert_( r.getMetaId() == "" )
-    self.assert_( r.getNotes() == None )
-    self.assert_( r.getAnnotation() == None )
-    self.assert_( r.getLevel() == 3 )
-    self.assert_( r.getVersion() == 1 )
-    self.assert_( r.getNamespaces() != None )
-    self.assert_( r.getNamespaces().getLength() == 2 )
-    self.assert_( r.getId() == "" )
-    self.assert_( r.getName() == "" )
-    self.assert_( r.getCompartment() == "" )
-    self.assert_( r.getFast() == False )
-    self.assert_( r.getReversible() == True )
+    self.assertTrue( r.getTypeCode() == libsbml.SBML_REACTION )
+    self.assertTrue( r.getMetaId() == "" )
+    self.assertTrue( r.getNotes() == None )
+    self.assertTrue( r.getAnnotation() == None )
+    self.assertTrue( r.getLevel() == 3 )
+    self.assertTrue( r.getVersion() == 1 )
+    self.assertTrue( r.getNamespaces() != None )
+    self.assertTrue( r.getNamespaces().getLength() == 2 )
+    self.assertTrue( r.getId() == "" )
+    self.assertTrue( r.getName() == "" )
+    self.assertTrue( r.getCompartment() == "" )
+    self.assertTrue( r.getFast() == False )
+    self.assertTrue( r.getReversible() == True )
     self.assertEqual( False, r.isSetId() )
     self.assertEqual( False, r.isSetName() )
     self.assertEqual( False, r.isSetCompartment() )
@@ -114,13 +114,13 @@ def test_L3_Reaction_createWithNS(self):
     pass  
 
   def test_L3_Reaction_fast(self):
-    self.assert_( self.R.isSetFast() == False )
+    self.assertTrue( self.R.isSetFast() == False )
     self.R.setFast(True)
-    self.assert_( self.R.getFast() == True )
-    self.assert_( self.R.isSetFast() == True )
+    self.assertTrue( self.R.getFast() == True )
+    self.assertTrue( self.R.isSetFast() == True )
     self.R.setFast(False)
-    self.assert_( self.R.getFast() == False )
-    self.assert_( self.R.isSetFast() == True )
+    self.assertTrue( self.R.getFast() == False )
+    self.assertTrue( self.R.isSetFast() == True )
     pass  
 
   def test_L3_Reaction_free_NULL(self):
@@ -143,7 +143,7 @@ def test_L3_Reaction_id(self):
     id =  "mitochondria";
     self.assertEqual( False, self.R.isSetId() )
     self.R.setId(id)
-    self.assert_(( id == self.R.getId() ))
+    self.assertTrue(( id == self.R.getId() ))
     self.assertEqual( True, self.R.isSetId() )
     if (self.R.getId() == id):
       pass    
@@ -153,7 +153,7 @@ def test_L3_Reaction_name(self):
     name =  "My_Favorite_Factory";
     self.assertEqual( False, self.R.isSetName() )
     self.R.setName(name)
-    self.assert_(( name == self.R.getName() ))
+    self.assertTrue(( name == self.R.getName() ))
     self.assertEqual( True, self.R.isSetName() )
     if (self.R.getName() == name):
       pass    
@@ -164,13 +164,13 @@ def test_L3_Reaction_name(self):
     pass  
 
   def test_L3_Reaction_reversible(self):
-    self.assert_( self.R.isSetReversible() == False )
+    self.assertTrue( self.R.isSetReversible() == False )
     self.R.setReversible(True)
-    self.assert_( self.R.getReversible() == True )
-    self.assert_( self.R.isSetReversible() == True )
+    self.assertTrue( self.R.getReversible() == True )
+    self.assertTrue( self.R.isSetReversible() == True )
     self.R.setReversible(False)
-    self.assert_( self.R.getReversible() == False )
-    self.assert_( self.R.isSetReversible() == True )
+    self.assertTrue( self.R.getReversible() == False )
+    self.assertTrue( self.R.isSetReversible() == True )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestL3Species.py b/src/bindings/python/test/sbml/TestL3Species.py
index 1d880fce23..5aeb672804 100644
--- a/src/bindings/python/test/sbml/TestL3Species.py
+++ b/src/bindings/python/test/sbml/TestL3Species.py
@@ -56,7 +56,7 @@ def test_L3_Species_ModelHistory(self):
     (self.S).setMetaId("_3")
     history = libsbml.ModelHistory()
     i = (self.S).setModelHistory(history)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, (self.S).isSetModelHistory() )
     mc = libsbml.ModelCreator()
     date = libsbml.Date(2005,12,30,12,15,45,1,2,0)
@@ -68,56 +68,56 @@ def test_L3_Species_ModelHistory(self):
     history.setCreatedDate(date)
     history.setModifiedDate(date)
     i = (self.S).setModelHistory(history)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, (self.S).isSetModelHistory() )
     i = (self.S).unsetModelHistory()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, (self.S).isSetModelHistory() )
-    self.assert_( (self.S).getModelHistory() == None )
+    self.assertTrue( (self.S).getModelHistory() == None )
     _dummyList = [ history ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_L3_Species_NS(self):
-    self.assert_( self.S.getNamespaces() != None )
-    self.assert_( self.S.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.S.getNamespaces().getURI(0) ))
+    self.assertTrue( self.S.getNamespaces() != None )
+    self.assertTrue( self.S.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.S.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_Species_boundaryCondition(self):
-    self.assert_( self.S.isSetBoundaryCondition() == False )
+    self.assertTrue( self.S.isSetBoundaryCondition() == False )
     self.S.setBoundaryCondition(True)
-    self.assert_( self.S.getBoundaryCondition() == True )
-    self.assert_( self.S.isSetBoundaryCondition() == True )
+    self.assertTrue( self.S.getBoundaryCondition() == True )
+    self.assertTrue( self.S.isSetBoundaryCondition() == True )
     self.S.setBoundaryCondition(False)
-    self.assert_( self.S.getBoundaryCondition() == False )
-    self.assert_( self.S.isSetBoundaryCondition() == True )
+    self.assertTrue( self.S.getBoundaryCondition() == False )
+    self.assertTrue( self.S.isSetBoundaryCondition() == True )
     pass  
 
   def test_L3_Species_compartment(self):
     compartment =  "cell";
     self.assertEqual( False, self.S.isSetCompartment() )
     self.S.setCompartment(compartment)
-    self.assert_(( compartment == self.S.getCompartment() ))
+    self.assertTrue(( compartment == self.S.getCompartment() ))
     self.assertEqual( True, self.S.isSetCompartment() )
     if (self.S.getCompartment() == compartment):
       pass    
     pass  
 
   def test_L3_Species_constant(self):
-    self.assert_( self.S.isSetConstant() == False )
+    self.assertTrue( self.S.isSetConstant() == False )
     self.S.setConstant(True)
-    self.assert_( self.S.getConstant() == True )
-    self.assert_( self.S.isSetConstant() == True )
+    self.assertTrue( self.S.getConstant() == True )
+    self.assertTrue( self.S.isSetConstant() == True )
     self.S.setConstant(False)
-    self.assert_( self.S.getConstant() == False )
-    self.assert_( self.S.isSetConstant() == True )
+    self.assertTrue( self.S.getConstant() == False )
+    self.assertTrue( self.S.isSetConstant() == True )
     pass  
 
   def test_L3_Species_conversionFactor(self):
     units =  "volume";
     self.assertEqual( False, self.S.isSetConversionFactor() )
     self.S.setConversionFactor(units)
-    self.assert_(( units == self.S.getConversionFactor() ))
+    self.assertTrue(( units == self.S.getConversionFactor() ))
     self.assertEqual( True, self.S.isSetConversionFactor() )
     if (self.S.getConversionFactor() == units):
       pass    
@@ -128,20 +128,20 @@ def test_L3_Species_conversionFactor(self):
     pass  
 
   def test_L3_Species_create(self):
-    self.assert_( self.S.getTypeCode() == libsbml.SBML_SPECIES )
-    self.assert_( self.S.getMetaId() == "" )
-    self.assert_( self.S.getNotes() == None )
-    self.assert_( self.S.getAnnotation() == None )
-    self.assert_( self.S.getId() == "" )
-    self.assert_( self.S.getName() == "" )
-    self.assert_( self.S.getCompartment() == "" )
+    self.assertTrue( self.S.getTypeCode() == libsbml.SBML_SPECIES )
+    self.assertTrue( self.S.getMetaId() == "" )
+    self.assertTrue( self.S.getNotes() == None )
+    self.assertTrue( self.S.getAnnotation() == None )
+    self.assertTrue( self.S.getId() == "" )
+    self.assertTrue( self.S.getName() == "" )
+    self.assertTrue( self.S.getCompartment() == "" )
     self.assertEqual( True, isnan(self.S.getInitialAmount()) )
     self.assertEqual( True, isnan(self.S.getInitialConcentration()) )
-    self.assert_( self.S.getSubstanceUnits() == "" )
-    self.assert_( self.S.getHasOnlySubstanceUnits() == False )
-    self.assert_( self.S.getBoundaryCondition() == False )
-    self.assert_( self.S.getConstant() == False )
-    self.assert_( self.S.getConversionFactor() == "" )
+    self.assertTrue( self.S.getSubstanceUnits() == "" )
+    self.assertTrue( self.S.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( self.S.getBoundaryCondition() == False )
+    self.assertTrue( self.S.getConstant() == False )
+    self.assertTrue( self.S.getConversionFactor() == "" )
     self.assertEqual( False, self.S.isSetId() )
     self.assertEqual( False, self.S.isSetName() )
     self.assertEqual( False, self.S.isSetCompartment() )
@@ -160,24 +160,24 @@ def test_L3_Species_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     s = libsbml.Species(sbmlns)
-    self.assert_( s.getTypeCode() == libsbml.SBML_SPECIES )
-    self.assert_( s.getMetaId() == "" )
-    self.assert_( s.getNotes() == None )
-    self.assert_( s.getAnnotation() == None )
-    self.assert_( s.getLevel() == 3 )
-    self.assert_( s.getVersion() == 1 )
-    self.assert_( s.getNamespaces() != None )
-    self.assert_( s.getNamespaces().getLength() == 2 )
-    self.assert_( s.getId() == "" )
-    self.assert_( s.getName() == "" )
-    self.assert_( s.getCompartment() == "" )
+    self.assertTrue( s.getTypeCode() == libsbml.SBML_SPECIES )
+    self.assertTrue( s.getMetaId() == "" )
+    self.assertTrue( s.getNotes() == None )
+    self.assertTrue( s.getAnnotation() == None )
+    self.assertTrue( s.getLevel() == 3 )
+    self.assertTrue( s.getVersion() == 1 )
+    self.assertTrue( s.getNamespaces() != None )
+    self.assertTrue( s.getNamespaces().getLength() == 2 )
+    self.assertTrue( s.getId() == "" )
+    self.assertTrue( s.getName() == "" )
+    self.assertTrue( s.getCompartment() == "" )
     self.assertEqual( True, isnan(s.getInitialAmount()) )
     self.assertEqual( True, isnan(s.getInitialConcentration()) )
-    self.assert_( s.getSubstanceUnits() == "" )
-    self.assert_( s.getHasOnlySubstanceUnits() == False )
-    self.assert_( s.getBoundaryCondition() == False )
-    self.assert_( s.getConstant() == False )
-    self.assert_( s.getConversionFactor() == "" )
+    self.assertTrue( s.getSubstanceUnits() == "" )
+    self.assertTrue( s.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( s.getBoundaryCondition() == False )
+    self.assertTrue( s.getConstant() == False )
+    self.assertTrue( s.getConversionFactor() == "" )
     self.assertEqual( False, s.isSetId() )
     self.assertEqual( False, s.isSetName() )
     self.assertEqual( False, s.isSetCompartment() )
@@ -196,13 +196,13 @@ def test_L3_Species_free_NULL(self):
     pass  
 
   def test_L3_Species_hasOnlySubstanceUnits(self):
-    self.assert_( self.S.isSetHasOnlySubstanceUnits() == False )
+    self.assertTrue( self.S.isSetHasOnlySubstanceUnits() == False )
     self.S.setHasOnlySubstanceUnits(True)
-    self.assert_( self.S.getHasOnlySubstanceUnits() == True )
-    self.assert_( self.S.isSetHasOnlySubstanceUnits() == True )
+    self.assertTrue( self.S.getHasOnlySubstanceUnits() == True )
+    self.assertTrue( self.S.isSetHasOnlySubstanceUnits() == True )
     self.S.setHasOnlySubstanceUnits(False)
-    self.assert_( self.S.getHasOnlySubstanceUnits() == False )
-    self.assert_( self.S.isSetHasOnlySubstanceUnits() == True )
+    self.assertTrue( self.S.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( self.S.isSetHasOnlySubstanceUnits() == True )
     pass  
 
   def test_L3_Species_hasRequiredAttributes(self):
@@ -225,7 +225,7 @@ def test_L3_Species_id(self):
     id =  "mitochondria";
     self.assertEqual( False, self.S.isSetId() )
     self.S.setId(id)
-    self.assert_(( id == self.S.getId() ))
+    self.assertTrue(( id == self.S.getId() ))
     self.assertEqual( True, self.S.isSetId() )
     if (self.S.getId() == id):
       pass    
@@ -233,16 +233,16 @@ def test_L3_Species_id(self):
 
   def test_L3_Species_initDefaults(self):
     s = libsbml.Species(3,1)
-    self.assert_( s.getId() == "" )
-    self.assert_( s.getName() == "" )
-    self.assert_( s.getCompartment() == "" )
+    self.assertTrue( s.getId() == "" )
+    self.assertTrue( s.getName() == "" )
+    self.assertTrue( s.getCompartment() == "" )
     self.assertEqual( True, isnan(s.getInitialAmount()) )
     self.assertEqual( True, isnan(s.getInitialConcentration()) )
-    self.assert_( s.getSubstanceUnits() == "" )
-    self.assert_( s.getHasOnlySubstanceUnits() == False )
-    self.assert_( s.getBoundaryCondition() == False )
-    self.assert_( s.getConstant() == False )
-    self.assert_( s.getConversionFactor() == "" )
+    self.assertTrue( s.getSubstanceUnits() == "" )
+    self.assertTrue( s.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( s.getBoundaryCondition() == False )
+    self.assertTrue( s.getConstant() == False )
+    self.assertTrue( s.getConversionFactor() == "" )
     self.assertEqual( False, s.isSetId() )
     self.assertEqual( False, s.isSetName() )
     self.assertEqual( False, s.isSetCompartment() )
@@ -254,16 +254,16 @@ def test_L3_Species_initDefaults(self):
     self.assertEqual( False, s.isSetConstant() )
     self.assertEqual( False, s.isSetConversionFactor() )
     s.initDefaults()
-    self.assert_( s.getId() == "" )
-    self.assert_( s.getName() == "" )
-    self.assert_( s.getCompartment() == "" )
+    self.assertTrue( s.getId() == "" )
+    self.assertTrue( s.getName() == "" )
+    self.assertTrue( s.getCompartment() == "" )
     self.assertEqual( True, isnan(s.getInitialAmount()) )
     self.assertEqual( True, isnan(s.getInitialConcentration()) )
-    self.assert_(( "mole"  == s.getSubstanceUnits() ))
-    self.assert_( s.getHasOnlySubstanceUnits() == False )
-    self.assert_( s.getBoundaryCondition() == False )
-    self.assert_( s.getConstant() == False )
-    self.assert_( s.getConversionFactor() == "" )
+    self.assertTrue(( "mole"  == s.getSubstanceUnits() ))
+    self.assertTrue( s.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( s.getBoundaryCondition() == False )
+    self.assertTrue( s.getConstant() == False )
+    self.assertTrue( s.getConversionFactor() == "" )
     self.assertEqual( False, s.isSetId() )
     self.assertEqual( False, s.isSetName() )
     self.assertEqual( False, s.isSetCompartment() )
@@ -282,7 +282,7 @@ def test_L3_Species_initialAmount(self):
     self.assertEqual( False, self.S.isSetInitialAmount() )
     self.assertEqual( True, isnan(self.S.getInitialAmount()) )
     self.S.setInitialAmount(initialAmount)
-    self.assert_( self.S.getInitialAmount() == initialAmount )
+    self.assertTrue( self.S.getInitialAmount() == initialAmount )
     self.assertEqual( True, self.S.isSetInitialAmount() )
     self.S.unsetInitialAmount()
     self.assertEqual( False, self.S.isSetInitialAmount() )
@@ -294,7 +294,7 @@ def test_L3_Species_initialConcentration(self):
     self.assertEqual( False, self.S.isSetInitialConcentration() )
     self.assertEqual( True, isnan(self.S.getInitialConcentration()) )
     self.S.setInitialConcentration(initialConcentration)
-    self.assert_( self.S.getInitialConcentration() == initialConcentration )
+    self.assertTrue( self.S.getInitialConcentration() == initialConcentration )
     self.assertEqual( True, self.S.isSetInitialConcentration() )
     self.S.unsetInitialConcentration()
     self.assertEqual( False, self.S.isSetInitialConcentration() )
@@ -305,7 +305,7 @@ def test_L3_Species_name(self):
     name =  "My_Favorite_Factory";
     self.assertEqual( False, self.S.isSetName() )
     self.S.setName(name)
-    self.assert_(( name == self.S.getName() ))
+    self.assertTrue(( name == self.S.getName() ))
     self.assertEqual( True, self.S.isSetName() )
     if (self.S.getName() == name):
       pass    
@@ -319,7 +319,7 @@ def test_L3_Species_substanceUnits(self):
     units =  "volume";
     self.assertEqual( False, self.S.isSetSubstanceUnits() )
     self.S.setSubstanceUnits(units)
-    self.assert_(( units == self.S.getSubstanceUnits() ))
+    self.assertTrue(( units == self.S.getSubstanceUnits() ))
     self.assertEqual( True, self.S.isSetSubstanceUnits() )
     if (self.S.getSubstanceUnits() == units):
       pass    
diff --git a/src/bindings/python/test/sbml/TestL3SpeciesReference.py b/src/bindings/python/test/sbml/TestL3SpeciesReference.py
index 40c31b5e81..a2a6eef444 100644
--- a/src/bindings/python/test/sbml/TestL3SpeciesReference.py
+++ b/src/bindings/python/test/sbml/TestL3SpeciesReference.py
@@ -53,31 +53,31 @@ def tearDown(self):
     pass  
 
   def test_L3_SpeciesReference_NS(self):
-    self.assert_( self.SR.getNamespaces() != None )
-    self.assert_( self.SR.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.SR.getNamespaces().getURI(0) ))
+    self.assertTrue( self.SR.getNamespaces() != None )
+    self.assertTrue( self.SR.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.SR.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_SpeciesReference_constant(self):
-    self.assert_( self.SR.isSetConstant() == False )
+    self.assertTrue( self.SR.isSetConstant() == False )
     self.SR.setConstant(True)
-    self.assert_( self.SR.getConstant() == True )
-    self.assert_( self.SR.isSetConstant() == True )
+    self.assertTrue( self.SR.getConstant() == True )
+    self.assertTrue( self.SR.isSetConstant() == True )
     self.SR.setConstant(False)
-    self.assert_( self.SR.getConstant() == False )
-    self.assert_( self.SR.isSetConstant() == True )
+    self.assertTrue( self.SR.getConstant() == False )
+    self.assertTrue( self.SR.isSetConstant() == True )
     pass  
 
   def test_L3_SpeciesReference_create(self):
-    self.assert_( self.SR.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
-    self.assert_( self.SR.getMetaId() == "" )
-    self.assert_( self.SR.getNotes() == None )
-    self.assert_( self.SR.getAnnotation() == None )
-    self.assert_( self.SR.getId() == "" )
-    self.assert_( self.SR.getName() == "" )
-    self.assert_( self.SR.getSpecies() == "" )
+    self.assertTrue( self.SR.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
+    self.assertTrue( self.SR.getMetaId() == "" )
+    self.assertTrue( self.SR.getNotes() == None )
+    self.assertTrue( self.SR.getAnnotation() == None )
+    self.assertTrue( self.SR.getId() == "" )
+    self.assertTrue( self.SR.getName() == "" )
+    self.assertTrue( self.SR.getSpecies() == "" )
     self.assertEqual( True, isnan(self.SR.getStoichiometry()) )
-    self.assert_( self.SR.getConstant() == False )
+    self.assertTrue( self.SR.getConstant() == False )
     self.assertEqual( False, self.SR.isSetId() )
     self.assertEqual( False, self.SR.isSetName() )
     self.assertEqual( False, self.SR.isSetSpecies() )
@@ -91,19 +91,19 @@ def test_L3_SpeciesReference_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     sr = libsbml.SpeciesReference(sbmlns)
-    self.assert_( sr.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
-    self.assert_( sr.getMetaId() == "" )
-    self.assert_( sr.getNotes() == None )
-    self.assert_( sr.getAnnotation() == None )
-    self.assert_( sr.getLevel() == 3 )
-    self.assert_( sr.getVersion() == 1 )
-    self.assert_( sr.getNamespaces() != None )
-    self.assert_( sr.getNamespaces().getLength() == 2 )
-    self.assert_( sr.getId() == "" )
-    self.assert_( sr.getName() == "" )
-    self.assert_( sr.getSpecies() == "" )
+    self.assertTrue( sr.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
+    self.assertTrue( sr.getMetaId() == "" )
+    self.assertTrue( sr.getNotes() == None )
+    self.assertTrue( sr.getAnnotation() == None )
+    self.assertTrue( sr.getLevel() == 3 )
+    self.assertTrue( sr.getVersion() == 1 )
+    self.assertTrue( sr.getNamespaces() != None )
+    self.assertTrue( sr.getNamespaces().getLength() == 2 )
+    self.assertTrue( sr.getId() == "" )
+    self.assertTrue( sr.getName() == "" )
+    self.assertTrue( sr.getSpecies() == "" )
     self.assertEqual( True, isnan(sr.getStoichiometry()) )
-    self.assert_( sr.getConstant() == False )
+    self.assertTrue( sr.getConstant() == False )
     self.assertEqual( False, sr.isSetId() )
     self.assertEqual( False, sr.isSetName() )
     self.assertEqual( False, sr.isSetSpecies() )
@@ -130,7 +130,7 @@ def test_L3_SpeciesReference_id(self):
     id =  "mitochondria";
     self.assertEqual( False, self.SR.isSetId() )
     self.SR.setId(id)
-    self.assert_(( id == self.SR.getId() ))
+    self.assertTrue(( id == self.SR.getId() ))
     self.assertEqual( True, self.SR.isSetId() )
     if (self.SR.getId() == id):
       pass    
@@ -140,7 +140,7 @@ def test_L3_SpeciesReference_name(self):
     name =  "My_Favorite_Factory";
     self.assertEqual( False, self.SR.isSetName() )
     self.SR.setName(name)
-    self.assert_(( name == self.SR.getName() ))
+    self.assertTrue(( name == self.SR.getName() ))
     self.assertEqual( True, self.SR.isSetName() )
     if (self.SR.getName() == name):
       pass    
@@ -154,7 +154,7 @@ def test_L3_SpeciesReference_species(self):
     species =  "cell";
     self.assertEqual( False, self.SR.isSetSpecies() )
     self.SR.setSpecies(species)
-    self.assert_(( species == self.SR.getSpecies() ))
+    self.assertTrue(( species == self.SR.getSpecies() ))
     self.assertEqual( True, self.SR.isSetSpecies() )
     if (self.SR.getSpecies() == species):
       pass    
@@ -165,7 +165,7 @@ def test_L3_SpeciesReference_stoichiometry(self):
     self.assertEqual( False, self.SR.isSetStoichiometry() )
     self.assertEqual( True, isnan(self.SR.getStoichiometry()) )
     self.SR.setStoichiometry(stoichiometry)
-    self.assert_( self.SR.getStoichiometry() == stoichiometry )
+    self.assertTrue( self.SR.getStoichiometry() == stoichiometry )
     self.assertEqual( True, self.SR.isSetStoichiometry() )
     self.SR.unsetStoichiometry()
     self.assertEqual( False, self.SR.isSetStoichiometry() )
diff --git a/src/bindings/python/test/sbml/TestL3Trigger.py b/src/bindings/python/test/sbml/TestL3Trigger.py
index 18e0cfe9c3..2f48750c56 100644
--- a/src/bindings/python/test/sbml/TestL3Trigger.py
+++ b/src/bindings/python/test/sbml/TestL3Trigger.py
@@ -50,54 +50,54 @@ def tearDown(self):
     pass  
 
   def test_L3Trigger_create(self):
-    self.assert_( self.T.getTypeCode() == libsbml.SBML_TRIGGER )
-    self.assert_( self.T.getMetaId() == "" )
-    self.assert_( self.T.getNotes() == None )
-    self.assert_( self.T.getAnnotation() == None )
-    self.assert_( self.T.getMath() == None )
-    self.assert_( self.T.getInitialValue() == True )
-    self.assert_( self.T.getPersistent() == True )
-    self.assert_( self.T.isSetInitialValue() == False )
-    self.assert_( self.T.isSetPersistent() == False )
+    self.assertTrue( self.T.getTypeCode() == libsbml.SBML_TRIGGER )
+    self.assertTrue( self.T.getMetaId() == "" )
+    self.assertTrue( self.T.getNotes() == None )
+    self.assertTrue( self.T.getAnnotation() == None )
+    self.assertTrue( self.T.getMath() == None )
+    self.assertTrue( self.T.getInitialValue() == True )
+    self.assertTrue( self.T.getPersistent() == True )
+    self.assertTrue( self.T.isSetInitialValue() == False )
+    self.assertTrue( self.T.isSetPersistent() == False )
     pass  
 
   def test_L3Trigger_setInitialValue(self):
     i = self.T.setInitialValue(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.T.getInitialValue() == False )
-    self.assert_( self.T.isSetInitialValue() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.T.getInitialValue() == False )
+    self.assertTrue( self.T.isSetInitialValue() == True )
     i = self.T.setInitialValue(True)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.T.getInitialValue() == True )
-    self.assert_( self.T.isSetInitialValue() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.T.getInitialValue() == True )
+    self.assertTrue( self.T.isSetInitialValue() == True )
     pass  
 
   def test_L3Trigger_setInitialValue1(self):
     t = libsbml.Trigger(2,4)
     i = t.setInitialValue(False)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( self.T.getInitialValue() == True )
-    self.assert_( self.T.isSetInitialValue() == False )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.T.getInitialValue() == True )
+    self.assertTrue( self.T.isSetInitialValue() == False )
     _dummyList = [ t ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_L3Trigger_setPersistent(self):
     i = self.T.setPersistent(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.T.getPersistent() == False )
-    self.assert_( self.T.isSetPersistent() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.T.getPersistent() == False )
+    self.assertTrue( self.T.isSetPersistent() == True )
     i = self.T.setPersistent(True)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.T.getPersistent() == True )
-    self.assert_( self.T.isSetPersistent() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.T.getPersistent() == True )
+    self.assertTrue( self.T.isSetPersistent() == True )
     pass  
 
   def test_L3Trigger_setPersistent1(self):
     t = libsbml.Trigger(2,4)
     i = t.setPersistent(False)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( self.T.getPersistent() == True )
-    self.assert_( self.T.isSetPersistent() == False )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.T.getPersistent() == True )
+    self.assertTrue( self.T.isSetPersistent() == False )
     _dummyList = [ t ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestL3Unit.py b/src/bindings/python/test/sbml/TestL3Unit.py
index 107947fad9..d8abc30d7b 100644
--- a/src/bindings/python/test/sbml/TestL3Unit.py
+++ b/src/bindings/python/test/sbml/TestL3Unit.py
@@ -54,20 +54,20 @@ def tearDown(self):
     pass  
 
   def test_L3_Unit_NS(self):
-    self.assert_( self.U.getNamespaces() != None )
-    self.assert_( self.U.getNamespaces().getLength() == 1 )
-    self.assert_((     "http://www.sbml.org/sbml/level3/version1/core" == self.U.getNamespaces().getURI(0) ))
+    self.assertTrue( self.U.getNamespaces() != None )
+    self.assertTrue( self.U.getNamespaces().getLength() == 1 )
+    self.assertTrue((     "http://www.sbml.org/sbml/level3/version1/core" == self.U.getNamespaces().getURI(0) ))
     pass  
 
   def test_L3_Unit_create(self):
-    self.assert_( self.U.getTypeCode() == libsbml.SBML_UNIT )
-    self.assert_( self.U.getMetaId() == "" )
-    self.assert_( self.U.getNotes() == None )
-    self.assert_( self.U.getAnnotation() == None )
-    self.assert_( self.U.getKind() == libsbml.UNIT_KIND_INVALID )
+    self.assertTrue( self.U.getTypeCode() == libsbml.SBML_UNIT )
+    self.assertTrue( self.U.getMetaId() == "" )
+    self.assertTrue( self.U.getNotes() == None )
+    self.assertTrue( self.U.getAnnotation() == None )
+    self.assertTrue( self.U.getKind() == libsbml.UNIT_KIND_INVALID )
     self.assertEqual( True, isnan(self.U.getExponentAsDouble()) )
     self.assertEqual( True, isnan(self.U.getMultiplier()) )
-    self.assert_( self.U.getScale() == SBML_INT_MAX )
+    self.assertTrue( self.U.getScale() == SBML_INT_MAX )
     self.assertEqual( False, self.U.isSetKind() )
     self.assertEqual( False, self.U.isSetExponent() )
     self.assertEqual( False, self.U.isSetMultiplier() )
@@ -80,15 +80,15 @@ def test_L3_Unit_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     u = libsbml.Unit(sbmlns)
-    self.assert_( u.getTypeCode() == libsbml.SBML_UNIT )
-    self.assert_( u.getMetaId() == "" )
-    self.assert_( u.getNotes() == None )
-    self.assert_( u.getAnnotation() == None )
-    self.assert_( u.getLevel() == 3 )
-    self.assert_( u.getVersion() == 1 )
-    self.assert_( u.getNamespaces() != None )
-    self.assert_( u.getNamespaces().getLength() == 2 )
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_INVALID )
+    self.assertTrue( u.getTypeCode() == libsbml.SBML_UNIT )
+    self.assertTrue( u.getMetaId() == "" )
+    self.assertTrue( u.getNotes() == None )
+    self.assertTrue( u.getAnnotation() == None )
+    self.assertTrue( u.getLevel() == 3 )
+    self.assertTrue( u.getVersion() == 1 )
+    self.assertTrue( u.getNamespaces() != None )
+    self.assertTrue( u.getNamespaces().getLength() == 2 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_INVALID )
     self.assertEqual( True, isnan(u.getExponentAsDouble()) )
     self.assertEqual( True, isnan(u.getMultiplier()) )
     self.assertEqual( False, u.isSetKind() )
@@ -103,7 +103,7 @@ def test_L3_Unit_exponent(self):
     self.assertEqual( False, self.U.isSetExponent() )
     self.assertEqual( True, isnan(self.U.getExponentAsDouble()) )
     self.U.setExponent(exponent)
-    self.assert_( self.U.getExponentAsDouble() == exponent )
+    self.assertTrue( self.U.getExponentAsDouble() == exponent )
     self.assertEqual( True, self.U.isSetExponent() )
     pass  
 
@@ -129,7 +129,7 @@ def test_L3_Unit_kind(self):
     kind =  "mole";
     self.assertEqual( False, self.U.isSetKind() )
     self.U.setKind(libsbml.UnitKind_forName(kind))
-    self.assert_( self.U.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( self.U.getKind() == libsbml.UNIT_KIND_MOLE )
     self.assertEqual( True, self.U.isSetKind() )
     pass  
 
@@ -138,16 +138,16 @@ def test_L3_Unit_multiplier(self):
     self.assertEqual( False, self.U.isSetMultiplier() )
     self.assertEqual( True, isnan(self.U.getMultiplier()) )
     self.U.setMultiplier(multiplier)
-    self.assert_( self.U.getMultiplier() == multiplier )
+    self.assertTrue( self.U.getMultiplier() == multiplier )
     self.assertEqual( True, self.U.isSetMultiplier() )
     pass  
 
   def test_L3_Unit_scale(self):
     scale = 2
     self.assertEqual( False, self.U.isSetScale() )
-    self.assert_( self.U.getScale() == SBML_INT_MAX )
+    self.assertTrue( self.U.getScale() == SBML_INT_MAX )
     self.U.setScale(scale)
-    self.assert_( self.U.getScale() == scale )
+    self.assertTrue( self.U.getScale() == scale )
     self.assertEqual( True, self.U.isSetScale() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestListOf.py b/src/bindings/python/test/sbml/TestListOf.py
index bca05cdc21..30cb6e415a 100644
--- a/src/bindings/python/test/sbml/TestListOf.py
+++ b/src/bindings/python/test/sbml/TestListOf.py
@@ -41,15 +41,15 @@ def test_ListOf_append(self):
     m = libsbml.Model(2,4)
     m.createCompartment()
     loc = m.getListOfCompartments()
-    self.assert_( loc.size() == 1 )
+    self.assertTrue( loc.size() == 1 )
     c = libsbml.Compartment(2,4)
     i = loc.append(c)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( loc.size() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( loc.size() == 2 )
     sp = libsbml.Species(2,4)
     i = loc.append(sp)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( loc.size() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( loc.size() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ sp ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -62,15 +62,15 @@ def test_ListOf_clear(self):
     lo.append(sp)
     lo.append(sp)
     lo.append(sp)
-    self.assert_( lo.size() == 5 )
+    self.assertTrue( lo.size() == 5 )
     lo.clear(True)
-    self.assert_( lo.size() == 0 )
+    self.assertTrue( lo.size() == 0 )
     lo.append(sp)
     lo.append(sp)
     lo.append(sp)
     lo.append(sp)
     lo.appendAndOwn(sp)
-    self.assert_( lo.size() == 5 )
+    self.assertTrue( lo.size() == 5 )
     elem = lo.get(0)
     _dummyList = [ elem ]; _dummyList[:] = []; del _dummyList
     elem = lo.get(1)
@@ -82,17 +82,17 @@ def test_ListOf_clear(self):
     elem = lo.get(4)
     _dummyList = [ elem ]; _dummyList[:] = []; del _dummyList
     lo.clear(False)
-    self.assert_( lo.size() == 0 )
+    self.assertTrue( lo.size() == 0 )
     _dummyList = [ lo ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_ListOf_create(self):
     lo = libsbml.ListOf(2,4)
-    self.assert_( lo.getTypeCode() == libsbml.SBML_LIST_OF )
-    self.assert_( lo.getNotes() == None )
-    self.assert_( lo.getAnnotation() == None )
-    self.assert_( lo.getMetaId() == "" )
-    self.assert_( lo.size() == 0 )
+    self.assertTrue( lo.getTypeCode() == libsbml.SBML_LIST_OF )
+    self.assertTrue( lo.getNotes() == None )
+    self.assertTrue( lo.getAnnotation() == None )
+    self.assertTrue( lo.getMetaId() == "" )
+    self.assertTrue( lo.size() == 0 )
     _dummyList = [ lo ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -103,13 +103,13 @@ def test_ListOf_free_NULL(self):
   def test_ListOf_remove(self):
     lo = libsbml.ListOf(2,4)
     sp = libsbml.Species(2,4)
-    self.assert_( lo.size() == 0 )
+    self.assertTrue( lo.size() == 0 )
     lo.append(sp)
     lo.append(sp)
     lo.append(sp)
     lo.append(sp)
     lo.append(sp)
-    self.assert_( lo.size() == 5 )
+    self.assertTrue( lo.size() == 5 )
     elem = lo.remove(0)
     _dummyList = [ elem ]; _dummyList[:] = []; del _dummyList
     elem = lo.remove(0)
@@ -120,13 +120,13 @@ def test_ListOf_remove(self):
     _dummyList = [ elem ]; _dummyList[:] = []; del _dummyList
     elem = lo.remove(0)
     _dummyList = [ elem ]; _dummyList[:] = []; del _dummyList
-    self.assert_( lo.size() == 0 )
+    self.assertTrue( lo.size() == 0 )
     lo.append(sp)
     lo.append(sp)
     lo.append(sp)
     lo.append(sp)
     lo.appendAndOwn(sp)
-    self.assert_( lo.size() == 5 )
+    self.assertTrue( lo.size() == 5 )
     _dummyList = [ lo ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestModel.py b/src/bindings/python/test/sbml/TestModel.py
index c3f071e761..89ee34ae5f 100644
--- a/src/bindings/python/test/sbml/TestModel.py
+++ b/src/bindings/python/test/sbml/TestModel.py
@@ -73,31 +73,31 @@ def test_KineticLaw_getParameterById(self):
     r1.setKineticLaw(kl)
     self.M.addReaction(r1)
     kl1 = self.M.getReaction(0).getKineticLaw()
-    self.assert_( kl1.getParameter( "k1" ) != k3 )
-    self.assert_( kl1.getParameter( "k1" ) != k1 )
-    self.assert_( kl1.getParameter( "k2" ) != k4 )
-    self.assert_( kl1.getParameter( "k3" ) == None )
+    self.assertTrue( kl1.getParameter( "k1" ) != k3 )
+    self.assertTrue( kl1.getParameter( "k1" ) != k1 )
+    self.assertTrue( kl1.getParameter( "k2" ) != k4 )
+    self.assertTrue( kl1.getParameter( "k3" ) == None )
     pass  
 
   def test_Model_addCompartment(self):
     c = libsbml.Compartment(2,4)
     c.setId( "c")
     self.M.addCompartment(c)
-    self.assert_( self.M.getNumCompartments() == 1 )
+    self.assertTrue( self.M.getNumCompartments() == 1 )
     pass  
 
   def test_Model_addParameter(self):
     p = libsbml.Parameter(2,4)
     p.setId( "p")
     self.M.addParameter(p)
-    self.assert_( self.M.getNumParameters() == 1 )
+    self.assertTrue( self.M.getNumParameters() == 1 )
     pass  
 
   def test_Model_addReaction(self):
     r = libsbml.Reaction(2,4)
     r.setId( "r")
     self.M.addReaction(r)
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     pass  
 
   def test_Model_addRules(self):
@@ -112,7 +112,7 @@ def test_Model_addRules(self):
     self.M.addRule(r1)
     self.M.addRule(r2)
     self.M.addRule(r3)
-    self.assert_( self.M.getNumRules() == 3 )
+    self.assertTrue( self.M.getNumRules() == 3 )
     pass  
 
   def test_Model_addSpecies(self):
@@ -120,7 +120,7 @@ def test_Model_addSpecies(self):
     s.setId( "s")
     s.setCompartment( "c")
     self.M.addSpecies(s)
-    self.assert_( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
     pass  
 
   def test_Model_add_get_Event(self):
@@ -134,10 +134,10 @@ def test_Model_add_get_Event(self):
     e2.createEventAssignment()
     self.M.addEvent(e1)
     self.M.addEvent(e2)
-    self.assert_( self.M.getNumEvents() == 2 )
-    self.assert_( self.M.getEvent(0) != e1 )
-    self.assert_( self.M.getEvent(1) != e2 )
-    self.assert_( self.M.getEvent(2) == None )
+    self.assertTrue( self.M.getNumEvents() == 2 )
+    self.assertTrue( self.M.getEvent(0) != e1 )
+    self.assertTrue( self.M.getEvent(1) != e2 )
+    self.assertTrue( self.M.getEvent(2) == None )
     pass  
 
   def test_Model_add_get_FunctionDefinitions(self):
@@ -149,10 +149,10 @@ def test_Model_add_get_FunctionDefinitions(self):
     fd2.setMath(libsbml.parseFormula("2"))
     self.M.addFunctionDefinition(fd1)
     self.M.addFunctionDefinition(fd2)
-    self.assert_( self.M.getNumFunctionDefinitions() == 2 )
-    self.assert_( self.M.getFunctionDefinition(0) != fd1 )
-    self.assert_( self.M.getFunctionDefinition(1) != fd2 )
-    self.assert_( self.M.getFunctionDefinition(2) == None )
+    self.assertTrue( self.M.getNumFunctionDefinitions() == 2 )
+    self.assertTrue( self.M.getFunctionDefinition(0) != fd1 )
+    self.assertTrue( self.M.getFunctionDefinition(1) != fd2 )
+    self.assertTrue( self.M.getFunctionDefinition(2) == None )
     pass  
 
   def test_Model_add_get_UnitDefinitions(self):
@@ -164,110 +164,110 @@ def test_Model_add_get_UnitDefinitions(self):
     ud2.createUnit()
     self.M.addUnitDefinition(ud1)
     self.M.addUnitDefinition(ud2)
-    self.assert_( self.M.getNumUnitDefinitions() == 2 )
-    self.assert_( self.M.getUnitDefinition(0) != ud1 )
-    self.assert_( self.M.getUnitDefinition(1) != ud2 )
-    self.assert_( self.M.getUnitDefinition(2) == None )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 2 )
+    self.assertTrue( self.M.getUnitDefinition(0) != ud1 )
+    self.assertTrue( self.M.getUnitDefinition(1) != ud2 )
+    self.assertTrue( self.M.getUnitDefinition(2) == None )
     pass  
 
   def test_Model_create(self):
-    self.assert_( self.M.getTypeCode() == libsbml.SBML_MODEL )
-    self.assert_( self.M.getMetaId() == "" )
-    self.assert_( self.M.getNotes() == None )
-    self.assert_( self.M.getAnnotation() == None )
-    self.assert_( self.M.getId() == "" )
-    self.assert_( self.M.getName() == "" )
+    self.assertTrue( self.M.getTypeCode() == libsbml.SBML_MODEL )
+    self.assertTrue( self.M.getMetaId() == "" )
+    self.assertTrue( self.M.getNotes() == None )
+    self.assertTrue( self.M.getAnnotation() == None )
+    self.assertTrue( self.M.getId() == "" )
+    self.assertTrue( self.M.getName() == "" )
     self.assertEqual( False, self.M.isSetId() )
     self.assertEqual( False, self.M.isSetName() )
-    self.assert_( self.M.getNumUnitDefinitions() == 0 )
-    self.assert_( self.M.getNumCompartments() == 0 )
-    self.assert_( self.M.getNumSpecies() == 0 )
-    self.assert_( self.M.getNumParameters() == 0 )
-    self.assert_( self.M.getNumReactions() == 0 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 0 )
+    self.assertTrue( self.M.getNumCompartments() == 0 )
+    self.assertTrue( self.M.getNumSpecies() == 0 )
+    self.assertTrue( self.M.getNumParameters() == 0 )
+    self.assertTrue( self.M.getNumReactions() == 0 )
     pass  
 
   def test_Model_createAlgebraicRule(self):
     ar = self.M.createAlgebraicRule()
-    self.assert_( ar != None )
-    self.assert_( self.M.getNumRules() == 1 )
-    self.assert_( self.M.getRule(0) == ar )
+    self.assertTrue( ar != None )
+    self.assertTrue( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getRule(0) == ar )
     pass  
 
   def test_Model_createAssignmentRule(self):
     ar = self.M.createAssignmentRule()
-    self.assert_( ar != None )
-    self.assert_( self.M.getNumRules() == 1 )
-    self.assert_( self.M.getRule(0) == ar )
+    self.assertTrue( ar != None )
+    self.assertTrue( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getRule(0) == ar )
     pass  
 
   def test_Model_createCompartment(self):
     c = self.M.createCompartment()
-    self.assert_( c != None )
-    self.assert_( self.M.getNumCompartments() == 1 )
-    self.assert_( self.M.getCompartment(0) == c )
+    self.assertTrue( c != None )
+    self.assertTrue( self.M.getNumCompartments() == 1 )
+    self.assertTrue( self.M.getCompartment(0) == c )
     pass  
 
   def test_Model_createCompartmentType(self):
     c = self.M.createCompartmentType()
-    self.assert_( c != None )
-    self.assert_( self.M.getNumCompartmentTypes() == 1 )
-    self.assert_( self.M.getCompartmentType(0) == c )
+    self.assertTrue( c != None )
+    self.assertTrue( self.M.getNumCompartmentTypes() == 1 )
+    self.assertTrue( self.M.getCompartmentType(0) == c )
     pass  
 
   def test_Model_createConstraint(self):
     c = self.M.createConstraint()
-    self.assert_( c != None )
-    self.assert_( self.M.getNumConstraints() == 1 )
-    self.assert_( self.M.getConstraint(0) == c )
+    self.assertTrue( c != None )
+    self.assertTrue( self.M.getNumConstraints() == 1 )
+    self.assertTrue( self.M.getConstraint(0) == c )
     pass  
 
   def test_Model_createEvent(self):
     e = self.M.createEvent()
-    self.assert_( e != None )
-    self.assert_( self.M.getNumEvents() == 1 )
-    self.assert_( self.M.getEvent(0) == e )
+    self.assertTrue( e != None )
+    self.assertTrue( self.M.getNumEvents() == 1 )
+    self.assertTrue( self.M.getEvent(0) == e )
     pass  
 
   def test_Model_createEventAssignment(self):
     self.M.createEvent()
     self.M.createEvent()
     ea = self.M.createEventAssignment()
-    self.assert_( ea != None )
-    self.assert_( self.M.getNumEvents() == 2 )
+    self.assertTrue( ea != None )
+    self.assertTrue( self.M.getNumEvents() == 2 )
     e = self.M.getEvent(1)
-    self.assert_( e.getNumEventAssignments() == 1 )
-    self.assert_( e.getEventAssignment(0) == ea )
+    self.assertTrue( e.getNumEventAssignments() == 1 )
+    self.assertTrue( e.getEventAssignment(0) == ea )
     pass  
 
   def test_Model_createEventAssignment_noEvent(self):
-    self.assert_( self.M.getNumEvents() == 0 )
-    self.assert_( self.M.createEventAssignment() == None )
+    self.assertTrue( self.M.getNumEvents() == 0 )
+    self.assertTrue( self.M.createEventAssignment() == None )
     pass  
 
   def test_Model_createFunctionDefinition(self):
     fd = self.M.createFunctionDefinition()
-    self.assert_( fd != None )
-    self.assert_( self.M.getNumFunctionDefinitions() == 1 )
-    self.assert_( self.M.getFunctionDefinition(0) == fd )
+    self.assertTrue( fd != None )
+    self.assertTrue( self.M.getNumFunctionDefinitions() == 1 )
+    self.assertTrue( self.M.getFunctionDefinition(0) == fd )
     pass  
 
   def test_Model_createInitialAssignment(self):
     c = self.M.createInitialAssignment()
-    self.assert_( c != None )
-    self.assert_( self.M.getNumInitialAssignments() == 1 )
-    self.assert_( self.M.getInitialAssignment(0) == c )
+    self.assertTrue( c != None )
+    self.assertTrue( self.M.getNumInitialAssignments() == 1 )
+    self.assertTrue( self.M.getInitialAssignment(0) == c )
     pass  
 
   def test_Model_createKineticLaw(self):
     self.M.createReaction()
     self.M.createReaction()
     kl = self.M.createKineticLaw()
-    self.assert_( kl != None )
-    self.assert_( self.M.getNumReactions() == 2 )
+    self.assertTrue( kl != None )
+    self.assertTrue( self.M.getNumReactions() == 2 )
     r = self.M.getReaction(0)
-    self.assert_( r.getKineticLaw() == None )
+    self.assertTrue( r.getKineticLaw() == None )
     r = self.M.getReaction(1)
-    self.assert_( r.getKineticLaw() == kl )
+    self.assertTrue( r.getKineticLaw() == kl )
     pass  
 
   def test_Model_createKineticLawParameter(self):
@@ -275,142 +275,142 @@ def test_Model_createKineticLawParameter(self):
     self.M.createReaction()
     self.M.createKineticLaw()
     p = self.M.createKineticLawParameter()
-    self.assert_( self.M.getNumReactions() == 2 )
+    self.assertTrue( self.M.getNumReactions() == 2 )
     r = self.M.getReaction(0)
-    self.assert_( r.getKineticLaw() == None )
+    self.assertTrue( r.getKineticLaw() == None )
     r = self.M.getReaction(1)
-    self.assert_( r.getKineticLaw() != None )
+    self.assertTrue( r.getKineticLaw() != None )
     kl = r.getKineticLaw()
-    self.assert_( kl.getNumParameters() == 1 )
-    self.assert_( kl.getParameter(0) == p )
+    self.assertTrue( kl.getNumParameters() == 1 )
+    self.assertTrue( kl.getParameter(0) == p )
     pass  
 
   def test_Model_createKineticLawParameter_noKineticLaw(self):
     r = self.M.createReaction()
-    self.assert_( r.getKineticLaw() == None )
-    self.assert_( self.M.createKineticLawParameter() == None )
+    self.assertTrue( r.getKineticLaw() == None )
+    self.assertTrue( self.M.createKineticLawParameter() == None )
     pass  
 
   def test_Model_createKineticLawParameter_noReaction(self):
-    self.assert_( self.M.getNumReactions() == 0 )
-    self.assert_( self.M.createKineticLawParameter() == None )
+    self.assertTrue( self.M.getNumReactions() == 0 )
+    self.assertTrue( self.M.createKineticLawParameter() == None )
     pass  
 
   def test_Model_createKineticLaw_alreadyExists(self):
     r = self.M.createReaction()
     kl = self.M.createKineticLaw()
-    self.assert_( r.getKineticLaw() == kl )
+    self.assertTrue( r.getKineticLaw() == kl )
     pass  
 
   def test_Model_createKineticLaw_noReaction(self):
-    self.assert_( self.M.getNumReactions() == 0 )
-    self.assert_( self.M.createKineticLaw() == None )
+    self.assertTrue( self.M.getNumReactions() == 0 )
+    self.assertTrue( self.M.createKineticLaw() == None )
     pass  
 
   def test_Model_createModifier(self):
     self.M.createReaction()
     self.M.createReaction()
     msr = self.M.createModifier()
-    self.assert_( msr != None )
-    self.assert_( self.M.getNumReactions() == 2 )
+    self.assertTrue( msr != None )
+    self.assertTrue( self.M.getNumReactions() == 2 )
     r = self.M.getReaction(1)
-    self.assert_( r.getNumModifiers() == 1 )
-    self.assert_( r.getModifier(0) == msr )
+    self.assertTrue( r.getNumModifiers() == 1 )
+    self.assertTrue( r.getModifier(0) == msr )
     pass  
 
   def test_Model_createModifier_noReaction(self):
-    self.assert_( self.M.getNumReactions() == 0 )
-    self.assert_( self.M.createModifier() == None )
+    self.assertTrue( self.M.getNumReactions() == 0 )
+    self.assertTrue( self.M.createModifier() == None )
     pass  
 
   def test_Model_createParameter(self):
     p = self.M.createParameter()
-    self.assert_( p != None )
-    self.assert_( self.M.getNumParameters() == 1 )
-    self.assert_( self.M.getParameter(0) == p )
+    self.assertTrue( p != None )
+    self.assertTrue( self.M.getNumParameters() == 1 )
+    self.assertTrue( self.M.getParameter(0) == p )
     pass  
 
   def test_Model_createProduct(self):
     self.M.createReaction()
     self.M.createReaction()
     sr = self.M.createProduct()
-    self.assert_( sr != None )
-    self.assert_( self.M.getNumReactions() == 2 )
+    self.assertTrue( sr != None )
+    self.assertTrue( self.M.getNumReactions() == 2 )
     r = self.M.getReaction(1)
-    self.assert_( r.getNumProducts() == 1 )
-    self.assert_( r.getProduct(0) == sr )
+    self.assertTrue( r.getNumProducts() == 1 )
+    self.assertTrue( r.getProduct(0) == sr )
     pass  
 
   def test_Model_createProduct_noReaction(self):
-    self.assert_( self.M.getNumReactions() == 0 )
-    self.assert_( self.M.createProduct() == None )
+    self.assertTrue( self.M.getNumReactions() == 0 )
+    self.assertTrue( self.M.createProduct() == None )
     pass  
 
   def test_Model_createRateRule(self):
     rr = self.M.createRateRule()
-    self.assert_( rr != None )
-    self.assert_( self.M.getNumRules() == 1 )
-    self.assert_( self.M.getRule(0) == rr )
+    self.assertTrue( rr != None )
+    self.assertTrue( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getRule(0) == rr )
     pass  
 
   def test_Model_createReactant(self):
     self.M.createReaction()
     self.M.createReaction()
     sr = self.M.createReactant()
-    self.assert_( sr != None )
-    self.assert_( self.M.getNumReactions() == 2 )
+    self.assertTrue( sr != None )
+    self.assertTrue( self.M.getNumReactions() == 2 )
     r = self.M.getReaction(1)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getReactant(0) == sr )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getReactant(0) == sr )
     pass  
 
   def test_Model_createReactant_noReaction(self):
-    self.assert_( self.M.getNumReactions() == 0 )
-    self.assert_( self.M.createReactant() == None )
+    self.assertTrue( self.M.getNumReactions() == 0 )
+    self.assertTrue( self.M.createReactant() == None )
     pass  
 
   def test_Model_createReaction(self):
     r = self.M.createReaction()
-    self.assert_( r != None )
-    self.assert_( self.M.getNumReactions() == 1 )
-    self.assert_( self.M.getReaction(0) == r )
+    self.assertTrue( r != None )
+    self.assertTrue( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getReaction(0) == r )
     pass  
 
   def test_Model_createSpecies(self):
     s = self.M.createSpecies()
-    self.assert_( s != None )
-    self.assert_( self.M.getNumSpecies() == 1 )
-    self.assert_( self.M.getSpecies(0) == s )
+    self.assertTrue( s != None )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getSpecies(0) == s )
     pass  
 
   def test_Model_createSpeciesType(self):
     c = self.M.createSpeciesType()
-    self.assert_( c != None )
-    self.assert_( self.M.getNumSpeciesTypes() == 1 )
-    self.assert_( self.M.getSpeciesType(0) == c )
+    self.assertTrue( c != None )
+    self.assertTrue( self.M.getNumSpeciesTypes() == 1 )
+    self.assertTrue( self.M.getSpeciesType(0) == c )
     pass  
 
   def test_Model_createUnit(self):
     self.M.createUnitDefinition()
     self.M.createUnitDefinition()
     u = self.M.createUnit()
-    self.assert_( u != None )
-    self.assert_( self.M.getNumUnitDefinitions() == 2 )
+    self.assertTrue( u != None )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 2 )
     ud = self.M.getUnitDefinition(1)
-    self.assert_( ud.getNumUnits() == 1 )
-    self.assert_( ud.getUnit(0) == u )
+    self.assertTrue( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getUnit(0) == u )
     pass  
 
   def test_Model_createUnitDefinition(self):
     ud = self.M.createUnitDefinition()
-    self.assert_( ud != None )
-    self.assert_( self.M.getNumUnitDefinitions() == 1 )
-    self.assert_( self.M.getUnitDefinition(0) == ud )
+    self.assertTrue( ud != None )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 1 )
+    self.assertTrue( self.M.getUnitDefinition(0) == ud )
     pass  
 
   def test_Model_createUnit_noUnitDefinition(self):
-    self.assert_( self.M.getNumUnitDefinitions() == 0 )
-    self.assert_( self.M.createUnit() == None )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 0 )
+    self.assertTrue( self.M.createUnit() == None )
     pass  
 
   def test_Model_createWithNS(self):
@@ -419,14 +419,14 @@ def test_Model_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Model(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_MODEL )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_MODEL )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -441,11 +441,11 @@ def test_Model_getCompartment(self):
     c2.setId( "B")
     self.M.addCompartment(c1)
     self.M.addCompartment(c2)
-    self.assert_( self.M.getNumCompartments() == 2 )
+    self.assertTrue( self.M.getNumCompartments() == 2 )
     c1 = self.M.getCompartment(0)
     c2 = self.M.getCompartment(1)
-    self.assert_((  "A" == c1.getId() ))
-    self.assert_((  "B" == c2.getId() ))
+    self.assertTrue((  "A" == c1.getId() ))
+    self.assertTrue((  "B" == c2.getId() ))
     pass  
 
   def test_Model_getCompartmentById(self):
@@ -455,10 +455,10 @@ def test_Model_getCompartmentById(self):
     c2.setId( "B" )
     self.M.addCompartment(c1)
     self.M.addCompartment(c2)
-    self.assert_( self.M.getNumCompartments() == 2 )
-    self.assert_( self.M.getCompartment( "A" ) != c1 )
-    self.assert_( self.M.getCompartment( "B" ) != c2 )
-    self.assert_( self.M.getCompartment( "C" ) == None )
+    self.assertTrue( self.M.getNumCompartments() == 2 )
+    self.assertTrue( self.M.getCompartment( "A" ) != c1 )
+    self.assertTrue( self.M.getCompartment( "B" ) != c2 )
+    self.assertTrue( self.M.getCompartment( "C" ) == None )
     pass  
 
   def test_Model_getEventById(self):
@@ -474,10 +474,10 @@ def test_Model_getEventById(self):
     e2.setId( "e2" )
     self.M.addEvent(e1)
     self.M.addEvent(e2)
-    self.assert_( self.M.getNumEvents() == 2 )
-    self.assert_( self.M.getEvent( "e1" ) != e1 )
-    self.assert_( self.M.getEvent( "e2" ) != e2 )
-    self.assert_( self.M.getEvent( "e3" ) == None )
+    self.assertTrue( self.M.getNumEvents() == 2 )
+    self.assertTrue( self.M.getEvent( "e1" ) != e1 )
+    self.assertTrue( self.M.getEvent( "e2" ) != e2 )
+    self.assertTrue( self.M.getEvent( "e3" ) == None )
     pass  
 
   def test_Model_getFunctionDefinitionById(self):
@@ -489,10 +489,10 @@ def test_Model_getFunctionDefinitionById(self):
     fd2.setMath(libsbml.parseFormula("2"))
     self.M.addFunctionDefinition(fd1)
     self.M.addFunctionDefinition(fd2)
-    self.assert_( self.M.getNumFunctionDefinitions() == 2 )
-    self.assert_( self.M.getFunctionDefinition( "sin" ) != fd1 )
-    self.assert_( self.M.getFunctionDefinition( "cos" ) != fd2 )
-    self.assert_( self.M.getFunctionDefinition( "tan" ) == None )
+    self.assertTrue( self.M.getNumFunctionDefinitions() == 2 )
+    self.assertTrue( self.M.getFunctionDefinition( "sin" ) != fd1 )
+    self.assertTrue( self.M.getFunctionDefinition( "cos" ) != fd2 )
+    self.assertTrue( self.M.getFunctionDefinition( "tan" ) == None )
     pass  
 
   def test_Model_getNumSpeciesWithBoundaryCondition(self):
@@ -508,17 +508,17 @@ def test_Model_getNumSpeciesWithBoundaryCondition(self):
     s1.setBoundaryCondition(True)
     s2.setBoundaryCondition(False)
     s3.setBoundaryCondition(True)
-    self.assert_( self.M.getNumSpecies() == 0 )
-    self.assert_( self.M.getNumSpeciesWithBoundaryCondition() == 0 )
+    self.assertTrue( self.M.getNumSpecies() == 0 )
+    self.assertTrue( self.M.getNumSpeciesWithBoundaryCondition() == 0 )
     self.M.addSpecies(s1)
-    self.assert_( self.M.getNumSpecies() == 1 )
-    self.assert_( self.M.getNumSpeciesWithBoundaryCondition() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getNumSpeciesWithBoundaryCondition() == 1 )
     self.M.addSpecies(s2)
-    self.assert_( self.M.getNumSpecies() == 2 )
-    self.assert_( self.M.getNumSpeciesWithBoundaryCondition() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 2 )
+    self.assertTrue( self.M.getNumSpeciesWithBoundaryCondition() == 1 )
     self.M.addSpecies(s3)
-    self.assert_( self.M.getNumSpecies() == 3 )
-    self.assert_( self.M.getNumSpeciesWithBoundaryCondition() == 2 )
+    self.assertTrue( self.M.getNumSpecies() == 3 )
+    self.assertTrue( self.M.getNumSpeciesWithBoundaryCondition() == 2 )
     pass  
 
   def test_Model_getParameter(self):
@@ -528,11 +528,11 @@ def test_Model_getParameter(self):
     p2.setId( "Km2")
     self.M.addParameter(p1)
     self.M.addParameter(p2)
-    self.assert_( self.M.getNumParameters() == 2 )
+    self.assertTrue( self.M.getNumParameters() == 2 )
     p1 = self.M.getParameter(0)
     p2 = self.M.getParameter(1)
-    self.assert_((  "Km1" == p1.getId() ))
-    self.assert_((  "Km2" == p2.getId() ))
+    self.assertTrue((  "Km1" == p1.getId() ))
+    self.assertTrue((  "Km2" == p2.getId() ))
     pass  
 
   def test_Model_getParameterById(self):
@@ -542,10 +542,10 @@ def test_Model_getParameterById(self):
     p2.setId( "Km2" )
     self.M.addParameter(p1)
     self.M.addParameter(p2)
-    self.assert_( self.M.getNumParameters() == 2 )
-    self.assert_( self.M.getParameter( "Km1" ) != p1 )
-    self.assert_( self.M.getParameter( "Km2" ) != p2 )
-    self.assert_( self.M.getParameter( "Km3" ) == None )
+    self.assertTrue( self.M.getNumParameters() == 2 )
+    self.assertTrue( self.M.getParameter( "Km1" ) != p1 )
+    self.assertTrue( self.M.getParameter( "Km2" ) != p2 )
+    self.assertTrue( self.M.getParameter( "Km3" ) == None )
     pass  
 
   def test_Model_getReaction(self):
@@ -555,11 +555,11 @@ def test_Model_getReaction(self):
     r2.setId( "reaction_2")
     self.M.addReaction(r1)
     self.M.addReaction(r2)
-    self.assert_( self.M.getNumReactions() == 2 )
+    self.assertTrue( self.M.getNumReactions() == 2 )
     r1 = self.M.getReaction(0)
     r2 = self.M.getReaction(1)
-    self.assert_((  "reaction_1" == r1.getId() ))
-    self.assert_((  "reaction_2" == r2.getId() ))
+    self.assertTrue((  "reaction_1" == r1.getId() ))
+    self.assertTrue((  "reaction_2" == r2.getId() ))
     pass  
 
   def test_Model_getReactionById(self):
@@ -569,10 +569,10 @@ def test_Model_getReactionById(self):
     r2.setId( "reaction_2" )
     self.M.addReaction(r1)
     self.M.addReaction(r2)
-    self.assert_( self.M.getNumReactions() == 2 )
-    self.assert_( self.M.getReaction( "reaction_1" ) != r1 )
-    self.assert_( self.M.getReaction( "reaction_2" ) != r2 )
-    self.assert_( self.M.getReaction( "reaction_3" ) == None )
+    self.assertTrue( self.M.getNumReactions() == 2 )
+    self.assertTrue( self.M.getReaction( "reaction_1" ) != r1 )
+    self.assertTrue( self.M.getReaction( "reaction_2" ) != r2 )
+    self.assertTrue( self.M.getReaction( "reaction_3" ) == None )
     pass  
 
   def test_Model_getRules(self):
@@ -591,15 +591,15 @@ def test_Model_getRules(self):
     self.M.addRule(scr)
     self.M.addRule(cvr)
     self.M.addRule(pr)
-    self.assert_( self.M.getNumRules() == 4 )
+    self.assertTrue( self.M.getNumRules() == 4 )
     ar = self.M.getRule(0)
     scr = self.M.getRule(1)
     cvr = self.M.getRule(2)
     pr = self.M.getRule(3)
-    self.assert_((  "x + 1"         == ar.getFormula() ))
-    self.assert_((  "k * t/(1 + k)" == scr.getFormula() ))
-    self.assert_((  "0.10 * t"      == cvr.getFormula() ))
-    self.assert_((  "k3/k2"         == pr.getFormula() ))
+    self.assertTrue((  "x + 1"         == ar.getFormula() ))
+    self.assertTrue((  "k * t/(1 + k)" == scr.getFormula() ))
+    self.assertTrue((  "0.10 * t"      == cvr.getFormula() ))
+    self.assertTrue((  "k3/k2"         == pr.getFormula() ))
     pass  
 
   def test_Model_getSpecies(self):
@@ -611,11 +611,11 @@ def test_Model_getSpecies(self):
     s2.setCompartment( "c")
     self.M.addSpecies(s1)
     self.M.addSpecies(s2)
-    self.assert_( self.M.getNumSpecies() == 2 )
+    self.assertTrue( self.M.getNumSpecies() == 2 )
     s1 = self.M.getSpecies(0)
     s2 = self.M.getSpecies(1)
-    self.assert_((  "Glucose"      == s1.getId() ))
-    self.assert_((  "Glucose_6_P"  == s2.getId() ))
+    self.assertTrue((  "Glucose"      == s1.getId() ))
+    self.assertTrue((  "Glucose_6_P"  == s2.getId() ))
     pass  
 
   def test_Model_getSpeciesById(self):
@@ -627,10 +627,10 @@ def test_Model_getSpeciesById(self):
     s2.setCompartment( "c")
     self.M.addSpecies(s1)
     self.M.addSpecies(s2)
-    self.assert_( self.M.getNumSpecies() == 2 )
-    self.assert_( self.M.getSpecies( "Glucose"    ) != s1 )
-    self.assert_( self.M.getSpecies( "Glucose_6_P") != s2 )
-    self.assert_( self.M.getSpecies( "Glucose2"   ) == None )
+    self.assertTrue( self.M.getNumSpecies() == 2 )
+    self.assertTrue( self.M.getSpecies( "Glucose"    ) != s1 )
+    self.assertTrue( self.M.getSpecies( "Glucose_6_P") != s2 )
+    self.assertTrue( self.M.getSpecies( "Glucose2"   ) == None )
     pass  
 
   def test_Model_getSpeciesReferenceById(self):
@@ -639,8 +639,8 @@ def test_Model_getSpeciesReferenceById(self):
     sr = r1.createReactant()
     sr.setId( "s1")
     self.M.addReaction(r1)
-    self.assert_( self.M.getNumReactions() == 1 )
-    self.assert_( self.M.getSpeciesReference( "s1" ) != sr )
+    self.assertTrue( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getSpeciesReference( "s1" ) != sr )
     pass  
 
   def test_Model_getUnitDefinition(self):
@@ -652,11 +652,11 @@ def test_Model_getUnitDefinition(self):
     ud2.createUnit()
     self.M.addUnitDefinition(ud1)
     self.M.addUnitDefinition(ud2)
-    self.assert_( self.M.getNumUnitDefinitions() == 2 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 2 )
     ud1 = self.M.getUnitDefinition(0)
     ud2 = self.M.getUnitDefinition(1)
-    self.assert_((  "mmls"    == ud1.getId() ))
-    self.assert_((  "volume"  == ud2.getId() ))
+    self.assertTrue((  "mmls"    == ud1.getId() ))
+    self.assertTrue((  "volume"  == ud2.getId() ))
     pass  
 
   def test_Model_getUnitDefinitionById(self):
@@ -668,10 +668,10 @@ def test_Model_getUnitDefinitionById(self):
     ud2.createUnit()
     self.M.addUnitDefinition(ud1)
     self.M.addUnitDefinition(ud2)
-    self.assert_( self.M.getNumUnitDefinitions() == 2 )
-    self.assert_( self.M.getUnitDefinition( "mmls"       ) != ud1 )
-    self.assert_( self.M.getUnitDefinition( "volume"     ) != ud2 )
-    self.assert_( self.M.getUnitDefinition( "rototillers") == None )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 2 )
+    self.assertTrue( self.M.getUnitDefinition( "mmls"       ) != ud1 )
+    self.assertTrue( self.M.getUnitDefinition( "volume"     ) != ud2 )
+    self.assertTrue( self.M.getUnitDefinition( "rototillers") == None )
     pass  
 
   def test_Model_removeCompartment(self):
@@ -679,12 +679,12 @@ def test_Model_removeCompartment(self):
     o2 = self.M.createCompartment()
     o3 = self.M.createCompartment()
     o3.setId("test")
-    self.assert_( self.M.removeCompartment(0) == o1 )
-    self.assert_( self.M.getNumCompartments() == 2 )
-    self.assert_( self.M.removeCompartment(0) == o2 )
-    self.assert_( self.M.getNumCompartments() == 1 )
-    self.assert_( self.M.removeCompartment("test") == o3 )
-    self.assert_( self.M.getNumCompartments() == 0 )
+    self.assertTrue( self.M.removeCompartment(0) == o1 )
+    self.assertTrue( self.M.getNumCompartments() == 2 )
+    self.assertTrue( self.M.removeCompartment(0) == o2 )
+    self.assertTrue( self.M.getNumCompartments() == 1 )
+    self.assertTrue( self.M.removeCompartment("test") == o3 )
+    self.assertTrue( self.M.getNumCompartments() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -695,12 +695,12 @@ def test_Model_removeCompartmentType(self):
     o2 = self.M.createCompartmentType()
     o3 = self.M.createCompartmentType()
     o3.setId("test")
-    self.assert_( self.M.removeCompartmentType(0) == o1 )
-    self.assert_( self.M.getNumCompartmentTypes() == 2 )
-    self.assert_( self.M.removeCompartmentType(0) == o2 )
-    self.assert_( self.M.getNumCompartmentTypes() == 1 )
-    self.assert_( self.M.removeCompartmentType("test") == o3 )
-    self.assert_( self.M.getNumCompartmentTypes() == 0 )
+    self.assertTrue( self.M.removeCompartmentType(0) == o1 )
+    self.assertTrue( self.M.getNumCompartmentTypes() == 2 )
+    self.assertTrue( self.M.removeCompartmentType(0) == o2 )
+    self.assertTrue( self.M.getNumCompartmentTypes() == 1 )
+    self.assertTrue( self.M.removeCompartmentType("test") == o3 )
+    self.assertTrue( self.M.getNumCompartmentTypes() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -710,12 +710,12 @@ def test_Model_removeConstraint(self):
     o1 = self.M.createConstraint()
     o2 = self.M.createConstraint()
     o3 = self.M.createConstraint()
-    self.assert_( self.M.removeConstraint(0) == o1 )
-    self.assert_( self.M.getNumConstraints() == 2 )
-    self.assert_( self.M.removeConstraint(0) == o2 )
-    self.assert_( self.M.getNumConstraints() == 1 )
-    self.assert_( self.M.removeConstraint(0) == o3 )
-    self.assert_( self.M.getNumConstraints() == 0 )
+    self.assertTrue( self.M.removeConstraint(0) == o1 )
+    self.assertTrue( self.M.getNumConstraints() == 2 )
+    self.assertTrue( self.M.removeConstraint(0) == o2 )
+    self.assertTrue( self.M.getNumConstraints() == 1 )
+    self.assertTrue( self.M.removeConstraint(0) == o3 )
+    self.assertTrue( self.M.getNumConstraints() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -726,12 +726,12 @@ def test_Model_removeEvent(self):
     o2 = self.M.createEvent()
     o3 = self.M.createEvent()
     o3.setId("test")
-    self.assert_( self.M.removeEvent(0) == o1 )
-    self.assert_( self.M.getNumEvents() == 2 )
-    self.assert_( self.M.removeEvent(0) == o2 )
-    self.assert_( self.M.getNumEvents() == 1 )
-    self.assert_( self.M.removeEvent("test") == o3 )
-    self.assert_( self.M.getNumEvents() == 0 )
+    self.assertTrue( self.M.removeEvent(0) == o1 )
+    self.assertTrue( self.M.getNumEvents() == 2 )
+    self.assertTrue( self.M.removeEvent(0) == o2 )
+    self.assertTrue( self.M.getNumEvents() == 1 )
+    self.assertTrue( self.M.removeEvent("test") == o3 )
+    self.assertTrue( self.M.getNumEvents() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -742,12 +742,12 @@ def test_Model_removeFunctionDefinition(self):
     o2 = self.M.createFunctionDefinition()
     o3 = self.M.createFunctionDefinition()
     o3.setId("test")
-    self.assert_( self.M.removeFunctionDefinition(0) == o1 )
-    self.assert_( self.M.getNumFunctionDefinitions() == 2 )
-    self.assert_( self.M.removeFunctionDefinition(0) == o2 )
-    self.assert_( self.M.getNumFunctionDefinitions() == 1 )
-    self.assert_( self.M.removeFunctionDefinition("test") == o3 )
-    self.assert_( self.M.getNumFunctionDefinitions() == 0 )
+    self.assertTrue( self.M.removeFunctionDefinition(0) == o1 )
+    self.assertTrue( self.M.getNumFunctionDefinitions() == 2 )
+    self.assertTrue( self.M.removeFunctionDefinition(0) == o2 )
+    self.assertTrue( self.M.getNumFunctionDefinitions() == 1 )
+    self.assertTrue( self.M.removeFunctionDefinition("test") == o3 )
+    self.assertTrue( self.M.getNumFunctionDefinitions() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -758,12 +758,12 @@ def test_Model_removeInitialAssignment(self):
     o2 = self.M.createInitialAssignment()
     o3 = self.M.createInitialAssignment()
     o3.setSymbol("test")
-    self.assert_( self.M.removeInitialAssignment(0) == o1 )
-    self.assert_( self.M.getNumInitialAssignments() == 2 )
-    self.assert_( self.M.removeInitialAssignment(0) == o2 )
-    self.assert_( self.M.getNumInitialAssignments() == 1 )
-    self.assert_( self.M.removeInitialAssignment("test") == o3 )
-    self.assert_( self.M.getNumInitialAssignments() == 0 )
+    self.assertTrue( self.M.removeInitialAssignment(0) == o1 )
+    self.assertTrue( self.M.getNumInitialAssignments() == 2 )
+    self.assertTrue( self.M.removeInitialAssignment(0) == o2 )
+    self.assertTrue( self.M.getNumInitialAssignments() == 1 )
+    self.assertTrue( self.M.removeInitialAssignment("test") == o3 )
+    self.assertTrue( self.M.getNumInitialAssignments() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -774,12 +774,12 @@ def test_Model_removeParameter(self):
     o2 = self.M.createParameter()
     o3 = self.M.createParameter()
     o3.setId("test")
-    self.assert_( self.M.removeParameter(0) == o1 )
-    self.assert_( self.M.getNumParameters() == 2 )
-    self.assert_( self.M.removeParameter(0) == o2 )
-    self.assert_( self.M.getNumParameters() == 1 )
-    self.assert_( self.M.removeParameter("test") == o3 )
-    self.assert_( self.M.getNumParameters() == 0 )
+    self.assertTrue( self.M.removeParameter(0) == o1 )
+    self.assertTrue( self.M.getNumParameters() == 2 )
+    self.assertTrue( self.M.removeParameter(0) == o2 )
+    self.assertTrue( self.M.getNumParameters() == 1 )
+    self.assertTrue( self.M.removeParameter("test") == o3 )
+    self.assertTrue( self.M.getNumParameters() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -790,12 +790,12 @@ def test_Model_removeReaction(self):
     o2 = self.M.createReaction()
     o3 = self.M.createReaction()
     o3.setId("test")
-    self.assert_( self.M.removeReaction(0) == o1 )
-    self.assert_( self.M.getNumReactions() == 2 )
-    self.assert_( self.M.removeReaction(0) == o2 )
-    self.assert_( self.M.getNumReactions() == 1 )
-    self.assert_( self.M.removeReaction("test") == o3 )
-    self.assert_( self.M.getNumReactions() == 0 )
+    self.assertTrue( self.M.removeReaction(0) == o1 )
+    self.assertTrue( self.M.getNumReactions() == 2 )
+    self.assertTrue( self.M.removeReaction(0) == o2 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.removeReaction("test") == o3 )
+    self.assertTrue( self.M.getNumReactions() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -806,12 +806,12 @@ def test_Model_removeRule(self):
     o2 = self.M.createAlgebraicRule()
     o3 = self.M.createRateRule()
     o3.setVariable("test")
-    self.assert_( self.M.removeRule(0) == o1 )
-    self.assert_( self.M.getNumRules() == 2 )
-    self.assert_( self.M.removeRule(0) == o2 )
-    self.assert_( self.M.getNumRules() == 1 )
-    self.assert_( self.M.removeRule("test") == o3 )
-    self.assert_( self.M.getNumRules() == 0 )
+    self.assertTrue( self.M.removeRule(0) == o1 )
+    self.assertTrue( self.M.getNumRules() == 2 )
+    self.assertTrue( self.M.removeRule(0) == o2 )
+    self.assertTrue( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.removeRule("test") == o3 )
+    self.assertTrue( self.M.getNumRules() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -822,12 +822,12 @@ def test_Model_removeSpecies(self):
     o2 = self.M.createSpecies()
     o3 = self.M.createSpecies()
     o3.setId("test")
-    self.assert_( self.M.removeSpecies(0) == o1 )
-    self.assert_( self.M.getNumSpecies() == 2 )
-    self.assert_( self.M.removeSpecies(0) == o2 )
-    self.assert_( self.M.getNumSpecies() == 1 )
-    self.assert_( self.M.removeSpecies("test") == o3 )
-    self.assert_( self.M.getNumSpecies() == 0 )
+    self.assertTrue( self.M.removeSpecies(0) == o1 )
+    self.assertTrue( self.M.getNumSpecies() == 2 )
+    self.assertTrue( self.M.removeSpecies(0) == o2 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.removeSpecies("test") == o3 )
+    self.assertTrue( self.M.getNumSpecies() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -838,12 +838,12 @@ def test_Model_removeSpeciesType(self):
     o2 = self.M.createSpeciesType()
     o3 = self.M.createSpeciesType()
     o3.setId("test")
-    self.assert_( self.M.removeSpeciesType(0) == o1 )
-    self.assert_( self.M.getNumSpeciesTypes() == 2 )
-    self.assert_( self.M.removeSpeciesType(0) == o2 )
-    self.assert_( self.M.getNumSpeciesTypes() == 1 )
-    self.assert_( self.M.removeSpeciesType("test") == o3 )
-    self.assert_( self.M.getNumSpeciesTypes() == 0 )
+    self.assertTrue( self.M.removeSpeciesType(0) == o1 )
+    self.assertTrue( self.M.getNumSpeciesTypes() == 2 )
+    self.assertTrue( self.M.removeSpeciesType(0) == o2 )
+    self.assertTrue( self.M.getNumSpeciesTypes() == 1 )
+    self.assertTrue( self.M.removeSpeciesType("test") == o3 )
+    self.assertTrue( self.M.getNumSpeciesTypes() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -854,12 +854,12 @@ def test_Model_removeUnitDefinition(self):
     o2 = self.M.createUnitDefinition()
     o3 = self.M.createUnitDefinition()
     o3.setId("test")
-    self.assert_( self.M.removeUnitDefinition(0) == o1 )
-    self.assert_( self.M.getNumUnitDefinitions() == 2 )
-    self.assert_( self.M.removeUnitDefinition(0) == o2 )
-    self.assert_( self.M.getNumUnitDefinitions() == 1 )
-    self.assert_( self.M.removeUnitDefinition("test") == o3 )
-    self.assert_( self.M.getNumUnitDefinitions() == 0 )
+    self.assertTrue( self.M.removeUnitDefinition(0) == o1 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 2 )
+    self.assertTrue( self.M.removeUnitDefinition(0) == o2 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 1 )
+    self.assertTrue( self.M.removeUnitDefinition("test") == o3 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -868,12 +868,12 @@ def test_Model_removeUnitDefinition(self):
   def test_Model_setId(self):
     id =  "Branch";
     self.M.setId(id)
-    self.assert_(( id == self.M.getId() ))
+    self.assertTrue(( id == self.M.getId() ))
     self.assertEqual( True, self.M.isSetId() )
     if (self.M.getId() == id):
       pass    
     self.M.setId(self.M.getId())
-    self.assert_(( id == self.M.getId() ))
+    self.assertTrue(( id == self.M.getId() ))
     self.M.setId("")
     self.assertEqual( False, self.M.isSetId() )
     if (self.M.getId() != None):
@@ -886,12 +886,12 @@ def test_Model_setId(self):
   def test_Model_setName(self):
     name =  "My_Branch_Model";
     self.M.setName(name)
-    self.assert_(( name == self.M.getName() ))
+    self.assertTrue(( name == self.M.getName() ))
     self.assertEqual( True, self.M.isSetName() )
     if (self.M.getName() == name):
       pass    
     self.M.setName(self.M.getName())
-    self.assert_(( name == self.M.getName() ))
+    self.assertTrue(( name == self.M.getName() ))
     self.M.setName("")
     self.assertEqual( False, self.M.isSetName() )
     if (self.M.getName() != None):
@@ -910,17 +910,17 @@ def test_Model_setgetModelHistory(self):
     history.addCreator(mc)
     history.setCreatedDate(date)
     history.setModifiedDate(date)
-    self.assert_( self.M.isSetModelHistory() == False )
+    self.assertTrue( self.M.isSetModelHistory() == False )
     self.M.setModelHistory(history)
-    self.assert_( self.M.isSetModelHistory() == True )
+    self.assertTrue( self.M.isSetModelHistory() == True )
     newMC = history.getCreator(0)
-    self.assert_( newMC != None )
-    self.assert_((  "Keating" == newMC.getFamilyName() ))
-    self.assert_((  "Sarah" == newMC.getGivenName() ))
-    self.assert_((  "sbml-team@caltech.edu" == newMC.getEmail() ))
-    self.assert_((  "UH" == newMC.getOrganisation() ))
+    self.assertTrue( newMC != None )
+    self.assertTrue((  "Keating" == newMC.getFamilyName() ))
+    self.assertTrue((  "Sarah" == newMC.getGivenName() ))
+    self.assertTrue((  "sbml-team@caltech.edu" == newMC.getEmail() ))
+    self.assertTrue((  "UH" == newMC.getOrganisation() ))
     self.M.unsetModelHistory()
-    self.assert_( self.M.isSetModelHistory() == False )
+    self.assertTrue( self.M.isSetModelHistory() == False )
     _dummyList = [ history ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ mc ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestModel_newSetters.py b/src/bindings/python/test/sbml/TestModel_newSetters.py
index 52bfb95b86..c6729bcc74 100644
--- a/src/bindings/python/test/sbml/TestModel_newSetters.py
+++ b/src/bindings/python/test/sbml/TestModel_newSetters.py
@@ -53,11 +53,11 @@ def test_Model_addCompartment1(self):
     m = libsbml.Model(2,2)
     c = libsbml.Compartment(2,2)
     i = m.addCompartment(c)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     c.setId( "c")
     i = m.addCompartment(c)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumCompartments() == 1 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -67,8 +67,8 @@ def test_Model_addCompartment2(self):
     c = libsbml.Compartment(2,1)
     c.setId( "c")
     i = m.addCompartment(c)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumCompartments() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumCompartments() == 0 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -78,8 +78,8 @@ def test_Model_addCompartment3(self):
     c = libsbml.Compartment(1,2)
     c.setId( "c")
     i = m.addCompartment(c)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumCompartments() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumCompartments() == 0 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -88,8 +88,8 @@ def test_Model_addCompartment4(self):
     m = libsbml.Model(2,2)
     c = None
     i = m.addCompartment(c)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumCompartments() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumCompartments() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -100,11 +100,11 @@ def test_Model_addCompartment5(self):
     c1 = libsbml.Compartment(2,2)
     c1.setId( "c")
     i = m.addCompartment(c)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumCompartments() == 1 )
     i = m.addCompartment(c1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumCompartments() == 1 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ c1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -114,11 +114,11 @@ def test_Model_addCompartmentType1(self):
     m = libsbml.Model(2,2)
     ct = libsbml.CompartmentType(2,2)
     i = m.addCompartmentType(ct)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     ct.setId( "ct")
     i = m.addCompartmentType(ct)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumCompartmentTypes() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumCompartmentTypes() == 1 )
     _dummyList = [ ct ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -128,8 +128,8 @@ def test_Model_addCompartmentType2(self):
     ct = libsbml.CompartmentType(2,3)
     ct.setId( "ct")
     i = m.addCompartmentType(ct)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumCompartmentTypes() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumCompartmentTypes() == 0 )
     _dummyList = [ ct ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -138,8 +138,8 @@ def test_Model_addCompartmentType3(self):
     m = libsbml.Model(2,2)
     ct = None
     i = m.addCompartmentType(ct)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumCompartmentTypes() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumCompartmentTypes() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -150,11 +150,11 @@ def test_Model_addCompartmentType4(self):
     ct1 = libsbml.CompartmentType(2,2)
     ct1.setId( "ct")
     i = m.addCompartmentType(ct)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumCompartmentTypes() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumCompartmentTypes() == 1 )
     i = m.addCompartmentType(ct1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumCompartmentTypes() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumCompartmentTypes() == 1 )
     _dummyList = [ ct ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ct1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -164,11 +164,11 @@ def test_Model_addConstraint1(self):
     m = libsbml.Model(2,2)
     c = libsbml.Constraint(2,2)
     i = m.addConstraint(c)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     c.setMath(libsbml.parseFormula("a+b"))
     i = m.addConstraint(c)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumConstraints() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumConstraints() == 1 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -178,8 +178,8 @@ def test_Model_addConstraint2(self):
     c = libsbml.Constraint(2,3)
     c.setMath(libsbml.parseFormula("a+b"))
     i = m.addConstraint(c)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumConstraints() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumConstraints() == 0 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -188,8 +188,8 @@ def test_Model_addConstraint3(self):
     m = libsbml.Model(2,2)
     c = None
     i = m.addConstraint(c)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumConstraints() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumConstraints() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -198,15 +198,15 @@ def test_Model_addEvent1(self):
     e = libsbml.Event(2,2)
     t = libsbml.Trigger(2,2)
     i = m.addEvent(e)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     t.setMath(libsbml.parseFormula("true"))
     e.setTrigger(t)
     i = m.addEvent(e)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     e.createEventAssignment()
     i = m.addEvent(e)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumEvents() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumEvents() == 1 )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -219,8 +219,8 @@ def test_Model_addEvent2(self):
     e.setTrigger(t)
     e.createEventAssignment()
     i = m.addEvent(e)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumEvents() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumEvents() == 0 )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -229,8 +229,8 @@ def test_Model_addEvent3(self):
     m = libsbml.Model(2,2)
     e = None
     i = m.addEvent(e)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumEvents() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumEvents() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -247,11 +247,11 @@ def test_Model_addEvent4(self):
     e1.setTrigger(t)
     e1.createEventAssignment()
     i = m.addEvent(e)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumEvents() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumEvents() == 1 )
     i = m.addEvent(e1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumEvents() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumEvents() == 1 )
     _dummyList = [ e ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ e1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -261,14 +261,14 @@ def test_Model_addFunctionDefinition1(self):
     m = libsbml.Model(2,2)
     fd = libsbml.FunctionDefinition(2,2)
     i = m.addFunctionDefinition(fd)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     fd.setId( "fd")
     i = m.addFunctionDefinition(fd)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     fd.setMath(libsbml.parseFormula("fd"))
     i = m.addFunctionDefinition(fd)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumFunctionDefinitions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumFunctionDefinitions() == 1 )
     _dummyList = [ fd ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -279,8 +279,8 @@ def test_Model_addFunctionDefinition2(self):
     fd.setId( "fd")
     fd.setMath(libsbml.parseFormula("fd"))
     i = m.addFunctionDefinition(fd)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumFunctionDefinitions() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumFunctionDefinitions() == 0 )
     _dummyList = [ fd ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -289,8 +289,8 @@ def test_Model_addFunctionDefinition3(self):
     m = libsbml.Model(2,2)
     fd = None
     i = m.addFunctionDefinition(fd)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumFunctionDefinitions() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumFunctionDefinitions() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -303,11 +303,11 @@ def test_Model_addFunctionDefinition4(self):
     fd1.setId( "fd")
     fd1.setMath(libsbml.parseFormula("fd"))
     i = m.addFunctionDefinition(fd)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumFunctionDefinitions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumFunctionDefinitions() == 1 )
     i = m.addFunctionDefinition(fd1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumFunctionDefinitions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumFunctionDefinitions() == 1 )
     _dummyList = [ fd ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ fd1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -317,14 +317,14 @@ def test_Model_addInitialAssignment1(self):
     m = libsbml.Model(2,2)
     ia = libsbml.InitialAssignment(2,2)
     i = m.addInitialAssignment(ia)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     ia.setSymbol( "i")
     i = m.addInitialAssignment(ia)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     ia.setMath(libsbml.parseFormula("gg"))
     i = m.addInitialAssignment(ia)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumInitialAssignments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumInitialAssignments() == 1 )
     _dummyList = [ ia ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -335,8 +335,8 @@ def test_Model_addInitialAssignment2(self):
     ia.setSymbol( "i")
     ia.setMath(libsbml.parseFormula("gg"))
     i = m.addInitialAssignment(ia)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumInitialAssignments() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumInitialAssignments() == 0 )
     _dummyList = [ ia ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -345,8 +345,8 @@ def test_Model_addInitialAssignment3(self):
     m = libsbml.Model(2,2)
     ia = None
     i = m.addInitialAssignment(ia)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumInitialAssignments() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumInitialAssignments() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -359,11 +359,11 @@ def test_Model_addInitialAssignment4(self):
     ia1.setSymbol( "ia")
     ia1.setMath(libsbml.parseFormula("a+b"))
     i = m.addInitialAssignment(ia)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumInitialAssignments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumInitialAssignments() == 1 )
     i = m.addInitialAssignment(ia1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumInitialAssignments() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumInitialAssignments() == 1 )
     _dummyList = [ ia ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ia1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -373,11 +373,11 @@ def test_Model_addParameter1(self):
     m = libsbml.Model(2,2)
     p = libsbml.Parameter(2,2)
     i = m.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     p.setId( "p")
     i = m.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumParameters() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumParameters() == 1 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -387,8 +387,8 @@ def test_Model_addParameter2(self):
     p = libsbml.Parameter(2,1)
     p.setId( "p")
     i = m.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumParameters() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumParameters() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -398,8 +398,8 @@ def test_Model_addParameter3(self):
     p = libsbml.Parameter(1,2)
     p.setId( "p")
     i = m.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumParameters() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumParameters() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -408,8 +408,8 @@ def test_Model_addParameter4(self):
     m = libsbml.Model(2,2)
     p = None
     i = m.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumParameters() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumParameters() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -420,11 +420,11 @@ def test_Model_addParameter5(self):
     p1 = libsbml.Parameter(2,2)
     p1.setId( "p")
     i = m.addParameter(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumParameters() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumParameters() == 1 )
     i = m.addParameter(p1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumParameters() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumParameters() == 1 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ p1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -434,11 +434,11 @@ def test_Model_addReaction1(self):
     m = libsbml.Model(2,2)
     r = libsbml.Reaction(2,2)
     i = m.addReaction(r)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     r.setId( "r")
     i = m.addReaction(r)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumReactions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumReactions() == 1 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -448,8 +448,8 @@ def test_Model_addReaction2(self):
     r = libsbml.Reaction(2,1)
     r.setId( "r")
     i = m.addReaction(r)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumReactions() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumReactions() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -459,8 +459,8 @@ def test_Model_addReaction3(self):
     r = libsbml.Reaction(1,2)
     r.setId( "r")
     i = m.addReaction(r)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumReactions() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumReactions() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -469,8 +469,8 @@ def test_Model_addReaction4(self):
     m = libsbml.Model(2,2)
     r = None
     i = m.addReaction(r)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumReactions() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumReactions() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -481,11 +481,11 @@ def test_Model_addReaction5(self):
     r1 = libsbml.Reaction(2,2)
     r1.setId( "r")
     i = m.addReaction(r)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumReactions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumReactions() == 1 )
     i = m.addReaction(r1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumReactions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumReactions() == 1 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ r1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -495,14 +495,14 @@ def test_Model_addRule1(self):
     m = libsbml.Model(2,2)
     r = libsbml.AssignmentRule(2,2)
     i = m.addRule(r)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     r.setVariable( "f")
     i = m.addRule(r)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     r.setMath(libsbml.parseFormula("a-n"))
     i = m.addRule(r)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumRules() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumRules() == 1 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -513,8 +513,8 @@ def test_Model_addRule2(self):
     r.setVariable( "f")
     r.setMath(libsbml.parseFormula("a-n"))
     i = m.addRule(r)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumRules() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumRules() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -525,8 +525,8 @@ def test_Model_addRule3(self):
     r.setVariable( "f")
     r.setMath(libsbml.parseFormula("a-n"))
     i = m.addRule(r)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumRules() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumRules() == 0 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -535,8 +535,8 @@ def test_Model_addRule4(self):
     m = libsbml.Model(2,2)
     r = None
     i = m.addRule(r)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumRules() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumRules() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -549,11 +549,11 @@ def test_Model_addRule5(self):
     ar1.setVariable( "ar")
     ar1.setMath(libsbml.parseFormula("a-j"))
     i = m.addRule(ar)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumRules() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumRules() == 1 )
     i = m.addRule(ar1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumRules() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumRules() == 1 )
     _dummyList = [ ar ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ar1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -563,14 +563,14 @@ def test_Model_addSpecies1(self):
     m = libsbml.Model(2,2)
     s = libsbml.Species(2,2)
     i = m.addSpecies(s)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     s.setId( "s")
     i = m.addSpecies(s)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     s.setCompartment( "c")
     i = m.addSpecies(s)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumSpecies() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumSpecies() == 1 )
     _dummyList = [ s ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -581,8 +581,8 @@ def test_Model_addSpecies2(self):
     s.setId( "s")
     s.setCompartment( "c")
     i = m.addSpecies(s)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumSpecies() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumSpecies() == 0 )
     _dummyList = [ s ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -594,8 +594,8 @@ def test_Model_addSpecies3(self):
     s.setCompartment( "c")
     s.setInitialAmount(2)
     i = m.addSpecies(s)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumSpecies() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumSpecies() == 0 )
     _dummyList = [ s ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -604,8 +604,8 @@ def test_Model_addSpecies4(self):
     m = libsbml.Model(2,2)
     s = None
     i = m.addSpecies(s)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumSpecies() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumSpecies() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -618,11 +618,11 @@ def test_Model_addSpecies5(self):
     s1.setId( "s")
     s1.setCompartment( "c")
     i = m.addSpecies(s)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumSpecies() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumSpecies() == 1 )
     i = m.addSpecies(s1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumSpecies() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumSpecies() == 1 )
     _dummyList = [ s ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ s1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -632,11 +632,11 @@ def test_Model_addSpeciesType1(self):
     m = libsbml.Model(2,2)
     st = libsbml.SpeciesType(2,2)
     i = m.addSpeciesType(st)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     st.setId( "st")
     i = m.addSpeciesType(st)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumSpeciesTypes() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumSpeciesTypes() == 1 )
     _dummyList = [ st ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -646,8 +646,8 @@ def test_Model_addSpeciesType2(self):
     st = libsbml.SpeciesType(2,3)
     st.setId( "st")
     i = m.addSpeciesType(st)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumSpeciesTypes() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumSpeciesTypes() == 0 )
     _dummyList = [ st ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -656,8 +656,8 @@ def test_Model_addSpeciesType3(self):
     m = libsbml.Model(2,2)
     st = None
     i = m.addSpeciesType(st)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumSpeciesTypes() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumSpeciesTypes() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -668,11 +668,11 @@ def test_Model_addSpeciesType4(self):
     st1 = libsbml.SpeciesType(2,2)
     st1.setId( "st")
     i = m.addSpeciesType(st)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumSpeciesTypes() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumSpeciesTypes() == 1 )
     i = m.addSpeciesType(st1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumSpeciesTypes() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumSpeciesTypes() == 1 )
     _dummyList = [ st ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ st1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -682,14 +682,14 @@ def test_Model_addUnitDefinition1(self):
     m = libsbml.Model(2,2)
     ud = libsbml.UnitDefinition(2,2)
     i = m.addUnitDefinition(ud)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     ud.createUnit()
     i = m.addUnitDefinition(ud)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     ud.setId( "ud")
     i = m.addUnitDefinition(ud)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumUnitDefinitions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumUnitDefinitions() == 1 )
     _dummyList = [ ud ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -700,8 +700,8 @@ def test_Model_addUnitDefinition2(self):
     ud.createUnit()
     ud.setId( "ud")
     i = m.addUnitDefinition(ud)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumUnitDefinitions() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumUnitDefinitions() == 0 )
     _dummyList = [ ud ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -712,8 +712,8 @@ def test_Model_addUnitDefinition3(self):
     ud.createUnit()
     ud.setId( "ud")
     i = m.addUnitDefinition(ud)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumUnitDefinitions() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumUnitDefinitions() == 0 )
     _dummyList = [ ud ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -722,8 +722,8 @@ def test_Model_addUnitDefinition4(self):
     m = libsbml.Model(2,2)
     ud = None
     i = m.addUnitDefinition(ud)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumUnitDefinitions() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumUnitDefinitions() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -736,11 +736,11 @@ def test_Model_addUnitDefinition5(self):
     ud1.setId( "ud")
     ud1.createUnit()
     i = m.addUnitDefinition(ud)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumUnitDefinitions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumUnitDefinitions() == 1 )
     i = m.addUnitDefinition(ud1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumUnitDefinitions() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumUnitDefinitions() == 1 )
     _dummyList = [ ud ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ud1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -749,36 +749,36 @@ def test_Model_addUnitDefinition5(self):
   def test_Model_createCompartment(self):
     m = libsbml.Model(2,2)
     p = m.createCompartment()
-    self.assert_( m.getNumCompartments() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumCompartments() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createCompartmentType(self):
     m = libsbml.Model(2,2)
     p = m.createCompartmentType()
-    self.assert_( m.getNumCompartmentTypes() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumCompartmentTypes() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createConstraint(self):
     m = libsbml.Model(2,2)
     p = m.createConstraint()
-    self.assert_( m.getNumConstraints() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumConstraints() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createEvent(self):
     m = libsbml.Model(2,2)
     p = m.createEvent()
-    self.assert_( m.getNumEvents() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumEvents() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -786,27 +786,27 @@ def test_Model_createEventAssignment(self):
     m = libsbml.Model(2,2)
     p = m.createEvent()
     ea = m.createEventAssignment()
-    self.assert_( p.getNumEventAssignments() == 1 )
-    self.assert_( (ea).getLevel() == 2 )
-    self.assert_( (ea).getVersion() == 2 )
+    self.assertTrue( p.getNumEventAssignments() == 1 )
+    self.assertTrue( (ea).getLevel() == 2 )
+    self.assertTrue( (ea).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createFunctionDefinition(self):
     m = libsbml.Model(2,2)
     p = m.createFunctionDefinition()
-    self.assert_( m.getNumFunctionDefinitions() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumFunctionDefinitions() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createInitialAssignment(self):
     m = libsbml.Model(2,2)
     p = m.createInitialAssignment()
-    self.assert_( m.getNumInitialAssignments() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumInitialAssignments() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -814,9 +814,9 @@ def test_Model_createKineticLaw(self):
     m = libsbml.Model(2,2)
     p = m.createReaction()
     kl = m.createKineticLaw()
-    self.assert_( p.isSetKineticLaw() == True )
-    self.assert_( (kl).getLevel() == 2 )
-    self.assert_( (kl).getVersion() == 2 )
+    self.assertTrue( p.isSetKineticLaw() == True )
+    self.assertTrue( (kl).getLevel() == 2 )
+    self.assertTrue( (kl).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -825,10 +825,10 @@ def test_Model_createKineticLawParameters(self):
     r = m.createReaction()
     kl = m.createKineticLaw()
     p = m.createKineticLawParameter()
-    self.assert_( r.isSetKineticLaw() == True )
-    self.assert_( kl.getNumParameters() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( r.isSetKineticLaw() == True )
+    self.assertTrue( kl.getNumParameters() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -836,18 +836,18 @@ def test_Model_createModifier(self):
     m = libsbml.Model(2,2)
     p = m.createReaction()
     sr = m.createModifier()
-    self.assert_( p.getNumModifiers() == 1 )
-    self.assert_( (sr).getLevel() == 2 )
-    self.assert_( (sr).getVersion() == 2 )
+    self.assertTrue( p.getNumModifiers() == 1 )
+    self.assertTrue( (sr).getLevel() == 2 )
+    self.assertTrue( (sr).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createParameter(self):
     m = libsbml.Model(2,2)
     p = m.createParameter()
-    self.assert_( m.getNumParameters() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumParameters() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -855,9 +855,9 @@ def test_Model_createProduct(self):
     m = libsbml.Model(2,2)
     p = m.createReaction()
     sr = m.createProduct()
-    self.assert_( p.getNumProducts() == 1 )
-    self.assert_( (sr).getLevel() == 2 )
-    self.assert_( (sr).getVersion() == 2 )
+    self.assertTrue( p.getNumProducts() == 1 )
+    self.assertTrue( (sr).getLevel() == 2 )
+    self.assertTrue( (sr).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -865,45 +865,45 @@ def test_Model_createReactant(self):
     m = libsbml.Model(2,2)
     p = m.createReaction()
     sr = m.createReactant()
-    self.assert_( p.getNumReactants() == 1 )
-    self.assert_( (sr).getLevel() == 2 )
-    self.assert_( (sr).getVersion() == 2 )
+    self.assertTrue( p.getNumReactants() == 1 )
+    self.assertTrue( (sr).getLevel() == 2 )
+    self.assertTrue( (sr).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createReaction(self):
     m = libsbml.Model(2,2)
     p = m.createReaction()
-    self.assert_( m.getNumReactions() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumReactions() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createRule(self):
     m = libsbml.Model(2,2)
     p = m.createAssignmentRule()
-    self.assert_( m.getNumRules() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumRules() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createSpecies(self):
     m = libsbml.Model(2,2)
     p = m.createSpecies()
-    self.assert_( m.getNumSpecies() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumSpecies() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createSpeciesType(self):
     m = libsbml.Model(2,2)
     p = m.createSpeciesType()
-    self.assert_( m.getNumSpeciesTypes() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumSpeciesTypes() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -911,47 +911,47 @@ def test_Model_createUnit(self):
     m = libsbml.Model(2,2)
     p = m.createUnitDefinition()
     u = m.createUnit()
-    self.assert_( p.getNumUnits() == 1 )
-    self.assert_( (u).getLevel() == 2 )
-    self.assert_( (u).getVersion() == 2 )
+    self.assertTrue( p.getNumUnits() == 1 )
+    self.assertTrue( (u).getLevel() == 2 )
+    self.assertTrue( (u).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_createUnitDefinition(self):
     m = libsbml.Model(2,2)
     p = m.createUnitDefinition()
-    self.assert_( m.getNumUnitDefinitions() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumUnitDefinitions() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Model_setId1(self):
     id =  "1e1";
     i = self.M.setId(id)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.M.isSetId() )
     pass  
 
   def test_Model_setId2(self):
     id =  "e1";
     i = self.M.setId(id)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( id == self.M.getId() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( id == self.M.getId() ))
     self.assertEqual( True, self.M.isSetId() )
     i = self.M.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.M.isSetId() )
     pass  
 
   def test_Model_setId3(self):
     id =  "e1";
     i = self.M.setId(id)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( id == self.M.getId() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( id == self.M.getId() ))
     self.assertEqual( True, self.M.isSetId() )
     i = self.M.unsetId()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.M.isSetId() )
     pass  
 
@@ -959,10 +959,10 @@ def test_Model_setModelHistory1(self):
     self.M.setMetaId("_001")
     mh = libsbml.ModelHistory()
     i = self.M.setModelHistory(mh)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.M.isSetModelHistory() )
     i = self.M.unsetModelHistory()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.M.isSetModelHistory() )
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -970,41 +970,41 @@ def test_Model_setModelHistory1(self):
   def test_Model_setModelHistory2(self):
     self.M.setMetaId("_001")
     i = self.M.setModelHistory(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.M.isSetModelHistory() )
     i = self.M.unsetModelHistory()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.M.isSetModelHistory() )
     pass  
 
   def test_Model_setName1(self):
     name =  "3Set_k2";
     i = self.M.setName(name)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.M.isSetName() )
     pass  
 
   def test_Model_setName2(self):
     name =  "Set k2";
     i = self.M.setName(name)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( name == self.M.getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( name == self.M.getName() ))
     self.assertEqual( True, self.M.isSetName() )
     i = self.M.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.M.isSetName() )
     pass  
 
   def test_Model_setName3(self):
     i = self.M.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.M.isSetName() )
     pass  
 
   def test_Model_setName4(self):
     m = libsbml.Model(1,2)
     i = m.setName( "11dd")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, m.isSetName() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestModifierSpeciesReference.py b/src/bindings/python/test/sbml/TestModifierSpeciesReference.py
index 36513fd4d8..df4d875426 100644
--- a/src/bindings/python/test/sbml/TestModifierSpeciesReference.py
+++ b/src/bindings/python/test/sbml/TestModifierSpeciesReference.py
@@ -50,11 +50,11 @@ def tearDown(self):
     pass  
 
   def test_ModifierSpeciesReference_create(self):
-    self.assert_( self.MSR.getTypeCode() == libsbml.SBML_MODIFIER_SPECIES_REFERENCE )
-    self.assert_( self.MSR.getMetaId() == "" )
-    self.assert_( self.MSR.getNotes() == None )
-    self.assert_( self.MSR.getAnnotation() == None )
-    self.assert_( self.MSR.getSpecies() == "" )
+    self.assertTrue( self.MSR.getTypeCode() == libsbml.SBML_MODIFIER_SPECIES_REFERENCE )
+    self.assertTrue( self.MSR.getMetaId() == "" )
+    self.assertTrue( self.MSR.getNotes() == None )
+    self.assertTrue( self.MSR.getAnnotation() == None )
+    self.assertTrue( self.MSR.getSpecies() == "" )
     self.assertEqual( False, self.MSR.isSetSpecies() )
     self.assertEqual( True, self.MSR.isModifier() )
     pass  
@@ -65,15 +65,15 @@ def test_ModifierSpeciesReference_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.ModifierSpeciesReference(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_MODIFIER_SPECIES_REFERENCE )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_MODIFIER_SPECIES_REFERENCE )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
     n = object.getNamespaces()
-    self.assert_( n.getLength() == 2 )
+    self.assertTrue( n.getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -85,14 +85,14 @@ def test_ModifierSpeciesReference_setSpecies(self):
     species =  "s1";
     self.MSR.setSpecies(species)
     s = self.MSR.getSpecies()
-    self.assert_(( species == s ))
+    self.assertTrue(( species == s ))
     self.assertEqual( True, self.MSR.isSetSpecies() )
     if (self.MSR.getSpecies() == species):
       pass    
     s = self.MSR.getSpecies()
     self.MSR.setSpecies(s)
     s = self.MSR.getSpecies()
-    self.assert_(( species == s ))
+    self.assertTrue(( species == s ))
     self.MSR.setSpecies("")
     self.assertEqual( False, self.MSR.isSetSpecies() )
     if (self.MSR.getSpecies() != None):
diff --git a/src/bindings/python/test/sbml/TestParameter.py b/src/bindings/python/test/sbml/TestParameter.py
index 87ffb66869..034059e2b3 100644
--- a/src/bindings/python/test/sbml/TestParameter.py
+++ b/src/bindings/python/test/sbml/TestParameter.py
@@ -50,14 +50,14 @@ def tearDown(self):
     pass  
 
   def test_Parameter_create(self):
-    self.assert_( self.P.getTypeCode() == libsbml.SBML_PARAMETER )
-    self.assert_( self.P.getMetaId() == "" )
-    self.assert_( self.P.getNotes() == None )
-    self.assert_( self.P.getAnnotation() == None )
-    self.assert_( self.P.getId() == "" )
-    self.assert_( self.P.getName() == "" )
-    self.assert_( self.P.getUnits() == "" )
-    self.assert_( self.P.getConstant() == True )
+    self.assertTrue( self.P.getTypeCode() == libsbml.SBML_PARAMETER )
+    self.assertTrue( self.P.getMetaId() == "" )
+    self.assertTrue( self.P.getNotes() == None )
+    self.assertTrue( self.P.getAnnotation() == None )
+    self.assertTrue( self.P.getId() == "" )
+    self.assertTrue( self.P.getName() == "" )
+    self.assertTrue( self.P.getUnits() == "" )
+    self.assertTrue( self.P.getConstant() == True )
     self.assertEqual( False, self.P.isSetId() )
     self.assertEqual( False, self.P.isSetName() )
     self.assertEqual( False, self.P.isSetValue() )
@@ -71,14 +71,14 @@ def test_Parameter_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Parameter(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_PARAMETER )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_PARAMETER )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -89,12 +89,12 @@ def test_Parameter_free_NULL(self):
   def test_Parameter_setId(self):
     id =  "Km1";
     self.P.setId(id)
-    self.assert_(( id == self.P.getId() ))
+    self.assertTrue(( id == self.P.getId() ))
     self.assertEqual( True, self.P.isSetId() )
     if (self.P.getId() == id):
       pass    
     self.P.setId(self.P.getId())
-    self.assert_(( id == self.P.getId() ))
+    self.assertTrue(( id == self.P.getId() ))
     self.P.setId("")
     self.assertEqual( False, self.P.isSetId() )
     if (self.P.getId() != None):
@@ -104,12 +104,12 @@ def test_Parameter_setId(self):
   def test_Parameter_setName(self):
     name =  "Forward_Michaelis_Menten_Constant";
     self.P.setName(name)
-    self.assert_(( name == self.P.getName() ))
+    self.assertTrue(( name == self.P.getName() ))
     self.assertEqual( True, self.P.isSetName() )
     if (self.P.getName() == name):
       pass    
     self.P.setName(self.P.getName())
-    self.assert_(( name == self.P.getName() ))
+    self.assertTrue(( name == self.P.getName() ))
     self.P.setName("")
     self.assertEqual( False, self.P.isSetName() )
     if (self.P.getName() != None):
@@ -119,12 +119,12 @@ def test_Parameter_setName(self):
   def test_Parameter_setUnits(self):
     units =  "second";
     self.P.setUnits(units)
-    self.assert_(( units == self.P.getUnits() ))
+    self.assertTrue(( units == self.P.getUnits() ))
     self.assertEqual( True, self.P.isSetUnits() )
     if (self.P.getUnits() == units):
       pass    
     self.P.setUnits(self.P.getUnits())
-    self.assert_(( units == self.P.getUnits() ))
+    self.assertTrue(( units == self.P.getUnits() ))
     self.P.setUnits("")
     self.assertEqual( False, self.P.isSetUnits() )
     if (self.P.getUnits() != None):
diff --git a/src/bindings/python/test/sbml/TestParameterRule.py b/src/bindings/python/test/sbml/TestParameterRule.py
index a0b260557b..52c7968205 100644
--- a/src/bindings/python/test/sbml/TestParameterRule.py
+++ b/src/bindings/python/test/sbml/TestParameterRule.py
@@ -51,14 +51,14 @@ def tearDown(self):
     pass  
 
   def test_ParameterRule_create(self):
-    self.assert_( self.PR.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
-    self.assert_( self.PR.getL1TypeCode() == libsbml.SBML_PARAMETER_RULE )
-    self.assert_( self.PR.getNotes() == None )
-    self.assert_( self.PR.getAnnotation() == None )
-    self.assert_( self.PR.getFormula() == "" )
-    self.assert_( self.PR.getUnits() == "" )
-    self.assert_( self.PR.getVariable() == "" )
-    self.assert_( self.PR.getType() == libsbml.RULE_TYPE_SCALAR )
+    self.assertTrue( self.PR.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( self.PR.getL1TypeCode() == libsbml.SBML_PARAMETER_RULE )
+    self.assertTrue( self.PR.getNotes() == None )
+    self.assertTrue( self.PR.getAnnotation() == None )
+    self.assertTrue( self.PR.getFormula() == "" )
+    self.assertTrue( self.PR.getUnits() == "" )
+    self.assertTrue( self.PR.getVariable() == "" )
+    self.assertTrue( self.PR.getType() == libsbml.RULE_TYPE_SCALAR )
     self.assertEqual( False, self.PR.isSetVariable() )
     self.assertEqual( False, self.PR.isSetUnits() )
     pass  
@@ -70,13 +70,13 @@ def test_ParameterRule_free_NULL(self):
   def test_ParameterRule_setName(self):
     name =  "cell";
     self.PR.setVariable(name)
-    self.assert_(( name == self.PR.getVariable() ))
+    self.assertTrue(( name == self.PR.getVariable() ))
     self.assertEqual( True, self.PR.isSetVariable() )
     if (self.PR.getVariable() == name):
       pass    
     c = self.PR.getVariable()
     self.PR.setVariable(c)
-    self.assert_(( name == self.PR.getVariable() ))
+    self.assertTrue(( name == self.PR.getVariable() ))
     self.PR.setVariable("")
     self.assertEqual( False, self.PR.isSetVariable() )
     if (self.PR.getVariable() != None):
@@ -86,12 +86,12 @@ def test_ParameterRule_setName(self):
   def test_ParameterRule_setUnits(self):
     units =  "cell";
     self.PR.setUnits(units)
-    self.assert_(( units == self.PR.getUnits() ))
+    self.assertTrue(( units == self.PR.getUnits() ))
     self.assertEqual( True, self.PR.isSetUnits() )
     if (self.PR.getUnits() == units):
       pass    
     self.PR.setUnits(self.PR.getUnits())
-    self.assert_(( units == self.PR.getUnits() ))
+    self.assertTrue(( units == self.PR.getUnits() ))
     self.PR.setUnits("")
     self.assertEqual( False, self.PR.isSetUnits() )
     if (self.PR.getUnits() != None):
diff --git a/src/bindings/python/test/sbml/TestParameter_newSetters.py b/src/bindings/python/test/sbml/TestParameter_newSetters.py
index ec66e7e170..1193d31a2c 100644
--- a/src/bindings/python/test/sbml/TestParameter_newSetters.py
+++ b/src/bindings/python/test/sbml/TestParameter_newSetters.py
@@ -51,50 +51,50 @@ def tearDown(self):
 
   def test_Parameter_setConstant1(self):
     i = self.P.setConstant(False)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( self.P.getConstant() == False )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.P.getConstant() == False )
     pass  
 
   def test_Parameter_setConstant2(self):
     p = libsbml.Parameter(2,2)
     i = p.setConstant(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( p.getConstant() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( p.getConstant() == False )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Parameter_setId1(self):
     i = self.P.setId( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.P.isSetId() )
     pass  
 
   def test_Parameter_setId2(self):
     i = self.P.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.P.isSetId() )
-    self.assert_((  "cell"  == self.P.getId() ))
+    self.assertTrue((  "cell"  == self.P.getId() ))
     i = self.P.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.P.isSetId() )
     pass  
 
   def test_Parameter_setName1(self):
     i = self.P.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.P.isSetName() )
     i = self.P.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.P.isSetName() )
     pass  
 
   def test_Parameter_setName2(self):
     p = libsbml.Parameter(2,2)
     i = p.setName( "1cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, p.isSetName() )
     i = p.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, p.isSetName() )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -102,52 +102,52 @@ def test_Parameter_setName2(self):
   def test_Parameter_setName3(self):
     p = libsbml.Parameter(1,2)
     i = p.setName( "11pp")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, p.isSetName() )
     i = p.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, p.isSetName() )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Parameter_setUnits1(self):
     i = self.P.setUnits( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.P.isSetUnits() )
     i = self.P.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.P.isSetUnits() )
     pass  
 
   def test_Parameter_setUnits2(self):
     i = self.P.setUnits( "litre")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.P.isSetUnits() )
     i = self.P.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.P.isSetUnits() )
     pass  
 
   def test_Parameter_setUnits3(self):
     i = self.P.setUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.P.isSetUnits() )
     pass  
 
   def test_Parameter_setValue1(self):
     i = self.P.setValue(2.0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.P.getValue() == 2.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.P.getValue() == 2.0 )
     self.assertEqual( True, self.P.isSetValue() )
     i = self.P.unsetValue()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.P.isSetValue() )
     pass  
 
   def test_Parameter_setValue2(self):
     p = libsbml.Parameter(2,2)
     i = p.unsetValue()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, p.isSetValue() )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestPriority.py b/src/bindings/python/test/sbml/TestPriority.py
index 0393643cae..6ab746ae1b 100644
--- a/src/bindings/python/test/sbml/TestPriority.py
+++ b/src/bindings/python/test/sbml/TestPriority.py
@@ -50,11 +50,11 @@ def tearDown(self):
     pass  
 
   def test_Priority_create(self):
-    self.assert_( self.P.getTypeCode() == libsbml.SBML_PRIORITY )
-    self.assert_( self.P.getMetaId() == "" )
-    self.assert_( self.P.getNotes() == None )
-    self.assert_( self.P.getAnnotation() == None )
-    self.assert_( self.P.getMath() == None )
+    self.assertTrue( self.P.getTypeCode() == libsbml.SBML_PRIORITY )
+    self.assertTrue( self.P.getMetaId() == "" )
+    self.assertTrue( self.P.getNotes() == None )
+    self.assertTrue( self.P.getAnnotation() == None )
+    self.assertTrue( self.P.getMath() == None )
     pass  
 
   def test_Priority_createWithNS(self):
@@ -63,14 +63,14 @@ def test_Priority_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(3,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Priority(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_PRIORITY )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 3 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_PRIORITY )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 3 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -82,18 +82,18 @@ def test_Priority_setMath(self):
     math = libsbml.parseFormula("lambda(x, x^3)")
     self.P.setMath(math)
     math1 = self.P.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
-    self.assert_( self.P.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( self.P.getMath() != math )
     self.assertEqual( True, self.P.isSetMath() )
     self.P.setMath(self.P.getMath())
     math1 = self.P.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
     self.P.setMath(None)
     self.assertEqual( False, self.P.isSetMath() )
     if (self.P.getMath() != None):
@@ -103,12 +103,12 @@ def test_Priority_setMath(self):
   def test_Priority_setMath1(self):
     math = libsbml.parseFormula("2 * k")
     i = self.P.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.P.getMath() != math )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.P.getMath() != math )
     self.assertEqual( True, self.P.isSetMath() )
     i = self.P.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.P.getMath() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.P.getMath() == None )
     self.assertEqual( False, self.P.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -116,7 +116,7 @@ def test_Priority_setMath1(self):
   def test_Priority_setMath2(self):
     math = libsbml.ASTNode(libsbml.AST_DIVIDE)
     i = self.P.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.P.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestRateRule.py b/src/bindings/python/test/sbml/TestRateRule.py
index c88f847bbe..bfeca2ec78 100644
--- a/src/bindings/python/test/sbml/TestRateRule.py
+++ b/src/bindings/python/test/sbml/TestRateRule.py
@@ -50,14 +50,14 @@ def tearDown(self):
     pass  
 
   def test_RateRule_create(self):
-    self.assert_( self.RR.getTypeCode() == libsbml.SBML_RATE_RULE )
-    self.assert_( self.RR.getMetaId() == "" )
-    self.assert_( self.RR.getNotes() == None )
-    self.assert_( self.RR.getAnnotation() == None )
-    self.assert_( self.RR.getFormula() == "" )
-    self.assert_( self.RR.getMath() == None )
-    self.assert_( self.RR.getVariable() == "" )
-    self.assert_( self.RR.getType() == libsbml.RULE_TYPE_RATE )
+    self.assertTrue( self.RR.getTypeCode() == libsbml.SBML_RATE_RULE )
+    self.assertTrue( self.RR.getMetaId() == "" )
+    self.assertTrue( self.RR.getNotes() == None )
+    self.assertTrue( self.RR.getAnnotation() == None )
+    self.assertTrue( self.RR.getFormula() == "" )
+    self.assertTrue( self.RR.getMath() == None )
+    self.assertTrue( self.RR.getVariable() == "" )
+    self.assertTrue( self.RR.getType() == libsbml.RULE_TYPE_RATE )
     pass  
 
   def test_RateRule_createWithNS(self):
@@ -66,14 +66,14 @@ def test_RateRule_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.RateRule(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_RATE_RULE )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_RATE_RULE )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -84,12 +84,12 @@ def test_RateRule_free_NULL(self):
   def test_RateRule_setVariable(self):
     variable =  "x";
     self.RR.setVariable(variable)
-    self.assert_(( variable == self.RR.getVariable() ))
+    self.assertTrue(( variable == self.RR.getVariable() ))
     self.assertEqual( True, self.RR.isSetVariable() )
     if (self.RR.getVariable() == variable):
       pass    
     self.RR.setVariable(self.RR.getVariable())
-    self.assert_(( variable == self.RR.getVariable() ))
+    self.assertTrue(( variable == self.RR.getVariable() ))
     self.RR.setVariable("")
     self.assertEqual( False, self.RR.isSetVariable() )
     if (self.RR.getVariable() != None):
diff --git a/src/bindings/python/test/sbml/TestReaction.py b/src/bindings/python/test/sbml/TestReaction.py
index aa4ed30777..6bf6e455d9 100644
--- a/src/bindings/python/test/sbml/TestReaction.py
+++ b/src/bindings/python/test/sbml/TestReaction.py
@@ -53,9 +53,9 @@ def test_Reaction_addProduct(self):
     sr = libsbml.SpeciesReference(2,4)
     sr.setSpecies( "s")
     self.R.addProduct(sr)
-    self.assert_( self.R.getNumReactants() == 0 )
-    self.assert_( self.R.getNumProducts() == 1 )
-    self.assert_( self.R.getNumModifiers() == 0 )
+    self.assertTrue( self.R.getNumReactants() == 0 )
+    self.assertTrue( self.R.getNumProducts() == 1 )
+    self.assertTrue( self.R.getNumModifiers() == 0 )
     _dummyList = [ sr ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -63,30 +63,30 @@ def test_Reaction_addReactant(self):
     sr = libsbml.SpeciesReference(2,4)
     sr.setSpecies( "s")
     self.R.addReactant(sr)
-    self.assert_( self.R.getNumReactants() == 1 )
-    self.assert_( self.R.getNumProducts() == 0 )
-    self.assert_( self.R.getNumModifiers() == 0 )
+    self.assertTrue( self.R.getNumReactants() == 1 )
+    self.assertTrue( self.R.getNumProducts() == 0 )
+    self.assertTrue( self.R.getNumModifiers() == 0 )
     _dummyList = [ sr ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Reaction_create(self):
-    self.assert_( self.R.getTypeCode() == libsbml.SBML_REACTION )
-    self.assert_( self.R.getMetaId() == "" )
-    self.assert_( self.R.getNotes() == None )
-    self.assert_( self.R.getAnnotation() == None )
-    self.assert_( self.R.getId() == "" )
-    self.assert_( self.R.getName() == "" )
-    self.assert_( self.R.getKineticLaw() == None )
-    self.assert_( self.R.getReversible() != False )
-    self.assert_( self.R.getFast() == False )
+    self.assertTrue( self.R.getTypeCode() == libsbml.SBML_REACTION )
+    self.assertTrue( self.R.getMetaId() == "" )
+    self.assertTrue( self.R.getNotes() == None )
+    self.assertTrue( self.R.getAnnotation() == None )
+    self.assertTrue( self.R.getId() == "" )
+    self.assertTrue( self.R.getName() == "" )
+    self.assertTrue( self.R.getKineticLaw() == None )
+    self.assertTrue( self.R.getReversible() != False )
+    self.assertTrue( self.R.getFast() == False )
     self.assertEqual( False, self.R.isSetId() )
     self.assertEqual( False, self.R.isSetName() )
     self.assertEqual( False, self.R.isSetKineticLaw() )
     self.assertEqual( False, self.R.isSetFast() )
     self.assertEqual( True, self.R.isSetReversible() )
-    self.assert_( self.R.getNumReactants() == 0 )
-    self.assert_( self.R.getNumProducts() == 0 )
-    self.assert_( self.R.getNumModifiers() == 0 )
+    self.assertTrue( self.R.getNumReactants() == 0 )
+    self.assertTrue( self.R.getNumProducts() == 0 )
+    self.assertTrue( self.R.getNumModifiers() == 0 )
     pass  
 
   def test_Reaction_createWithNS(self):
@@ -95,14 +95,14 @@ def test_Reaction_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Reaction(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_REACTION )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_REACTION )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -119,13 +119,13 @@ def test_Reaction_getProduct(self):
     self.R.addProduct(sr2)
     _dummyList = [ sr1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ sr2 ]; _dummyList[:] = []; del _dummyList
-    self.assert_( self.R.getNumReactants() == 0 )
-    self.assert_( self.R.getNumProducts() == 2 )
-    self.assert_( self.R.getNumModifiers() == 0 )
+    self.assertTrue( self.R.getNumReactants() == 0 )
+    self.assertTrue( self.R.getNumProducts() == 2 )
+    self.assertTrue( self.R.getNumModifiers() == 0 )
     sr1 = self.R.getProduct(0)
     sr2 = self.R.getProduct(1)
-    self.assert_((  "P1" == sr1.getSpecies() ))
-    self.assert_((  "P2" == sr2.getSpecies() ))
+    self.assertTrue((  "P1" == sr1.getSpecies() ))
+    self.assertTrue((  "P2" == sr2.getSpecies() ))
     pass  
 
   def test_Reaction_getProductById(self):
@@ -135,12 +135,12 @@ def test_Reaction_getProductById(self):
     sr2.setSpecies( "P1")
     self.R.addProduct(sr1)
     self.R.addProduct(sr2)
-    self.assert_( self.R.getNumReactants() == 0 )
-    self.assert_( self.R.getNumProducts() == 2 )
-    self.assert_( self.R.getNumModifiers() == 0 )
-    self.assert_( self.R.getProduct( "P1") != sr1 )
-    self.assert_( self.R.getProduct( "P2") != sr2 )
-    self.assert_( self.R.getProduct( "P3") == None )
+    self.assertTrue( self.R.getNumReactants() == 0 )
+    self.assertTrue( self.R.getNumProducts() == 2 )
+    self.assertTrue( self.R.getNumModifiers() == 0 )
+    self.assertTrue( self.R.getProduct( "P1") != sr1 )
+    self.assertTrue( self.R.getProduct( "P2") != sr2 )
+    self.assertTrue( self.R.getProduct( "P3") == None )
     _dummyList = [ sr1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ sr2 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -154,13 +154,13 @@ def test_Reaction_getReactant(self):
     self.R.addReactant(sr2)
     _dummyList = [ sr1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ sr2 ]; _dummyList[:] = []; del _dummyList
-    self.assert_( self.R.getNumReactants() == 2 )
-    self.assert_( self.R.getNumProducts() == 0 )
-    self.assert_( self.R.getNumModifiers() == 0 )
+    self.assertTrue( self.R.getNumReactants() == 2 )
+    self.assertTrue( self.R.getNumProducts() == 0 )
+    self.assertTrue( self.R.getNumModifiers() == 0 )
     sr1 = self.R.getReactant(0)
     sr2 = self.R.getReactant(1)
-    self.assert_((  "R1" == sr1.getSpecies() ))
-    self.assert_((  "R2" == sr2.getSpecies() ))
+    self.assertTrue((  "R1" == sr1.getSpecies() ))
+    self.assertTrue((  "R2" == sr2.getSpecies() ))
     pass  
 
   def test_Reaction_getReactantById(self):
@@ -170,12 +170,12 @@ def test_Reaction_getReactantById(self):
     sr2.setSpecies( "R2")
     self.R.addReactant(sr1)
     self.R.addReactant(sr2)
-    self.assert_( self.R.getNumReactants() == 2 )
-    self.assert_( self.R.getNumProducts() == 0 )
-    self.assert_( self.R.getNumModifiers() == 0 )
-    self.assert_( self.R.getReactant( "R1") != sr1 )
-    self.assert_( self.R.getReactant( "R2") != sr2 )
-    self.assert_( self.R.getReactant( "R3") == None )
+    self.assertTrue( self.R.getNumReactants() == 2 )
+    self.assertTrue( self.R.getNumProducts() == 0 )
+    self.assertTrue( self.R.getNumModifiers() == 0 )
+    self.assertTrue( self.R.getReactant( "R1") != sr1 )
+    self.assertTrue( self.R.getReactant( "R2") != sr2 )
+    self.assertTrue( self.R.getReactant( "R3") == None )
     _dummyList = [ sr1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ sr2 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -185,12 +185,12 @@ def test_Reaction_removeProduct(self):
     o2 = self.R.createProduct()
     o3 = self.R.createProduct()
     o3.setSpecies("test")
-    self.assert_( self.R.removeProduct(0) == o1 )
-    self.assert_( self.R.getNumProducts() == 2 )
-    self.assert_( self.R.removeProduct(0) == o2 )
-    self.assert_( self.R.getNumProducts() == 1 )
-    self.assert_( self.R.removeProduct("test") == o3 )
-    self.assert_( self.R.getNumProducts() == 0 )
+    self.assertTrue( self.R.removeProduct(0) == o1 )
+    self.assertTrue( self.R.getNumProducts() == 2 )
+    self.assertTrue( self.R.removeProduct(0) == o2 )
+    self.assertTrue( self.R.getNumProducts() == 1 )
+    self.assertTrue( self.R.removeProduct("test") == o3 )
+    self.assertTrue( self.R.getNumProducts() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -201,12 +201,12 @@ def test_Reaction_removeReactant(self):
     o2 = self.R.createReactant()
     o3 = self.R.createReactant()
     o3.setSpecies("test")
-    self.assert_( self.R.removeReactant(0) == o1 )
-    self.assert_( self.R.getNumReactants() == 2 )
-    self.assert_( self.R.removeReactant(0) == o2 )
-    self.assert_( self.R.getNumReactants() == 1 )
-    self.assert_( self.R.removeReactant("test") == o3 )
-    self.assert_( self.R.getNumReactants() == 0 )
+    self.assertTrue( self.R.removeReactant(0) == o1 )
+    self.assertTrue( self.R.getNumReactants() == 2 )
+    self.assertTrue( self.R.removeReactant(0) == o2 )
+    self.assertTrue( self.R.getNumReactants() == 1 )
+    self.assertTrue( self.R.removeReactant("test") == o3 )
+    self.assertTrue( self.R.getNumReactants() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -215,12 +215,12 @@ def test_Reaction_removeReactant(self):
   def test_Reaction_setId(self):
     id =  "J1";
     self.R.setId(id)
-    self.assert_(( id == self.R.getId() ))
+    self.assertTrue(( id == self.R.getId() ))
     self.assertEqual( True, self.R.isSetId() )
     if (self.R.getId() == id):
       pass    
     self.R.setId(self.R.getId())
-    self.assert_(( id == self.R.getId() ))
+    self.assertTrue(( id == self.R.getId() ))
     self.R.setId("")
     self.assertEqual( False, self.R.isSetId() )
     if (self.R.getId() != None):
@@ -230,12 +230,12 @@ def test_Reaction_setId(self):
   def test_Reaction_setName(self):
     name =  "MapK_Cascade";
     self.R.setName(name)
-    self.assert_(( name == self.R.getName() ))
+    self.assertTrue(( name == self.R.getName() ))
     self.assertEqual( True, self.R.isSetName() )
     if (self.R.getName() == name):
       pass    
     self.R.setName(self.R.getName())
-    self.assert_(( name == self.R.getName() ))
+    self.assertTrue(( name == self.R.getName() ))
     self.R.setName("")
     self.assertEqual( False, self.R.isSetName() )
     if (self.R.getName() != None):
diff --git a/src/bindings/python/test/sbml/TestReaction_newSetters.py b/src/bindings/python/test/sbml/TestReaction_newSetters.py
index 298fbf2e51..e5220f0fef 100644
--- a/src/bindings/python/test/sbml/TestReaction_newSetters.py
+++ b/src/bindings/python/test/sbml/TestReaction_newSetters.py
@@ -56,15 +56,15 @@ def test_Reaction_addProduct1(self):
     p1.setSpecies( "k")
     p1.setId( "k1")
     i = m.addProduct(p)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     p.setSpecies( "k")
     p.setId( "k1")
     i = m.addProduct(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumProducts() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumProducts() == 1 )
     i = m.addProduct(p1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumProducts() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumProducts() == 1 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ p1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -75,8 +75,8 @@ def test_Reaction_addProduct2(self):
     p = libsbml.SpeciesReference(2,1)
     p.setSpecies( "k")
     i = m.addProduct(p)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumProducts() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumProducts() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -86,8 +86,8 @@ def test_Reaction_addProduct3(self):
     p = libsbml.SpeciesReference(1,2)
     p.setSpecies( "k")
     i = m.addProduct(p)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumProducts() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumProducts() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -96,8 +96,8 @@ def test_Reaction_addProduct4(self):
     m = libsbml.Reaction(2,2)
     p = None
     i = m.addProduct(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumProducts() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumProducts() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -108,15 +108,15 @@ def test_Reaction_addReactant1(self):
     p1.setSpecies( "k")
     p1.setId( "k1")
     i = m.addReactant(p)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     p.setSpecies( "k")
     p.setId( "k1")
     i = m.addReactant(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumReactants() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumReactants() == 1 )
     i = m.addReactant(p1)
-    self.assert_( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
-    self.assert_( m.getNumReactants() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_DUPLICATE_OBJECT_ID )
+    self.assertTrue( m.getNumReactants() == 1 )
     _dummyList = [ p1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
@@ -127,8 +127,8 @@ def test_Reaction_addReactant2(self):
     p = libsbml.SpeciesReference(2,1)
     p.setSpecies( "k")
     i = m.addReactant(p)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumReactants() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumReactants() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -138,8 +138,8 @@ def test_Reaction_addReactant3(self):
     p = libsbml.SpeciesReference(1,2)
     p.setSpecies( "k")
     i = m.addReactant(p)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumReactants() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumReactants() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -148,74 +148,74 @@ def test_Reaction_addReactant4(self):
     m = libsbml.Reaction(2,2)
     p = None
     i = m.addReactant(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumReactants() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumReactants() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Reaction_createKineticLaw(self):
     r = libsbml.Reaction(2,2)
     kl = r.createKineticLaw()
-    self.assert_( r.isSetKineticLaw() == True )
-    self.assert_( (kl).getLevel() == 2 )
-    self.assert_( (kl).getVersion() == 2 )
+    self.assertTrue( r.isSetKineticLaw() == True )
+    self.assertTrue( (kl).getLevel() == 2 )
+    self.assertTrue( (kl).getVersion() == 2 )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Reaction_createProduct(self):
     m = libsbml.Reaction(2,2)
     p = m.createProduct()
-    self.assert_( m.getNumProducts() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumProducts() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Reaction_createReactant(self):
     m = libsbml.Reaction(2,2)
     p = m.createReactant()
-    self.assert_( m.getNumReactants() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumReactants() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Reaction_setFast1(self):
     i = self.R.setFast(True)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.R.getFast() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.R.getFast() == True )
     self.assertEqual( True, self.R.isSetFast() )
     i = self.R.setFast(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.R.getFast() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.R.getFast() == False )
     self.assertEqual( True, self.R.isSetFast() )
     i = self.R.unsetFast()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.R.getFast() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.R.getFast() == False )
     self.assertEqual( False, self.R.isSetFast() )
     pass  
 
   def test_Reaction_setFast2(self):
     R1 = libsbml.Reaction(2,4)
     i = R1.unsetFast()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( R1.getFast() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( R1.getFast() == False )
     self.assertEqual( False, R1.isSetFast() )
     pass  
 
   def test_Reaction_setId1(self):
     i = self.R.setId( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.R.isSetId() )
     pass  
 
   def test_Reaction_setId2(self):
     i = self.R.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.R.isSetId() )
-    self.assert_((  "cell"  == self.R.getId() ))
+    self.assertTrue((  "cell"  == self.R.getId() ))
     i = self.R.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.R.isSetId() )
     pass  
 
@@ -223,7 +223,7 @@ def test_Reaction_setKineticLaw1(self):
     kl = libsbml.KineticLaw(2,1)
     kl.setMath(libsbml.parseFormula("1"))
     i = self.R.setKineticLaw(kl)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
     self.assertEqual( False, self.R.isSetKineticLaw() )
     _dummyList = [ kl ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -232,7 +232,7 @@ def test_Reaction_setKineticLaw2(self):
     kl = libsbml.KineticLaw(1,1)
     kl.setMath(libsbml.parseFormula("1"))
     i = self.R.setKineticLaw(kl)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
     self.assertEqual( False, self.R.isSetKineticLaw() )
     _dummyList = [ kl ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -241,36 +241,36 @@ def test_Reaction_setKineticLaw3(self):
     kl = libsbml.KineticLaw(1,2)
     kl.setMath(libsbml.parseFormula("1"))
     i = self.R.setKineticLaw(kl)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.R.isSetKineticLaw() )
     _dummyList = [ kl ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Reaction_setKineticLaw4(self):
     i = self.R.setKineticLaw(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.R.isSetKineticLaw() )
     i = self.R.unsetKineticLaw()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.R.isSetKineticLaw() )
     pass  
 
   def test_Reaction_setName1(self):
     i = self.R.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.R.isSetName() )
     i = self.R.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.R.isSetName() )
     pass  
 
   def test_Reaction_setName2(self):
     p = libsbml.Reaction(2,2)
     i = p.setName( "1cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, p.isSetName() )
     i = p.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, p.isSetName() )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -278,18 +278,18 @@ def test_Reaction_setName2(self):
   def test_Reaction_setName3(self):
     p = libsbml.Reaction(2,2)
     i = p.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, p.isSetName() )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Reaction_setReversible1(self):
     i = self.R.setReversible(True)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.R.getReversible() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.R.getReversible() == True )
     i = self.R.setReversible(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.R.getReversible() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.R.getReversible() == False )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestReadFromFile1.py b/src/bindings/python/test/sbml/TestReadFromFile1.py
index ab1db81dc4..fc08d1db93 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile1.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile1.py
@@ -42,115 +42,115 @@ def test_read_l1v1_branch(self):
     d = libsbml.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 1 )
-    self.assert_( d.getVersion() == 1 )
+    self.assertTrue( d.getLevel() == 1 )
+    self.assertTrue( d.getVersion() == 1 )
     m = d.getModel()
-    self.assert_((  "Branch" == m.getName() ))
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue((  "Branch" == m.getName() ))
+    self.assertTrue( m.getNumCompartments() == 1 )
     c = m.getCompartment(0)
-    self.assert_((  "compartmentOne" == c.getName() ))
-    self.assert_( c.getVolume() == 1 )
+    self.assertTrue((  "compartmentOne" == c.getName() ))
+    self.assertTrue( c.getVolume() == 1 )
     ud = c.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 1 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( m.getNumSpecies() == 4 )
+    self.assertTrue( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( m.getNumSpecies() == 4 )
     s = m.getSpecies(0)
-    self.assert_((  "S1"              == s.getName() ))
-    self.assert_((  "compartmentOne"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 0 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "S1"              == s.getName() ))
+    self.assertTrue((  "compartmentOne"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 0 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     ud = s.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 2 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( ud.getUnit(0).getExponent() == 1 )
-    self.assert_( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( ud.getUnit(1).getExponent() == -1 )
+    self.assertTrue( ud.getNumUnits() == 2 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( ud.getUnit(0).getExponent() == 1 )
+    self.assertTrue( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( ud.getUnit(1).getExponent() == -1 )
     s = m.getSpecies(1)
-    self.assert_((  "X0"              == s.getName() ))
-    self.assert_((  "compartmentOne"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 0 )
-    self.assert_( s.getBoundaryCondition() == True )
+    self.assertTrue((  "X0"              == s.getName() ))
+    self.assertTrue((  "compartmentOne"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 0 )
+    self.assertTrue( s.getBoundaryCondition() == True )
     s = m.getSpecies(2)
-    self.assert_((  "X1"              == s.getName() ))
-    self.assert_((  "compartmentOne"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 0 )
-    self.assert_( s.getBoundaryCondition() == True )
+    self.assertTrue((  "X1"              == s.getName() ))
+    self.assertTrue((  "compartmentOne"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 0 )
+    self.assertTrue( s.getBoundaryCondition() == True )
     s = m.getSpecies(3)
-    self.assert_((  "X2"              == s.getName() ))
-    self.assert_((  "compartmentOne"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 0 )
-    self.assert_( s.getBoundaryCondition() == True )
-    self.assert_( m.getNumReactions() == 3 )
+    self.assertTrue((  "X2"              == s.getName() ))
+    self.assertTrue((  "compartmentOne"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 0 )
+    self.assertTrue( s.getBoundaryCondition() == True )
+    self.assertTrue( m.getNumReactions() == 3 )
     r = m.getReaction(0)
-    self.assert_((  "reaction_1" == r.getName() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "reaction_1" == r.getName() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getFast() == False )
     ud = r.getKineticLaw().getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 2 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( ud.getUnit(0).getExponent() == 1 )
-    self.assert_( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( ud.getUnit(1).getExponent() == -1 )
-    self.assert_( r.getKineticLaw().containsUndeclaredUnits() == True )
+    self.assertTrue( ud.getNumUnits() == 2 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( ud.getUnit(0).getExponent() == 1 )
+    self.assertTrue( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( ud.getUnit(1).getExponent() == -1 )
+    self.assertTrue( r.getKineticLaw().containsUndeclaredUnits() == True )
     r = m.getReaction(1)
-    self.assert_((  "reaction_2" == r.getName() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "reaction_2" == r.getName() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getFast() == False )
     r = m.getReaction(2)
-    self.assert_((  "reaction_3" == r.getName() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "reaction_3" == r.getName() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getFast() == False )
     r = m.getReaction(0)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "X0" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "X0" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "S1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "S1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     kl = r.getKineticLaw()
-    self.assert_((  "k1 * X0" == kl.getFormula() ))
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue((  "k1 * X0" == kl.getFormula() ))
+    self.assertTrue( kl.getNumParameters() == 1 )
     p = kl.getParameter(0)
-    self.assert_((  "k1" == p.getName() ))
-    self.assert_( p.getValue() == 0 )
+    self.assertTrue((  "k1" == p.getName() ))
+    self.assertTrue( p.getValue() == 0 )
     r = m.getReaction(1)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "S1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "S1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "X1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "X1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     kl = r.getKineticLaw()
-    self.assert_((  "k2 * S1" == kl.getFormula() ))
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue((  "k2 * S1" == kl.getFormula() ))
+    self.assertTrue( kl.getNumParameters() == 1 )
     p = kl.getParameter(0)
-    self.assert_((  "k2" == p.getName() ))
-    self.assert_( p.getValue() == 0 )
+    self.assertTrue((  "k2" == p.getName() ))
+    self.assertTrue( p.getValue() == 0 )
     r = m.getReaction(2)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "S1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "S1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "X2" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "X2" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     kl = r.getKineticLaw()
-    self.assert_((  "k3 * S1" == kl.getFormula() ))
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue((  "k3 * S1" == kl.getFormula() ))
+    self.assertTrue( kl.getNumParameters() == 1 )
     p = kl.getParameter(0)
-    self.assert_((  "k3" == p.getName() ))
-    self.assert_( p.getValue() == 0 )
+    self.assertTrue((  "k3" == p.getName() ))
+    self.assertTrue( p.getValue() == 0 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestReadFromFile2.py b/src/bindings/python/test/sbml/TestReadFromFile2.py
index aae5376eaf..bcc244a1c7 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile2.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile2.py
@@ -114,136 +114,136 @@ def test_read_l1v1_units(self):
     d = libsbml.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 1 )
-    self.assert_( d.getVersion() == 1 )
+    self.assertTrue( d.getLevel() == 1 )
+    self.assertTrue( d.getVersion() == 1 )
     m = d.getModel()
-    self.assert_( m.getNumUnitDefinitions() == 2 )
+    self.assertTrue( m.getNumUnitDefinitions() == 2 )
     ud = m.getUnitDefinition(0)
-    self.assert_((  "substance" == ud.getName() ))
+    self.assertTrue((  "substance" == ud.getName() ))
     ud = m.getUnitDefinition(1)
-    self.assert_((  "mls" == ud.getName() ))
+    self.assertTrue((  "mls" == ud.getName() ))
     ud = m.getUnitDefinition(0)
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
     u = ud.getUnit(0)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( u.getExponent() == 1 )
-    self.assert_( u.getScale() == -3 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( u.getExponent() == 1 )
+    self.assertTrue( u.getScale() == -3 )
     ud = m.getUnitDefinition(1)
-    self.assert_( ud.getNumUnits() == 3 )
+    self.assertTrue( ud.getNumUnits() == 3 )
     u = ud.getUnit(0)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( u.getExponent() == 1 )
-    self.assert_( u.getScale() == -3 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( u.getExponent() == 1 )
+    self.assertTrue( u.getScale() == -3 )
     u = ud.getUnit(1)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_LITER )
-    self.assert_( u.getExponent() == -1 )
-    self.assert_( u.getScale() == 0 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_LITER )
+    self.assertTrue( u.getExponent() == -1 )
+    self.assertTrue( u.getScale() == 0 )
     u = ud.getUnit(2)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_SECOND )
-    self.assert_( u.getExponent() == -1 )
-    self.assert_( u.getScale() == 0 )
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_SECOND )
+    self.assertTrue( u.getExponent() == -1 )
+    self.assertTrue( u.getScale() == 0 )
+    self.assertTrue( m.getNumCompartments() == 1 )
     c = m.getCompartment(0)
-    self.assert_((  "cell" == c.getName() ))
-    self.assert_( m.getNumSpecies() == 4 )
+    self.assertTrue((  "cell" == c.getName() ))
+    self.assertTrue( m.getNumSpecies() == 4 )
     s = m.getSpecies(0)
-    self.assert_((  "x0"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 1 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "x0"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 1 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     ud = s.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 2 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( ud.getUnit(0).getExponent() == 1 )
-    self.assert_( ud.getUnit(0).getScale() == -3 )
-    self.assert_( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( ud.getUnit(1).getExponent() == -1 )
+    self.assertTrue( ud.getNumUnits() == 2 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( ud.getUnit(0).getExponent() == 1 )
+    self.assertTrue( ud.getUnit(0).getScale() == -3 )
+    self.assertTrue( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( ud.getUnit(1).getExponent() == -1 )
     s = m.getSpecies(1)
-    self.assert_((  "x1"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 1 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "x1"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 1 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     s = m.getSpecies(2)
-    self.assert_((  "s1"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 1 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "s1"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 1 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     s = m.getSpecies(3)
-    self.assert_((  "s2"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 1 )
-    self.assert_( s.getBoundaryCondition() == False )
-    self.assert_( m.getNumParameters() == 2 )
+    self.assertTrue((  "s2"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 1 )
+    self.assertTrue( s.getBoundaryCondition() == False )
+    self.assertTrue( m.getNumParameters() == 2 )
     p = m.getParameter(0)
-    self.assert_((  "vm"   == p.getName() ))
-    self.assert_((  "mls"  == p.getUnits() ))
-    self.assert_( p.getValue() == 2 )
+    self.assertTrue((  "vm"   == p.getName() ))
+    self.assertTrue((  "mls"  == p.getUnits() ))
+    self.assertTrue( p.getValue() == 2 )
     ud = p.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 3 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( ud.getUnit(0).getExponent() == 1 )
-    self.assert_( ud.getUnit(0).getScale() == -3 )
-    self.assert_( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITER )
-    self.assert_( ud.getUnit(1).getExponent() == -1 )
-    self.assert_( ud.getUnit(2).getKind() == libsbml.UNIT_KIND_SECOND )
-    self.assert_( ud.getUnit(2).getExponent() == -1 )
+    self.assertTrue( ud.getNumUnits() == 3 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( ud.getUnit(0).getExponent() == 1 )
+    self.assertTrue( ud.getUnit(0).getScale() == -3 )
+    self.assertTrue( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITER )
+    self.assertTrue( ud.getUnit(1).getExponent() == -1 )
+    self.assertTrue( ud.getUnit(2).getKind() == libsbml.UNIT_KIND_SECOND )
+    self.assertTrue( ud.getUnit(2).getExponent() == -1 )
     p = m.getParameter(1)
-    self.assert_((  "km"   == p.getName() ))
-    self.assert_( p.getValue() == 2 )
+    self.assertTrue((  "km"   == p.getName() ))
+    self.assertTrue( p.getValue() == 2 )
     ud = p.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 0 )
-    self.assert_( m.getNumReactions() == 3 )
+    self.assertTrue( ud.getNumUnits() == 0 )
+    self.assertTrue( m.getNumReactions() == 3 )
     r = m.getReaction(0)
-    self.assert_((  "v1" == r.getName() ))
-    self.assert_( r.getReversible() != False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "v1" == r.getName() ))
+    self.assertTrue( r.getReversible() != False )
+    self.assertTrue( r.getFast() == False )
     r = m.getReaction(1)
-    self.assert_((  "v2" == r.getName() ))
-    self.assert_( r.getReversible() != False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "v2" == r.getName() ))
+    self.assertTrue( r.getReversible() != False )
+    self.assertTrue( r.getFast() == False )
     r = m.getReaction(2)
-    self.assert_((  "v3" == r.getName() ))
-    self.assert_( r.getReversible() != False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "v3" == r.getName() ))
+    self.assertTrue( r.getReversible() != False )
+    self.assertTrue( r.getFast() == False )
     r = m.getReaction(0)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "x0" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "x0" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "s1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "s1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     kl = r.getKineticLaw()
-    self.assert_((  "cell * (vm * s1)/(km + s1)" == kl.getFormula() ))
+    self.assertTrue((  "cell * (vm * s1)/(km + s1)" == kl.getFormula() ))
     r = m.getReaction(1)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "s1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "s1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "s2" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "s2" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     kl = r.getKineticLaw()
-    self.assert_((  "cell * (vm * s2)/(km + s2)" == kl.getFormula() ))
+    self.assertTrue((  "cell * (vm * s2)/(km + s2)" == kl.getFormula() ))
     r = m.getReaction(2)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "s2" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "s2" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "x1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "x1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     kl = r.getKineticLaw()
-    self.assert_((  "cell * (vm * s1)/(km + s1)" == kl.getFormula() ))
+    self.assertTrue((  "cell * (vm * s1)/(km + s1)" == kl.getFormula() ))
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestReadFromFile3.py b/src/bindings/python/test/sbml/TestReadFromFile3.py
index 3552782053..71fd7352c8 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile3.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile3.py
@@ -42,115 +42,115 @@ def test_read_l1v1_rules(self):
     d = libsbml.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 1 )
-    self.assert_( d.getVersion() == 1 )
+    self.assertTrue( d.getLevel() == 1 )
+    self.assertTrue( d.getVersion() == 1 )
     m = d.getModel()
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( m.getNumCompartments() == 1 )
     c = m.getCompartment(0)
-    self.assert_((  "cell" == c.getName() ))
-    self.assert_( c.getVolume() == 1 )
-    self.assert_( m.getNumSpecies() == 6 )
+    self.assertTrue((  "cell" == c.getName() ))
+    self.assertTrue( c.getVolume() == 1 )
+    self.assertTrue( m.getNumSpecies() == 6 )
     s = m.getSpecies(0)
-    self.assert_((  "s1"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 4 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "s1"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 4 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     s = m.getSpecies(1)
-    self.assert_((  "s2"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 2 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "s2"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 2 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     s = m.getSpecies(2)
-    self.assert_((  "x0"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 1 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "x0"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 1 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     s = m.getSpecies(3)
-    self.assert_((  "x1"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 0 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "x1"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 0 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     s = m.getSpecies(4)
-    self.assert_((  "x2"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 1 )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue((  "x2"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 1 )
+    self.assertTrue( s.getBoundaryCondition() == False )
     s = m.getSpecies(5)
-    self.assert_((  "x3"    == s.getName() ))
-    self.assert_((  "cell"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 0 )
-    self.assert_( s.getBoundaryCondition() == False )
-    self.assert_( m.getNumParameters() == 7 )
+    self.assertTrue((  "x3"    == s.getName() ))
+    self.assertTrue((  "cell"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 0 )
+    self.assertTrue( s.getBoundaryCondition() == False )
+    self.assertTrue( m.getNumParameters() == 7 )
     p = m.getParameter(0)
-    self.assert_((  "k1" == p.getName() ))
-    self.assert_( p.getValue() == 1.2 )
+    self.assertTrue((  "k1" == p.getName() ))
+    self.assertTrue( p.getValue() == 1.2 )
     p = m.getParameter(1)
-    self.assert_((  "k2" == p.getName() ))
-    self.assert_( p.getValue() == 1000 )
+    self.assertTrue((  "k2" == p.getName() ))
+    self.assertTrue( p.getValue() == 1000 )
     p = m.getParameter(2)
-    self.assert_((  "k3" == p.getName() ))
-    self.assert_( p.getValue() == 3000 )
+    self.assertTrue((  "k3" == p.getName() ))
+    self.assertTrue( p.getValue() == 3000 )
     p = m.getParameter(3)
-    self.assert_((  "k4" == p.getName() ))
-    self.assert_( p.getValue() == 4.5 )
-    self.assert_( m.getNumRules() == 4 )
+    self.assertTrue((  "k4" == p.getName() ))
+    self.assertTrue( p.getValue() == 4.5 )
+    self.assertTrue( m.getNumRules() == 4 )
     pr = m.getRule(0)
-    self.assert_((  "t" == pr.getVariable() ))
-    self.assert_((  "s1 + s2" == pr.getFormula() ))
+    self.assertTrue((  "t" == pr.getVariable() ))
+    self.assertTrue((  "s1 + s2" == pr.getFormula() ))
     ud = pr.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 2 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( ud.getUnit(0).getExponent() == 1 )
-    self.assert_( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( ud.getUnit(1).getExponent() == -1 )
-    self.assert_( pr.containsUndeclaredUnits() == False )
+    self.assertTrue( ud.getNumUnits() == 2 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( ud.getUnit(0).getExponent() == 1 )
+    self.assertTrue( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( ud.getUnit(1).getExponent() == -1 )
+    self.assertTrue( pr.containsUndeclaredUnits() == False )
     pr = m.getRule(1)
-    self.assert_((  "k" == pr.getVariable() ))
-    self.assert_((  "k3/k2" == pr.getFormula() ))
+    self.assertTrue((  "k" == pr.getVariable() ))
+    self.assertTrue((  "k3/k2" == pr.getFormula() ))
     ud = pr.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 0 )
-    self.assert_( pr.containsUndeclaredUnits() == True )
+    self.assertTrue( ud.getNumUnits() == 0 )
+    self.assertTrue( pr.containsUndeclaredUnits() == True )
     scr = m.getRule(2)
-    self.assert_((  "x2" == scr.getVariable() ))
-    self.assert_((  "k * (s1+s2)/(1 + k)" == scr.getFormula() ))
+    self.assertTrue((  "x2" == scr.getVariable() ))
+    self.assertTrue((  "k * (s1+s2)/(1 + k)" == scr.getFormula() ))
     scr = m.getRule(3)
-    self.assert_((  "x3" == scr.getVariable() ))
-    self.assert_((  "p*(t - s2)" == scr.getFormula() ))
-    self.assert_( m.getNumReactions() == 2 )
+    self.assertTrue((  "x3" == scr.getVariable() ))
+    self.assertTrue((  "p*(t - s2)" == scr.getFormula() ))
+    self.assertTrue( m.getNumReactions() == 2 )
     r = m.getReaction(0)
-    self.assert_((  "j1" == r.getName() ))
-    self.assert_( r.getReversible() != False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "j1" == r.getName() ))
+    self.assertTrue( r.getReversible() != False )
+    self.assertTrue( r.getFast() == False )
     r = m.getReaction(1)
-    self.assert_((  "j3" == r.getName() ))
-    self.assert_( r.getReversible() != False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "j3" == r.getName() ))
+    self.assertTrue( r.getReversible() != False )
+    self.assertTrue( r.getFast() == False )
     r = m.getReaction(0)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "x0" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "x0" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "s1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "s1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     kl = r.getKineticLaw()
-    self.assert_((  "k1 * x0" == kl.getFormula() ))
+    self.assertTrue((  "k1 * x0" == kl.getFormula() ))
     r = m.getReaction(1)
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "s2" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "s2" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "x1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "x1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     kl = r.getKineticLaw()
-    self.assert_((  "k4 * s2" == kl.getFormula() ))
+    self.assertTrue((  "k4 * s2" == kl.getFormula() ))
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestReadFromFile4.py b/src/bindings/python/test/sbml/TestReadFromFile4.py
index a980c792ec..7eaaf34ac4 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile4.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile4.py
@@ -42,33 +42,33 @@ def test_read_l1v1_minimal(self):
     d = libsbml.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 1 )
-    self.assert_( d.getVersion() == 1 )
+    self.assertTrue( d.getLevel() == 1 )
+    self.assertTrue( d.getVersion() == 1 )
     m = d.getModel()
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( m.getNumCompartments() == 1 )
     c = m.getCompartment(0)
-    self.assert_((  "x" == c.getName() ))
-    self.assert_( m.getNumSpecies() == 1 )
+    self.assertTrue((  "x" == c.getName() ))
+    self.assertTrue( m.getNumSpecies() == 1 )
     s = m.getSpecies(0)
-    self.assert_((  "y"  == s.getName() ))
-    self.assert_((  "x"  == s.getCompartment() ))
-    self.assert_( s.getInitialAmount() == 1 )
-    self.assert_( s.getBoundaryCondition() == False )
-    self.assert_( m.getNumReactions() == 1 )
+    self.assertTrue((  "y"  == s.getName() ))
+    self.assertTrue((  "x"  == s.getCompartment() ))
+    self.assertTrue( s.getInitialAmount() == 1 )
+    self.assertTrue( s.getBoundaryCondition() == False )
+    self.assertTrue( m.getNumReactions() == 1 )
     r = m.getReaction(0)
-    self.assert_((  "r" == r.getName() ))
-    self.assert_( r.getReversible() != False )
-    self.assert_( r.getFast() == False )
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue((  "r" == r.getName() ))
+    self.assertTrue( r.getReversible() != False )
+    self.assertTrue( r.getFast() == False )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "y" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "y" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "y" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "y" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestReadFromFile5.py b/src/bindings/python/test/sbml/TestReadFromFile5.py
index 76ef3780b8..9548082556 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile5.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile5.py
@@ -44,134 +44,134 @@ def test_read_l2v1_assignment(self):
     d = reader.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 1 )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 1 )
     m = d.getModel()
-    self.assert_( m != None )
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( m != None )
+    self.assertTrue( m.getNumCompartments() == 1 )
     c = m.getCompartment(0)
-    self.assert_( c != None )
-    self.assert_( c.getId() ==  "cell" )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getId() ==  "cell" )
     ud = c.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 1 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE )
     loc = m.getListOfCompartments()
     c1 = loc.get(0)
-    self.assert_( c1 == c )
+    self.assertTrue( c1 == c )
     c1 = loc.get("cell")
-    self.assert_( c1 == c )
-    self.assert_( m.getNumSpecies() == 5 )
+    self.assertTrue( c1 == c )
+    self.assertTrue( m.getNumSpecies() == 5 )
     s = m.getSpecies(0)
-    self.assert_( s != None )
-    self.assert_( s.getId() ==  "X0"   )
-    self.assert_( s.getCompartment() ==  "cell" )
-    self.assert_( s.getInitialConcentration() == 1.0 )
+    self.assertTrue( s != None )
+    self.assertTrue( s.getId() ==  "X0"   )
+    self.assertTrue( s.getCompartment() ==  "cell" )
+    self.assertTrue( s.getInitialConcentration() == 1.0 )
     los = m.getListOfSpecies()
     s1 = los.get(0)
-    self.assert_( s1 == s )
+    self.assertTrue( s1 == s )
     s1 = los.get("X0")
-    self.assert_( s1 == s )
+    self.assertTrue( s1 == s )
     s = m.getSpecies(1)
-    self.assert_( s != None )
-    self.assert_( s.getId() ==  "X1"   )
-    self.assert_( s.getCompartment() ==  "cell" )
-    self.assert_( s.getInitialConcentration() == 0.0 )
+    self.assertTrue( s != None )
+    self.assertTrue( s.getId() ==  "X1"   )
+    self.assertTrue( s.getCompartment() ==  "cell" )
+    self.assertTrue( s.getInitialConcentration() == 0.0 )
     s = m.getSpecies(2)
-    self.assert_( s != None )
-    self.assert_( s.getId() ==  "T"    )
-    self.assert_( s.getCompartment() ==  "cell" )
-    self.assert_( s.getInitialConcentration() == 0.0 )
+    self.assertTrue( s != None )
+    self.assertTrue( s.getId() ==  "T"    )
+    self.assertTrue( s.getCompartment() ==  "cell" )
+    self.assertTrue( s.getInitialConcentration() == 0.0 )
     s = m.getSpecies(3)
-    self.assert_( s != None )
-    self.assert_( s.getId() ==  "S1"   )
-    self.assert_( s.getCompartment() ==  "cell" )
-    self.assert_( s.getInitialConcentration() == 0.0 )
+    self.assertTrue( s != None )
+    self.assertTrue( s.getId() ==  "S1"   )
+    self.assertTrue( s.getCompartment() ==  "cell" )
+    self.assertTrue( s.getInitialConcentration() == 0.0 )
     s = m.getSpecies(4)
-    self.assert_( s != None )
-    self.assert_( s.getId() ==  "S2"   )
-    self.assert_( s.getCompartment() ==  "cell" )
-    self.assert_( s.getInitialConcentration() == 0.0 )
-    self.assert_( m.getNumParameters() == 1 )
+    self.assertTrue( s != None )
+    self.assertTrue( s.getId() ==  "S2"   )
+    self.assertTrue( s.getCompartment() ==  "cell" )
+    self.assertTrue( s.getInitialConcentration() == 0.0 )
+    self.assertTrue( m.getNumParameters() == 1 )
     p = m.getParameter(0)
-    self.assert_( p != None )
-    self.assert_( p.getId() ==  "Keq" )
-    self.assert_( p.getValue() == 2.5 )
+    self.assertTrue( p != None )
+    self.assertTrue( p.getId() ==  "Keq" )
+    self.assertTrue( p.getValue() == 2.5 )
     lop = m.getListOfParameters()
     p1 = lop.get(0)
-    self.assert_( p1 == p )
+    self.assertTrue( p1 == p )
     p1 = lop.get("Keq")
-    self.assert_( p1 == p )
+    self.assertTrue( p1 == p )
     ud = p.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 0 )
-    self.assert_( m.getNumRules() == 2 )
+    self.assertTrue( ud.getNumUnits() == 0 )
+    self.assertTrue( m.getNumRules() == 2 )
     ar = m.getRule(0)
-    self.assert_( ar != None )
-    self.assert_( ar.getVariable() ==  "S1"            )
-    self.assert_( ar.getFormula() ==  "T / (1 + Keq)" )
+    self.assertTrue( ar != None )
+    self.assertTrue( ar.getVariable() ==  "S1"            )
+    self.assertTrue( ar.getFormula() ==  "T / (1 + Keq)" )
     ud = ar.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 2 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( ud.getUnit(0).getExponent() == 1 )
-    self.assert_( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( ud.getUnit(1).getExponent() == -1 )
-    self.assert_( ar.containsUndeclaredUnits() == True )
+    self.assertTrue( ud.getNumUnits() == 2 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( ud.getUnit(0).getExponent() == 1 )
+    self.assertTrue( ud.getUnit(1).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( ud.getUnit(1).getExponent() == -1 )
+    self.assertTrue( ar.containsUndeclaredUnits() == True )
     lor = m.getListOfRules()
     ar1 = lor.get(0)
-    self.assert_( ar1 == ar )
+    self.assertTrue( ar1 == ar )
     ar1 = lor.get("S1")
-    self.assert_( ar1 == ar )
+    self.assertTrue( ar1 == ar )
     ar = m.getRule(1)
-    self.assert_( ar != None )
-    self.assert_( ar.getVariable() ==  "S2"       )
-    self.assert_( ar.getFormula() ==  "Keq * S1" )
-    self.assert_( m.getNumReactions() == 2 )
+    self.assertTrue( ar != None )
+    self.assertTrue( ar.getVariable() ==  "S2"       )
+    self.assertTrue( ar.getFormula() ==  "Keq * S1" )
+    self.assertTrue( m.getNumReactions() == 2 )
     r = m.getReaction(0)
-    self.assert_( r != None )
-    self.assert_( r.getId() ==  "in" )
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r != None )
+    self.assertTrue( r.getId() ==  "in" )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_( sr != None )
-    self.assert_( sr.getSpecies() ==  "X0" )
+    self.assertTrue( sr != None )
+    self.assertTrue( sr.getSpecies() ==  "X0" )
     sr = r.getProduct(0)
-    self.assert_( sr != None )
-    self.assert_( sr.getSpecies() ==  "T"  )
+    self.assertTrue( sr != None )
+    self.assertTrue( sr.getSpecies() ==  "T"  )
     kl = r.getKineticLaw()
-    self.assert_( kl != None )
-    self.assert_( kl.getFormula() ==  "k1 * X0" )
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue( kl != None )
+    self.assertTrue( kl.getFormula() ==  "k1 * X0" )
+    self.assertTrue( kl.getNumParameters() == 1 )
     r1 = kl.getParentSBMLObject()
-    self.assert_( r1 != None )
-    self.assert_( r1.getId() ==  "in" )
-    self.assert_( r1.getNumReactants() == 1 )
-    self.assert_( r1.getNumProducts() == 1 )
+    self.assertTrue( r1 != None )
+    self.assertTrue( r1.getId() ==  "in" )
+    self.assertTrue( r1.getNumReactants() == 1 )
+    self.assertTrue( r1.getNumProducts() == 1 )
     p = kl.getParameter(0)
-    self.assert_( p != None )
-    self.assert_( p.getId() ==  "k1" )
-    self.assert_( p.getValue() == 0.1 )
+    self.assertTrue( p != None )
+    self.assertTrue( p.getId() ==  "k1" )
+    self.assertTrue( p.getValue() == 0.1 )
     kl = p.getParentSBMLObject().getParentSBMLObject()
-    self.assert_( kl != None )
-    self.assert_( kl.getFormula() ==  "k1 * X0" )
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue( kl != None )
+    self.assertTrue( kl.getFormula() ==  "k1 * X0" )
+    self.assertTrue( kl.getNumParameters() == 1 )
     r = m.getReaction(1)
-    self.assert_( r != None )
-    self.assert_( r.getId() ==  "out" )
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue( r != None )
+    self.assertTrue( r.getId() ==  "out" )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getReactant(0)
-    self.assert_( sr != None )
-    self.assert_( sr.getSpecies() ==  "T"  )
+    self.assertTrue( sr != None )
+    self.assertTrue( sr.getSpecies() ==  "T"  )
     sr = r.getProduct(0)
-    self.assert_( sr != None )
-    self.assert_( sr.getSpecies() ==  "X1" )
+    self.assertTrue( sr != None )
+    self.assertTrue( sr.getSpecies() ==  "X1" )
     kl = r.getKineticLaw()
-    self.assert_( kl != None )
-    self.assert_( kl.getFormula() ==  "k2 * T" )
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue( kl != None )
+    self.assertTrue( kl.getFormula() ==  "k2 * T" )
+    self.assertTrue( kl.getNumParameters() == 1 )
     p = kl.getParameter(0)
-    self.assert_( p != None )
-    self.assert_( p.getId() ==  "k2" )
-    self.assert_( p.getValue() == 0.15 )
+    self.assertTrue( p != None )
+    self.assertTrue( p.getId() ==  "k2" )
+    self.assertTrue( p.getValue() == 0.15 )
     d = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestReadFromFile6.py b/src/bindings/python/test/sbml/TestReadFromFile6.py
index b044c4f9b2..7bb12ac6d8 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile6.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile6.py
@@ -44,125 +44,125 @@ def test_read_l2v2_newComponents(self):
     d = reader.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 2 )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 2 )
     m = d.getModel()
-    self.assert_( m != None )
-    self.assert_( m.getId() ==  "l2v2_newComponents" )
-    self.assert_( m.getSBOTerm() == 4 )
-    self.assert_( m.getSBOTermID() ==  "SBO:0000004" )
-    self.assert_( m.getNumCompartments() == 2 )
+    self.assertTrue( m != None )
+    self.assertTrue( m.getId() ==  "l2v2_newComponents" )
+    self.assertTrue( m.getSBOTerm() == 4 )
+    self.assertTrue( m.getSBOTermID() ==  "SBO:0000004" )
+    self.assertTrue( m.getNumCompartments() == 2 )
     c = m.getCompartment(0)
-    self.assert_( c != None )
-    self.assert_( c.getId() ==  "cell" )
-    self.assert_( c.getCompartmentType() ==  "mitochondria" )
-    self.assert_( c.getOutside() ==  "m" )
-    self.assert_( c.getSBOTerm() == -1 )
-    self.assert_( c.getSBOTermID() ==  "" )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getId() ==  "cell" )
+    self.assertTrue( c.getCompartmentType() ==  "mitochondria" )
+    self.assertTrue( c.getOutside() ==  "m" )
+    self.assertTrue( c.getSBOTerm() == -1 )
+    self.assertTrue( c.getSBOTermID() ==  "" )
     c = m.getCompartment(1)
-    self.assert_( c != None )
-    self.assert_( c.getId() ==  "m" )
-    self.assert_( c.getCompartmentType() ==  "mitochondria" )
-    self.assert_( m.getNumCompartmentTypes() == 1 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getId() ==  "m" )
+    self.assertTrue( c.getCompartmentType() ==  "mitochondria" )
+    self.assertTrue( m.getNumCompartmentTypes() == 1 )
     ct = m.getCompartmentType(0)
-    self.assert_( ct != None )
-    self.assert_( ct.getId() ==  "mitochondria" )
+    self.assertTrue( ct != None )
+    self.assertTrue( ct.getId() ==  "mitochondria" )
     loct = m.getListOfCompartmentTypes()
     ct1 = loct.get(0)
-    self.assert_( ct1 == ct )
+    self.assertTrue( ct1 == ct )
     ct1 = loct.get("mitochondria")
-    self.assert_( ct1 == ct )
-    self.assert_( m.getNumSpeciesTypes() == 1 )
+    self.assertTrue( ct1 == ct )
+    self.assertTrue( m.getNumSpeciesTypes() == 1 )
     st = m.getSpeciesType(0)
-    self.assert_( st != None )
-    self.assert_( st.getId() ==  "Glucose" )
-    self.assert_( m.getNumSpecies() == 2 )
+    self.assertTrue( st != None )
+    self.assertTrue( st.getId() ==  "Glucose" )
+    self.assertTrue( m.getNumSpecies() == 2 )
     s = m.getSpecies(0)
-    self.assert_( s != None )
-    self.assert_( s.getId() ==  "X0" )
-    self.assert_( s.getSpeciesType() ==  "Glucose" )
-    self.assert_( s.getCompartment() ==  "cell" )
+    self.assertTrue( s != None )
+    self.assertTrue( s.getId() ==  "X0" )
+    self.assertTrue( s.getSpeciesType() ==  "Glucose" )
+    self.assertTrue( s.getCompartment() ==  "cell" )
     self.assertEqual( False, s.isSetInitialAmount() )
     self.assertEqual( False, s.isSetInitialConcentration() )
     s = m.getSpecies(1)
-    self.assert_( s != None )
-    self.assert_( s.getId() ==  "X1" )
+    self.assertTrue( s != None )
+    self.assertTrue( s.getId() ==  "X1" )
     self.assertEqual( False, s.isSetSpeciesType() )
-    self.assert_( s.getCompartment() ==  "cell" )
-    self.assert_( s.getInitialConcentration() == 0.013 )
+    self.assertTrue( s.getCompartment() ==  "cell" )
+    self.assertTrue( s.getInitialConcentration() == 0.013 )
     self.assertEqual( False, s.isSetInitialAmount() )
     self.assertEqual( True, s.isSetInitialConcentration() )
-    self.assert_( m.getNumParameters() == 1 )
+    self.assertTrue( m.getNumParameters() == 1 )
     p = m.getParameter(0)
-    self.assert_( p != None )
-    self.assert_( p.getId() ==  "y" )
-    self.assert_( p.getValue() == 2 )
-    self.assert_( p.getUnits() ==  "dimensionless" )
-    self.assert_( p.getId() ==  "y" )
-    self.assert_( p.getSBOTerm() == 2 )
-    self.assert_( p.getSBOTermID() ==  "SBO:0000002" )
-    self.assert_( m.getNumConstraints() == 1 )
+    self.assertTrue( p != None )
+    self.assertTrue( p.getId() ==  "y" )
+    self.assertTrue( p.getValue() == 2 )
+    self.assertTrue( p.getUnits() ==  "dimensionless" )
+    self.assertTrue( p.getId() ==  "y" )
+    self.assertTrue( p.getSBOTerm() == 2 )
+    self.assertTrue( p.getSBOTermID() ==  "SBO:0000002" )
+    self.assertTrue( m.getNumConstraints() == 1 )
     con = m.getConstraint(0)
-    self.assert_( con != None )
-    self.assert_( con.getSBOTerm() == 64 )
-    self.assert_( con.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( con != None )
+    self.assertTrue( con.getSBOTerm() == 64 )
+    self.assertTrue( con.getSBOTermID() ==  "SBO:0000064" )
     ast = con.getMath()
-    self.assert_((  "lt(1, cell)" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "lt(1, cell)" == libsbml.formulaToString(ast) ))
     locon = m.getListOfConstraints()
     con1 = locon.get(0)
-    self.assert_( con1 == con )
-    self.assert_( m.getNumInitialAssignments() == 1 )
+    self.assertTrue( con1 == con )
+    self.assertTrue( m.getNumInitialAssignments() == 1 )
     ia = m.getInitialAssignment(0)
-    self.assert_( ia != None )
-    self.assert_( ia.getSBOTerm() == 64 )
-    self.assert_( ia.getSBOTermID() ==  "SBO:0000064" )
-    self.assert_( ia.getSymbol() ==  "X0" )
+    self.assertTrue( ia != None )
+    self.assertTrue( ia.getSBOTerm() == 64 )
+    self.assertTrue( ia.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( ia.getSymbol() ==  "X0" )
     ast = ia.getMath()
-    self.assert_((  "y * X1" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "y * X1" == libsbml.formulaToString(ast) ))
     loia = m.getListOfInitialAssignments()
     ia1 = loia.get(0)
-    self.assert_( ia1 == ia )
+    self.assertTrue( ia1 == ia )
     ia1 = loia.get("X0")
-    self.assert_( ia1 == ia )
-    self.assert_( m.getNumReactions() == 1 )
+    self.assertTrue( ia1 == ia )
+    self.assertTrue( m.getNumReactions() == 1 )
     r = m.getReaction(0)
-    self.assert_( r != None )
-    self.assert_( r.getSBOTerm() == 231 )
-    self.assert_( r.getSBOTermID() ==  "SBO:0000231" )
-    self.assert_( r.getId() ==  "in" )
+    self.assertTrue( r != None )
+    self.assertTrue( r.getSBOTerm() == 231 )
+    self.assertTrue( r.getSBOTermID() ==  "SBO:0000231" )
+    self.assertTrue( r.getId() ==  "in" )
     lor = m.getListOfReactions()
     r1 = lor.get(0)
-    self.assert_( r1 == r )
+    self.assertTrue( r1 == r )
     r1 = lor.get("in")
-    self.assert_( r1 == r )
+    self.assertTrue( r1 == r )
     self.assertEqual( True, r.isSetKineticLaw() )
     kl = r.getKineticLaw()
-    self.assert_( kl != None )
-    self.assert_( kl.getSBOTerm() == 1 )
-    self.assert_( kl.getSBOTermID() ==  "SBO:0000001" )
+    self.assertTrue( kl != None )
+    self.assertTrue( kl.getSBOTerm() == 1 )
+    self.assertTrue( kl.getSBOTermID() ==  "SBO:0000001" )
     self.assertEqual( True, kl.isSetMath() )
     ast = kl.getMath()
-    self.assert_((  "v * X0 / t" == libsbml.formulaToString(ast) ))
-    self.assert_( kl.getNumParameters() == 2 )
+    self.assertTrue((  "v * X0 / t" == libsbml.formulaToString(ast) ))
+    self.assertTrue( kl.getNumParameters() == 2 )
     p = kl.getParameter(0)
-    self.assert_( p != None )
-    self.assert_( p.getSBOTerm() == 2 )
-    self.assert_( p.getSBOTermID() ==  "SBO:0000002" )
-    self.assert_( p.getId() ==  "v" )
-    self.assert_( p.getUnits() ==  "litre" )
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 0 )
-    self.assert_( r.getNumModifiers() == 0 )
+    self.assertTrue( p != None )
+    self.assertTrue( p.getSBOTerm() == 2 )
+    self.assertTrue( p.getSBOTermID() ==  "SBO:0000002" )
+    self.assertTrue( p.getId() ==  "v" )
+    self.assertTrue( p.getUnits() ==  "litre" )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 0 )
+    self.assertTrue( r.getNumModifiers() == 0 )
     sr = r.getReactant(0)
-    self.assert_( sr != None )
-    self.assert_( sr.getName() ==  "sarah" )
-    self.assert_( sr.getId() ==  "me" )
-    self.assert_( sr.getSpecies() ==  "X0" )
+    self.assertTrue( sr != None )
+    self.assertTrue( sr.getName() ==  "sarah" )
+    self.assertTrue( sr.getId() ==  "me" )
+    self.assertTrue( sr.getSpecies() ==  "X0" )
     losr = r.getListOfReactants()
     sr1 = losr.get(0)
-    self.assert_( sr1 == sr )
+    self.assertTrue( sr1 == sr )
     sr1 = losr.get("me")
-    self.assert_( sr1 == sr )
+    self.assertTrue( sr1 == sr )
     d = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestReadFromFile7.py b/src/bindings/python/test/sbml/TestReadFromFile7.py
index 332979fef3..df3b22ae92 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile7.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile7.py
@@ -44,197 +44,197 @@ def test_read_l2v3_all(self):
     d = reader.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 3 )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 3 )
     m = d.getModel()
-    self.assert_( m != None )
-    self.assert_( m.getId() ==  "l2v3_all" )
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( m != None )
+    self.assertTrue( m.getId() ==  "l2v3_all" )
+    self.assertTrue( m.getNumCompartments() == 1 )
     c = m.getCompartment(0)
-    self.assert_( c != None )
-    self.assert_( c.getId() ==  "a" )
-    self.assert_( c.getCompartmentType() ==  "hh" )
-    self.assert_( c.getSBOTerm() == 236 )
-    self.assert_( c.getSBOTermID() ==  "SBO:0000236" )
-    self.assert_( c.getSize() == 2.3 )
-    self.assert_( m.getNumCompartmentTypes() == 1 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getId() ==  "a" )
+    self.assertTrue( c.getCompartmentType() ==  "hh" )
+    self.assertTrue( c.getSBOTerm() == 236 )
+    self.assertTrue( c.getSBOTermID() ==  "SBO:0000236" )
+    self.assertTrue( c.getSize() == 2.3 )
+    self.assertTrue( m.getNumCompartmentTypes() == 1 )
     ct = m.getCompartmentType(0)
-    self.assert_( ct != None )
-    self.assert_( ct.getId() ==  "hh" )
-    self.assert_( ct.getSBOTerm() == 236 )
-    self.assert_( ct.getSBOTermID() ==  "SBO:0000236" )
-    self.assert_( m.getNumSpeciesTypes() == 1 )
+    self.assertTrue( ct != None )
+    self.assertTrue( ct.getId() ==  "hh" )
+    self.assertTrue( ct.getSBOTerm() == 236 )
+    self.assertTrue( ct.getSBOTermID() ==  "SBO:0000236" )
+    self.assertTrue( m.getNumSpeciesTypes() == 1 )
     st = m.getSpeciesType(0)
-    self.assert_( st != None )
-    self.assert_( st.getId() ==  "gg" )
-    self.assert_( st.getName() ==  "dd" )
-    self.assert_( st.getSBOTerm() == 236 )
-    self.assert_( st.getSBOTermID() ==  "SBO:0000236" )
+    self.assertTrue( st != None )
+    self.assertTrue( st.getId() ==  "gg" )
+    self.assertTrue( st.getName() ==  "dd" )
+    self.assertTrue( st.getSBOTerm() == 236 )
+    self.assertTrue( st.getSBOTermID() ==  "SBO:0000236" )
     lost = m.getListOfSpeciesTypes()
     st1 = lost.get(0)
-    self.assert_( st1 == st )
+    self.assertTrue( st1 == st )
     st1 = lost.get("gg")
-    self.assert_( st1 == st )
-    self.assert_( m.getNumConstraints() == 1 )
+    self.assertTrue( st1 == st )
+    self.assertTrue( m.getNumConstraints() == 1 )
     con = m.getConstraint(0)
-    self.assert_( con != None )
+    self.assertTrue( con != None )
     ast = con.getMath()
-    self.assert_((  "lt(x, 3)" == libsbml.formulaToString(ast) ))
-    self.assert_( m.getNumEvents() == 1 )
+    self.assertTrue((  "lt(x, 3)" == libsbml.formulaToString(ast) ))
+    self.assertTrue( m.getNumEvents() == 1 )
     e = m.getEvent(0)
-    self.assert_( e != None )
-    self.assert_( e.getId() ==  "e1" )
-    self.assert_( e.getSBOTerm() == 231 )
-    self.assert_( e.getSBOTermID() ==  "SBO:0000231" )
+    self.assertTrue( e != None )
+    self.assertTrue( e.getId() ==  "e1" )
+    self.assertTrue( e.getSBOTerm() == 231 )
+    self.assertTrue( e.getSBOTermID() ==  "SBO:0000231" )
     self.assertEqual( True, e.isSetDelay() )
     delay = e.getDelay()
-    self.assert_( delay != None )
-    self.assert_( delay.getSBOTerm() == 64 )
-    self.assert_( delay.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( delay != None )
+    self.assertTrue( delay.getSBOTerm() == 64 )
+    self.assertTrue( delay.getSBOTermID() ==  "SBO:0000064" )
     ast = delay.getMath()
-    self.assert_((  "p + 3" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "p + 3" == libsbml.formulaToString(ast) ))
     self.assertEqual( True, e.isSetTrigger() )
     trigger = e.getTrigger()
-    self.assert_( trigger != None )
-    self.assert_( trigger.getSBOTerm() == 64 )
-    self.assert_( trigger.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( trigger != None )
+    self.assertTrue( trigger.getSBOTerm() == 64 )
+    self.assertTrue( trigger.getSBOTermID() ==  "SBO:0000064" )
     ast = trigger.getMath()
-    self.assert_((  "lt(x, 3)" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "lt(x, 3)" == libsbml.formulaToString(ast) ))
     loe = m.getListOfEvents()
     e1 = loe.get(0)
-    self.assert_( e1 == e )
+    self.assertTrue( e1 == e )
     e1 = loe.get("e1")
-    self.assert_( e1 == e )
-    self.assert_( e.getNumEventAssignments() == 1 )
+    self.assertTrue( e1 == e )
+    self.assertTrue( e.getNumEventAssignments() == 1 )
     ea = e.getEventAssignment(0)
-    self.assert_( ea != None )
-    self.assert_( ea.getVariable() ==  "a" )
-    self.assert_( ea.getSBOTerm() == 64 )
-    self.assert_( ea.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( ea != None )
+    self.assertTrue( ea.getVariable() ==  "a" )
+    self.assertTrue( ea.getSBOTerm() == 64 )
+    self.assertTrue( ea.getSBOTermID() ==  "SBO:0000064" )
     ast = ea.getMath()
-    self.assert_((  "x * p3" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "x * p3" == libsbml.formulaToString(ast) ))
     loea = e.getListOfEventAssignments()
     ea1 = loea.get(0)
-    self.assert_( ea1 == ea )
+    self.assertTrue( ea1 == ea )
     ea1 = loea.get("a")
-    self.assert_( ea1 == ea )
-    self.assert_( m.getNumFunctionDefinitions() == 1 )
+    self.assertTrue( ea1 == ea )
+    self.assertTrue( m.getNumFunctionDefinitions() == 1 )
     fd = m.getFunctionDefinition(0)
-    self.assert_( fd != None )
-    self.assert_( fd.getId() ==  "fd" )
-    self.assert_( fd.getSBOTerm() == 64 )
-    self.assert_( fd.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( fd != None )
+    self.assertTrue( fd.getId() ==  "fd" )
+    self.assertTrue( fd.getSBOTerm() == 64 )
+    self.assertTrue( fd.getSBOTermID() ==  "SBO:0000064" )
     ast = fd.getMath()
-    self.assert_((  "lambda(x, pow(x, 3))" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "lambda(x, pow(x, 3))" == libsbml.formulaToString(ast) ))
     lofd = m.getListOfFunctionDefinitions()
     fd1 = lofd.get(0)
-    self.assert_( fd1 == fd )
+    self.assertTrue( fd1 == fd )
     fd1 = lofd.get("fd")
-    self.assert_( fd1 == fd )
-    self.assert_( m.getNumInitialAssignments() == 1 )
+    self.assertTrue( fd1 == fd )
+    self.assertTrue( m.getNumInitialAssignments() == 1 )
     ia = m.getInitialAssignment(0)
-    self.assert_( ia != None )
-    self.assert_( ia.getSymbol() ==  "p1" )
+    self.assertTrue( ia != None )
+    self.assertTrue( ia.getSymbol() ==  "p1" )
     ast = ia.getMath()
-    self.assert_((  "x * p3" == libsbml.formulaToString(ast) ))
-    self.assert_( m.getNumRules() == 3 )
+    self.assertTrue((  "x * p3" == libsbml.formulaToString(ast) ))
+    self.assertTrue( m.getNumRules() == 3 )
     alg = m.getRule(0)
-    self.assert_( alg != None )
-    self.assert_( alg.getSBOTerm() == 64 )
-    self.assert_( alg.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( alg != None )
+    self.assertTrue( alg.getSBOTerm() == 64 )
+    self.assertTrue( alg.getSBOTermID() ==  "SBO:0000064" )
     ast = alg.getMath()
-    self.assert_((  "pow(x, 3)" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "pow(x, 3)" == libsbml.formulaToString(ast) ))
     ar = m.getRule(1)
-    self.assert_( ar != None )
-    self.assert_( ar.getVariable() ==  "p2" )
-    self.assert_( ar.getSBOTerm() == 64 )
-    self.assert_( ar.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( ar != None )
+    self.assertTrue( ar.getVariable() ==  "p2" )
+    self.assertTrue( ar.getSBOTerm() == 64 )
+    self.assertTrue( ar.getSBOTermID() ==  "SBO:0000064" )
     ast = ar.getMath()
-    self.assert_((  "x * p3" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "x * p3" == libsbml.formulaToString(ast) ))
     rr = m.getRule(2)
-    self.assert_( rr != None )
-    self.assert_( rr.getVariable() ==  "p3" )
-    self.assert_( rr.getSBOTerm() == 64 )
-    self.assert_( rr.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( rr != None )
+    self.assertTrue( rr.getVariable() ==  "p3" )
+    self.assertTrue( rr.getSBOTerm() == 64 )
+    self.assertTrue( rr.getSBOTermID() ==  "SBO:0000064" )
     ast = rr.getMath()
-    self.assert_((  "p1 / p" == libsbml.formulaToString(ast) ))
-    self.assert_( m.getNumSpecies() == 1 )
+    self.assertTrue((  "p1 / p" == libsbml.formulaToString(ast) ))
+    self.assertTrue( m.getNumSpecies() == 1 )
     s = m.getSpecies(0)
-    self.assert_( s != None )
-    self.assert_( s.getId() ==  "s" )
-    self.assert_( s.getSpeciesType() ==  "gg" )
-    self.assert_( s.getCompartment() ==  "a" )
-    self.assert_( s.getSBOTerm() == 236 )
-    self.assert_( s.getSBOTermID() ==  "SBO:0000236" )
+    self.assertTrue( s != None )
+    self.assertTrue( s.getId() ==  "s" )
+    self.assertTrue( s.getSpeciesType() ==  "gg" )
+    self.assertTrue( s.getCompartment() ==  "a" )
+    self.assertTrue( s.getSBOTerm() == 236 )
+    self.assertTrue( s.getSBOTermID() ==  "SBO:0000236" )
     self.assertEqual( True, s.isSetInitialAmount() )
     self.assertEqual( False, s.isSetInitialConcentration() )
-    self.assert_( s.getInitialAmount() == 0 )
-    self.assert_( m.getNumReactions() == 1 )
+    self.assertTrue( s.getInitialAmount() == 0 )
+    self.assertTrue( m.getNumReactions() == 1 )
     r = m.getReaction(0)
-    self.assert_( r != None )
-    self.assert_( r.getId() ==  "r" )
+    self.assertTrue( r != None )
+    self.assertTrue( r.getId() ==  "r" )
     self.assertEqual( False, r.getReversible() )
     self.assertEqual( True, r.getFast() )
     self.assertEqual( True, r.isSetKineticLaw() )
     kl = r.getKineticLaw()
-    self.assert_( kl != None )
+    self.assertTrue( kl != None )
     self.assertEqual( True, kl.isSetMath() )
     ast = kl.getMath()
-    self.assert_((  "s * k / p" == libsbml.formulaToString(ast) ))
-    self.assert_( kl.getNumParameters() == 2 )
+    self.assertTrue((  "s * k / p" == libsbml.formulaToString(ast) ))
+    self.assertTrue( kl.getNumParameters() == 2 )
     p = kl.getParameter(0)
-    self.assert_( p != None )
-    self.assert_( p.getId() ==  "k" )
-    self.assert_( p.getUnits() ==  "litre" )
-    self.assert_( p.getValue() == 9 )
+    self.assertTrue( p != None )
+    self.assertTrue( p.getId() ==  "k" )
+    self.assertTrue( p.getUnits() ==  "litre" )
+    self.assertTrue( p.getValue() == 9 )
     ud = p.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 1 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( ud.getUnit(0).getExponent() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( ud.getUnit(0).getExponent() == 1 )
     lop = kl.getListOfParameters()
     p1 = lop.get(0)
-    self.assert_( p1 == p )
+    self.assertTrue( p1 == p )
     p1 = lop.get("k")
-    self.assert_( p1 == p )
+    self.assertTrue( p1 == p )
     p = kl.getParameter(1)
-    self.assert_( p != None )
-    self.assert_( p.getId() ==  "k1" )
-    self.assert_( p.getUnits() ==  "ud1" )
-    self.assert_( p.getValue() == 9 )
+    self.assertTrue( p != None )
+    self.assertTrue( p.getId() ==  "k1" )
+    self.assertTrue( p.getUnits() ==  "ud1" )
+    self.assertTrue( p.getValue() == 9 )
     ud = p.getDerivedUnitDefinition()
-    self.assert_( ud.getNumUnits() == 1 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( ud.getUnit(0).getExponent() == 1 )
-    self.assert_( r.getNumReactants() == 1 )
-    self.assert_( r.getNumProducts() == 0 )
-    self.assert_( r.getNumModifiers() == 0 )
+    self.assertTrue( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( ud.getUnit(0).getExponent() == 1 )
+    self.assertTrue( r.getNumReactants() == 1 )
+    self.assertTrue( r.getNumProducts() == 0 )
+    self.assertTrue( r.getNumModifiers() == 0 )
     sr = r.getReactant(0)
-    self.assert_( sr != None )
-    self.assert_( sr.getSpecies() ==  "s" )
-    self.assert_( sr.getSBOTerm() == 11 )
-    self.assert_( sr.getSBOTermID() ==  "SBO:0000011" )
+    self.assertTrue( sr != None )
+    self.assertTrue( sr.getSpecies() ==  "s" )
+    self.assertTrue( sr.getSBOTerm() == 11 )
+    self.assertTrue( sr.getSBOTermID() ==  "SBO:0000011" )
     stoich = sr.getStoichiometryMath()
-    self.assert_( stoich != None )
-    self.assert_( stoich.getSBOTerm() == 64 )
-    self.assert_( stoich.getSBOTermID() ==  "SBO:0000064" )
+    self.assertTrue( stoich != None )
+    self.assertTrue( stoich.getSBOTerm() == 64 )
+    self.assertTrue( stoich.getSBOTermID() ==  "SBO:0000064" )
     ast = stoich.getMath()
-    self.assert_((  "s * p" == libsbml.formulaToString(ast) ))
-    self.assert_( m.getNumUnitDefinitions() == 1 )
+    self.assertTrue((  "s * p" == libsbml.formulaToString(ast) ))
+    self.assertTrue( m.getNumUnitDefinitions() == 1 )
     ud = m.getUnitDefinition(0)
-    self.assert_( ud != None )
-    self.assert_( ud.getId() ==  "ud1" )
+    self.assertTrue( ud != None )
+    self.assertTrue( ud.getId() ==  "ud1" )
     loud = m.getListOfUnitDefinitions()
     ud1 = loud.get(0)
-    self.assert_( ud1 == ud )
+    self.assertTrue( ud1 == ud )
     ud1 = loud.get("ud1")
-    self.assert_( ud1 == ud )
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud1 == ud )
+    self.assertTrue( ud.getNumUnits() == 1 )
     u = ud.getUnit(0)
-    self.assert_( u != None )
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( u != None )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_MOLE )
     lou = ud.getListOfUnits()
     u1 = lou.get(0)
-    self.assert_( u1 == u )
+    self.assertTrue( u1 == u )
     d = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestReadFromFile8.py b/src/bindings/python/test/sbml/TestReadFromFile8.py
index adcf3190e2..a610a40cdc 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile8.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile8.py
@@ -44,32 +44,32 @@ def test_read_l2v4_new(self):
     d = reader.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
     m = d.getModel()
-    self.assert_( m != None )
-    self.assert_( m.getId() ==  "l2v4_all" )
-    self.assert_( m.getNumCompartments() == 1 )
+    self.assertTrue( m != None )
+    self.assertTrue( m.getId() ==  "l2v4_all" )
+    self.assertTrue( m.getNumCompartments() == 1 )
     c = m.getCompartment(0)
-    self.assert_( c != None )
-    self.assert_( c.getId() ==  "a" )
-    self.assert_( c.getSize() == 1 )
+    self.assertTrue( c != None )
+    self.assertTrue( c.getId() ==  "a" )
+    self.assertTrue( c.getSize() == 1 )
     self.assertEqual( False, c.getConstant() )
-    self.assert_( m.getNumEvents() == 1 )
+    self.assertTrue( m.getNumEvents() == 1 )
     e = m.getEvent(0)
-    self.assert_( e != None )
+    self.assertTrue( e != None )
     self.assertEqual( True, e.getUseValuesFromTriggerTime() )
     self.assertEqual( True, e.isSetTrigger() )
     trigger = e.getTrigger()
-    self.assert_( trigger != None )
+    self.assertTrue( trigger != None )
     ast = trigger.getMath()
-    self.assert_((  "lt(x, 3)" == libsbml.formulaToString(ast) ))
-    self.assert_( e.getNumEventAssignments() == 1 )
+    self.assertTrue((  "lt(x, 3)" == libsbml.formulaToString(ast) ))
+    self.assertTrue( e.getNumEventAssignments() == 1 )
     ea = e.getEventAssignment(0)
-    self.assert_( ea != None )
-    self.assert_( ea.getVariable() ==  "a" )
+    self.assertTrue( ea != None )
+    self.assertTrue( ea.getVariable() ==  "a" )
     ast = ea.getMath()
-    self.assert_((  "x * p3" == libsbml.formulaToString(ast) ))
+    self.assertTrue((  "x * p3" == libsbml.formulaToString(ast) ))
     d = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestReadFromFile9.py b/src/bindings/python/test/sbml/TestReadFromFile9.py
index a0b599921b..4d152224a6 100644
--- a/src/bindings/python/test/sbml/TestReadFromFile9.py
+++ b/src/bindings/python/test/sbml/TestReadFromFile9.py
@@ -49,10 +49,10 @@ def test_read_l3v1_new(self):
     d = reader.readSBML(filename)
     if (d == None):
       pass    
-    self.assert_( d.getLevel() == 3 )
-    self.assert_( d.getVersion() == 1 )
+    self.assertTrue( d.getLevel() == 3 )
+    self.assertTrue( d.getVersion() == 1 )
     m = d.getModel()
-    self.assert_( m != None )
+    self.assertTrue( m != None )
     self.assertEqual( True, m.isSetSubstanceUnits() )
     self.assertEqual( True, m.isSetTimeUnits() )
     self.assertEqual( True, m.isSetVolumeUnits() )
@@ -60,187 +60,187 @@ def test_read_l3v1_new(self):
     self.assertEqual( True, m.isSetAreaUnits() )
     self.assertEqual( True, m.isSetExtentUnits() )
     self.assertEqual( True, m.isSetConversionFactor() )
-    self.assert_( m.getSubstanceUnits() ==  "mole" )
-    self.assert_( m.getTimeUnits() ==  "second" )
-    self.assert_( m.getVolumeUnits() ==  "litre" )
-    self.assert_( m.getLengthUnits() ==  "metre" )
-    self.assert_( m.getAreaUnits() ==  "metre" )
-    self.assert_( m.getExtentUnits() ==  "mole" )
-    self.assert_( m.getConversionFactor() ==  "p" )
-    self.assert_( m.getNumUnitDefinitions() == 2 )
+    self.assertTrue( m.getSubstanceUnits() ==  "mole" )
+    self.assertTrue( m.getTimeUnits() ==  "second" )
+    self.assertTrue( m.getVolumeUnits() ==  "litre" )
+    self.assertTrue( m.getLengthUnits() ==  "metre" )
+    self.assertTrue( m.getAreaUnits() ==  "metre" )
+    self.assertTrue( m.getExtentUnits() ==  "mole" )
+    self.assertTrue( m.getConversionFactor() ==  "p" )
+    self.assertTrue( m.getNumUnitDefinitions() == 2 )
     ud = m.getUnitDefinition(0)
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
     u = ud.getUnit(0)
     self.assertEqual( False, u.isSetExponent() )
     self.assertEqual( False, u.isSetScale() )
     self.assertEqual( False, u.isSetMultiplier() )
     self.assertEqual( True, isnan(u.getExponentAsDouble()) )
-    self.assert_( u.getScale() == SBML_INT_MAX )
+    self.assertTrue( u.getScale() == SBML_INT_MAX )
     self.assertEqual( True, isnan(u.getMultiplier()) )
     ud = m.getUnitDefinition(1)
-    self.assert_( ud.getNumUnits() == 3 )
+    self.assertTrue( ud.getNumUnits() == 3 )
     u = ud.getUnit(0)
     self.assertEqual( True, u.isSetExponent() )
     self.assertEqual( True, u.isSetScale() )
     self.assertEqual( True, u.isSetMultiplier() )
-    self.assert_( u.getExponent() == -1 )
-    self.assert_( u.getExponentAsDouble() == -1 )
-    self.assert_( u.getScale() == 2 )
-    self.assert_( u.getMultiplier() == 1.3 )
+    self.assertTrue( u.getExponent() == -1 )
+    self.assertTrue( u.getExponentAsDouble() == -1 )
+    self.assertTrue( u.getScale() == 2 )
+    self.assertTrue( u.getMultiplier() == 1.3 )
     u = ud.getUnit(1)
     self.assertEqual( True, u.isSetExponent() )
     self.assertEqual( True, u.isSetScale() )
     self.assertEqual( True, u.isSetMultiplier() )
-    self.assert_( u.getExponentAsDouble() == 1.5 )
-    self.assert_( u.getScale() == 10 )
-    self.assert_( u.getMultiplier() == 0.5 )
+    self.assertTrue( u.getExponentAsDouble() == 1.5 )
+    self.assertTrue( u.getScale() == 10 )
+    self.assertTrue( u.getMultiplier() == 0.5 )
     u = ud.getUnit(2)
     self.assertEqual( True, u.isSetExponent() )
     self.assertEqual( True, u.isSetScale() )
     self.assertEqual( True, u.isSetMultiplier() )
-    self.assert_( u.getExponent() == 1 )
-    self.assert_( u.getScale() == 0 )
-    self.assert_( u.getMultiplier() == 1 )
-    self.assert_( m.getNumCompartments() == 3 )
+    self.assertTrue( u.getExponent() == 1 )
+    self.assertTrue( u.getScale() == 0 )
+    self.assertTrue( u.getMultiplier() == 1 )
+    self.assertTrue( m.getNumCompartments() == 3 )
     c = m.getCompartment(0)
     self.assertEqual( True, c.isSetSize() )
     self.assertEqual( True, c.isSetSpatialDimensions() )
     self.assertEqual( True, c.isSetConstant() )
-    self.assert_( c.getId() ==  "comp" )
-    self.assert_( c.getSize() == 1e-14 )
-    self.assert_( c.getSpatialDimensions() == 3 )
-    self.assert_( c.getSpatialDimensionsAsDouble() == 3 )
-    self.assert_( c.getUnits() ==  "litre" )
-    self.assert_( c.getConstant() == True )
+    self.assertTrue( c.getId() ==  "comp" )
+    self.assertTrue( c.getSize() == 1e-14 )
+    self.assertTrue( c.getSpatialDimensions() == 3 )
+    self.assertTrue( c.getSpatialDimensionsAsDouble() == 3 )
+    self.assertTrue( c.getUnits() ==  "litre" )
+    self.assertTrue( c.getConstant() == True )
     c = m.getCompartment(1)
     self.assertEqual( False, c.isSetSize() )
     self.assertEqual( False, c.isSetSpatialDimensions() )
     self.assertEqual( True, c.isSetConstant() )
-    self.assert_( c.getId() ==  "comp1" )
+    self.assertTrue( c.getId() ==  "comp1" )
     self.assertEqual( True, isnan(c.getSize()) )
     self.assertEqual( True, isnan(c.getSpatialDimensionsAsDouble()) )
-    self.assert_( c.getConstant() == False )
+    self.assertTrue( c.getConstant() == False )
     c = m.getCompartment(2)
     self.assertEqual( False, c.isSetSize() )
     self.assertEqual( True, c.isSetSpatialDimensions() )
     self.assertEqual( False, c.isSetConstant() )
-    self.assert_( c.getId() ==  "comp2" )
-    self.assert_( c.getSpatialDimensionsAsDouble() == 4.6 )
-    self.assert_( m.getNumSpecies() == 2 )
+    self.assertTrue( c.getId() ==  "comp2" )
+    self.assertTrue( c.getSpatialDimensionsAsDouble() == 4.6 )
+    self.assertTrue( m.getNumSpecies() == 2 )
     s = m.getSpecies(0)
-    self.assert_( s.getId() ==  "ES" )
-    self.assert_( s.getCompartment() ==  "comp" )
+    self.assertTrue( s.getId() ==  "ES" )
+    self.assertTrue( s.getCompartment() ==  "comp" )
     self.assertEqual( True, s.isSetConversionFactor() )
-    self.assert_( s.getConversionFactor() ==  "p" )
+    self.assertTrue( s.getConversionFactor() ==  "p" )
     self.assertEqual( True, s.isSetBoundaryCondition() )
-    self.assert_( s.getBoundaryCondition() == False )
+    self.assertTrue( s.getBoundaryCondition() == False )
     self.assertEqual( True, s.isSetHasOnlySubstanceUnits() )
-    self.assert_( s.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( s.getHasOnlySubstanceUnits() == False )
     self.assertEqual( True, s.isSetSubstanceUnits() )
-    self.assert_( s.getSubstanceUnits() ==  "mole" )
+    self.assertTrue( s.getSubstanceUnits() ==  "mole" )
     self.assertEqual( True, s.isSetConstant() )
-    self.assert_( s.getConstant() == False )
+    self.assertTrue( s.getConstant() == False )
     self.assertEqual( True, s.isSetInitialAmount() )
-    self.assert_( s.getInitialAmount() == 0 )
+    self.assertTrue( s.getInitialAmount() == 0 )
     self.assertEqual( False, s.isSetInitialConcentration() )
     self.assertEqual( True, isnan(s.getInitialConcentration()) )
     s = m.getSpecies(1)
-    self.assert_( s.getId() ==  "P" )
-    self.assert_( s.getCompartment() ==  "comp" )
+    self.assertTrue( s.getId() ==  "P" )
+    self.assertTrue( s.getCompartment() ==  "comp" )
     self.assertEqual( False, s.isSetConversionFactor() )
-    self.assert_( s.getConversionFactor() ==  "" )
+    self.assertTrue( s.getConversionFactor() ==  "" )
     self.assertEqual( False, s.isSetBoundaryCondition() )
     self.assertEqual( False, s.isSetHasOnlySubstanceUnits() )
     self.assertEqual( False, s.isSetSubstanceUnits() )
-    self.assert_( s.getSubstanceUnits() ==  "" )
+    self.assertTrue( s.getSubstanceUnits() ==  "" )
     self.assertEqual( False, s.isSetConstant() )
     self.assertEqual( False, s.isSetInitialAmount() )
     self.assertEqual( True, isnan(s.getInitialAmount()) )
     self.assertEqual( False, s.isSetInitialConcentration() )
     self.assertEqual( True, isnan(s.getInitialConcentration()) )
-    self.assert_( m.getNumParameters() == 3 )
+    self.assertTrue( m.getNumParameters() == 3 )
     p = m.getParameter(0)
-    self.assert_( p.getId() ==  "Keq" )
+    self.assertTrue( p.getId() ==  "Keq" )
     self.assertEqual( True, p.isSetValue() )
-    self.assert_( p.getValue() == 2.5 )
+    self.assertTrue( p.getValue() == 2.5 )
     self.assertEqual( True, p.isSetUnits() )
-    self.assert_( p.getUnits() ==  "dimensionless" )
+    self.assertTrue( p.getUnits() ==  "dimensionless" )
     self.assertEqual( True, p.isSetConstant() )
-    self.assert_( p.getConstant() == True )
+    self.assertTrue( p.getConstant() == True )
     p = m.getParameter(1)
-    self.assert_( p.getId() ==  "Keq1" )
+    self.assertTrue( p.getId() ==  "Keq1" )
     self.assertEqual( False, p.isSetValue() )
     self.assertEqual( True, isnan(p.getValue()) )
     self.assertEqual( False, p.isSetUnits() )
-    self.assert_( p.getUnits() ==  "" )
+    self.assertTrue( p.getUnits() ==  "" )
     self.assertEqual( True, p.isSetConstant() )
-    self.assert_( p.getConstant() == False )
+    self.assertTrue( p.getConstant() == False )
     p = m.getParameter(2)
-    self.assert_( p.getId() ==  "Keq2" )
+    self.assertTrue( p.getId() ==  "Keq2" )
     self.assertEqual( False, p.isSetValue() )
     self.assertEqual( True, isnan(p.getValue()) )
     self.assertEqual( False, p.isSetUnits() )
-    self.assert_( p.getUnits() ==  "" )
+    self.assertTrue( p.getUnits() ==  "" )
     self.assertEqual( False, p.isSetConstant() )
-    self.assert_( m.getNumReactions() == 3 )
+    self.assertTrue( m.getNumReactions() == 3 )
     r = m.getReaction(0)
     self.assertEqual( True, r.isSetFast() )
-    self.assert_( r.getFast() == False )
+    self.assertTrue( r.getFast() == False )
     self.assertEqual( True, r.isSetReversible() )
-    self.assert_( r.getReversible() == False )
+    self.assertTrue( r.getReversible() == False )
     self.assertEqual( True, r.isSetCompartment() )
-    self.assert_( r.getCompartment() ==  "comp" )
+    self.assertTrue( r.getCompartment() ==  "comp" )
     sr = r.getReactant(0)
     self.assertEqual( True, sr.isSetConstant() )
-    self.assert_( sr.getConstant() == True )
+    self.assertTrue( sr.getConstant() == True )
     self.assertEqual( True, sr.isSetStoichiometry() )
-    self.assert_( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getStoichiometry() == 1 )
     sr = r.getProduct(0)
     self.assertEqual( True, sr.isSetConstant() )
-    self.assert_( sr.getConstant() == False )
+    self.assertTrue( sr.getConstant() == False )
     self.assertEqual( False, sr.isSetStoichiometry() )
     self.assertEqual( True, isnan(sr.getStoichiometry()) )
     kl = r.getKineticLaw()
-    self.assert_( kl.getNumLocalParameters() == 2 )
-    self.assert_( kl.getNumParameters() == 2 )
+    self.assertTrue( kl.getNumLocalParameters() == 2 )
+    self.assertTrue( kl.getNumParameters() == 2 )
     p = kl.getParameter(0)
     self.assertEqual( True, p.isSetUnits() )
-    self.assert_( p.getUnits() ==  "per_second" )
+    self.assertTrue( p.getUnits() ==  "per_second" )
     self.assertEqual( True, p.isSetValue() )
-    self.assert_( p.getValue() == 0.1 )
+    self.assertTrue( p.getValue() == 0.1 )
     lp = kl.getLocalParameter(0)
     self.assertEqual( True, lp.isSetUnits() )
-    self.assert_( lp.getUnits() ==  "per_second" )
+    self.assertTrue( lp.getUnits() ==  "per_second" )
     self.assertEqual( True, lp.isSetValue() )
-    self.assert_( lp.getValue() == 0.1 )
+    self.assertTrue( lp.getValue() == 0.1 )
     lp = kl.getLocalParameter(1)
     self.assertEqual( False, lp.isSetUnits() )
-    self.assert_( lp.getUnits() ==  "" )
+    self.assertTrue( lp.getUnits() ==  "" )
     self.assertEqual( False, lp.isSetValue() )
     self.assertEqual( True, isnan(lp.getValue()) )
     r = m.getReaction(1)
     self.assertEqual( True, r.isSetFast() )
-    self.assert_( r.getFast() == True )
+    self.assertTrue( r.getFast() == True )
     self.assertEqual( True, r.isSetReversible() )
-    self.assert_( r.getReversible() == True )
+    self.assertTrue( r.getReversible() == True )
     self.assertEqual( False, r.isSetCompartment() )
-    self.assert_( r.getCompartment() ==  "" )
+    self.assertTrue( r.getCompartment() ==  "" )
     sr = r.getReactant(0)
     self.assertEqual( False, sr.isSetConstant() )
     r = m.getReaction(2)
     self.assertEqual( False, r.isSetFast() )
     self.assertEqual( False, r.isSetReversible() )
     self.assertEqual( False, r.isSetCompartment() )
-    self.assert_( r.getCompartment() ==  "" )
+    self.assertTrue( r.getCompartment() ==  "" )
     e = m.getEvent(0)
     t = e.getTrigger()
     self.assertEqual( True, t.isSetPersistent() )
-    self.assert_( t.getPersistent() == False )
+    self.assertTrue( t.getPersistent() == False )
     self.assertEqual( True, t.isSetInitialValue() )
-    self.assert_( t.getInitialValue() == False )
+    self.assertTrue( t.getInitialValue() == False )
     self.assertEqual( True, e.isSetPriority() )
     pr = e.getPriority()
-    self.assert_( pr != None )
+    self.assertTrue( pr != None )
     self.assertEqual( True, pr.isSetMath() )
     e = m.getEvent(1)
     self.assertEqual( False, e.isSetPriority() )
diff --git a/src/bindings/python/test/sbml/TestReadSBML.py b/src/bindings/python/test/sbml/TestReadSBML.py
index e49ba4f6da..543318c7c1 100644
--- a/src/bindings/python/test/sbml/TestReadSBML.py
+++ b/src/bindings/python/test/sbml/TestReadSBML.py
@@ -156,9 +156,9 @@ def test_ReadSBML_AlgebraicRule(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     ar = self.M.getRule(0)
-    self.assert_((  "x + 1" == ar.getFormula() ))
+    self.assertTrue((  "x + 1" == ar.getFormula() ))
     pass  
 
   def test_ReadSBML_AlgebraicRule_L2(self):
@@ -179,14 +179,14 @@ def test_ReadSBML_AlgebraicRule_L2(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     ar = self.M.getRule(0)
-    self.assert_( ar != None )
+    self.assertTrue( ar != None )
     self.assertEqual( True, ar.isSetMath() )
     math = ar.getMath()
     formula = ar.getFormula()
-    self.assert_( formula != None )
-    self.assert_((  "S1 + S2 - T" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "S1 + S2 - T" == formula ))
     pass  
 
   def test_ReadSBML_AssignmentRule(self):
@@ -203,14 +203,14 @@ def test_ReadSBML_AssignmentRule(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     ar = self.M.getRule(0)
-    self.assert_( ar != None )
+    self.assertTrue( ar != None )
     self.assertEqual( True, ar.isSetMath() )
     math = ar.getMath()
     formula = ar.getFormula()
-    self.assert_( formula != None )
-    self.assert_((  "k3 / k2" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "k3 / k2" == formula ))
     pass  
 
   def test_ReadSBML_Compartment(self):
@@ -220,12 +220,12 @@ def test_ReadSBML_Compartment(self):
     "</listOfCompartments>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumCompartments() == 1 )
+    self.assertTrue( self.M.getNumCompartments() == 1 )
     c = self.M.getCompartment(0)
-    self.assert_((  "mitochondria"  == c.getId() ))
-    self.assert_((  "milliliters"   == c.getUnits() ))
-    self.assert_((  "cell"          == c.getOutside() ))
-    self.assert_( c.getVolume() == .0001 )
+    self.assertTrue((  "mitochondria"  == c.getId() ))
+    self.assertTrue((  "milliliters"   == c.getUnits() ))
+    self.assertTrue((  "cell"          == c.getOutside() ))
+    self.assertTrue( c.getVolume() == .0001 )
     self.assertEqual( True, c.isSetVolume() )
     self.assertEqual( True, c.isSetSize() )
     pass  
@@ -236,12 +236,12 @@ def test_ReadSBML_CompartmentVolumeRule(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     cvr = self.M.getRule(0)
     self.assertEqual( True, cvr.isCompartmentVolume() )
-    self.assert_((  "A" == cvr.getVariable() ))
-    self.assert_((  "0.10 * t"  == cvr.getFormula() ))
-    self.assert_( cvr.getType() == libsbml.RULE_TYPE_SCALAR )
+    self.assertTrue((  "A" == cvr.getVariable() ))
+    self.assertTrue((  "0.10 * t"  == cvr.getFormula() ))
+    self.assertTrue( cvr.getType() == libsbml.RULE_TYPE_SCALAR )
     pass  
 
   def test_ReadSBML_Compartment_L2(self):
@@ -251,7 +251,7 @@ def test_ReadSBML_Compartment_L2(self):
     "</listOfCompartments>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumCompartments() == 1 )
+    self.assertTrue( self.M.getNumCompartments() == 1 )
     c = self.M.getCompartment(0)
     self.assertEqual( True, c.isSetId() )
     self.assertEqual( False, c.isSetName() )
@@ -259,11 +259,11 @@ def test_ReadSBML_Compartment_L2(self):
     self.assertEqual( True, c.isSetSize() )
     self.assertEqual( True, c.isSetUnits() )
     self.assertEqual( True, c.isSetOutside() )
-    self.assert_((  "membrane"  == c.getId() ))
-    self.assert_((  "area"      == c.getUnits() ))
-    self.assert_((  "tissue"    == c.getOutside() ))
-    self.assert_( c.getSpatialDimensions() == 2 )
-    self.assert_( c.getSize() == .3 )
+    self.assertTrue((  "membrane"  == c.getId() ))
+    self.assertTrue((  "area"      == c.getUnits() ))
+    self.assertTrue((  "tissue"    == c.getOutside() ))
+    self.assertTrue( c.getSpatialDimensions() == 2 )
+    self.assertTrue( c.getSize() == .3 )
     pass  
 
   def test_ReadSBML_Compartment_defaults(self):
@@ -271,15 +271,15 @@ def test_ReadSBML_Compartment_defaults(self):
     )
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumCompartments() == 1 )
+    self.assertTrue( self.M.getNumCompartments() == 1 )
     c = self.M.getCompartment(0)
     self.assertEqual( True, c.isSetId() )
     self.assertEqual( True, c.isSetVolume() )
     self.assertEqual( False, c.isSetSize() )
     self.assertEqual( False, c.isSetUnits() )
     self.assertEqual( False, c.isSetOutside() )
-    self.assert_((  "cell"  == c.getId() ))
-    self.assert_( c.getVolume() == 1.0 )
+    self.assertTrue((  "cell"  == c.getId() ))
+    self.assertTrue( c.getVolume() == 1.0 )
     pass  
 
   def test_ReadSBML_Compartment_defaults_L2(self):
@@ -287,16 +287,16 @@ def test_ReadSBML_Compartment_defaults_L2(self):
     )
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumCompartments() == 1 )
+    self.assertTrue( self.M.getNumCompartments() == 1 )
     c = self.M.getCompartment(0)
     self.assertEqual( True, c.isSetId() )
     self.assertEqual( False, c.isSetName() )
     self.assertEqual( False, c.isSetSize() )
     self.assertEqual( False, c.isSetUnits() )
     self.assertEqual( False, c.isSetOutside() )
-    self.assert_((  "cell"  == c.getId() ))
-    self.assert_( c.getSpatialDimensions() == 3 )
-    self.assert_( c.getConstant() == True )
+    self.assertTrue((  "cell"  == c.getId() ))
+    self.assertTrue( c.getSpatialDimensions() == 3 )
+    self.assertTrue( c.getConstant() == True )
     pass  
 
   def test_ReadSBML_Event(self):
@@ -305,17 +305,17 @@ def test_ReadSBML_Event(self):
     "</listOfEvents>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumEvents() == 1 )
+    self.assertTrue( self.M.getNumEvents() == 1 )
     e = self.M.getEvent(0)
-    self.assert_( e != None )
+    self.assertTrue( e != None )
     self.assertEqual( True, e.isSetId() )
     self.assertEqual( True, e.isSetName() )
     self.assertEqual( True, e.isSetTimeUnits() )
     self.assertEqual( False, e.isSetTrigger() )
     self.assertEqual( False, e.isSetDelay() )
-    self.assert_((  "e1"       == e.getId() ))
-    self.assert_((  "MyEvent"  == e.getName() ))
-    self.assert_((  "time"     == e.getTimeUnits() ))
+    self.assertTrue((  "e1"       == e.getId() ))
+    self.assertTrue((  "MyEvent"  == e.getName() ))
+    self.assertTrue((  "time"     == e.getTimeUnits() ))
     pass  
 
   def test_ReadSBML_EventAssignment(self):
@@ -330,19 +330,19 @@ def test_ReadSBML_EventAssignment(self):
     "</listOfEvents>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumEvents() == 1 )
+    self.assertTrue( self.M.getNumEvents() == 1 )
     e = self.M.getEvent(0)
-    self.assert_( e != None )
-    self.assert_( e.getNumEventAssignments() == 1 )
+    self.assertTrue( e != None )
+    self.assertTrue( e.getNumEventAssignments() == 1 )
     ea = e.getEventAssignment(0)
-    self.assert_( ea != None )
+    self.assertTrue( ea != None )
     self.assertEqual( True, ea.isSetVariable() )
-    self.assert_((  "k2" == ea.getVariable() ))
+    self.assertTrue((  "k2" == ea.getVariable() ))
     self.assertEqual( True, ea.isSetMath() )
     math = ea.getMath()
     formula = libsbml.formulaToString(math)
-    self.assert_( formula != None )
-    self.assert_((  "0" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "0" == formula ))
     pass  
 
   def test_ReadSBML_Event_delay(self):
@@ -351,15 +351,15 @@ def test_ReadSBML_Event_delay(self):
     "</listOfEvents>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumEvents() == 1 )
+    self.assertTrue( self.M.getNumEvents() == 1 )
     e = self.M.getEvent(0)
-    self.assert_( e != None )
+    self.assertTrue( e != None )
     self.assertEqual( True, e.isSetDelay() )
     self.assertEqual( False, e.isSetTrigger() )
     delay = e.getDelay()
     formula = libsbml.formulaToString(delay.getMath())
-    self.assert_( formula != None )
-    self.assert_((  "5" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "5" == formula ))
     pass  
 
   def test_ReadSBML_Event_trigger(self):
@@ -378,15 +378,15 @@ def test_ReadSBML_Event_trigger(self):
     "</listOfEvents>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumEvents() == 1 )
+    self.assertTrue( self.M.getNumEvents() == 1 )
     e = self.M.getEvent(0)
-    self.assert_( e != None )
+    self.assertTrue( e != None )
     self.assertEqual( False, e.isSetDelay() )
     self.assertEqual( True, e.isSetTrigger() )
     trigger = e.getTrigger()
     formula = libsbml.formulaToString(trigger.getMath())
-    self.assert_( formula != None )
-    self.assert_((  "leq(P1, t)" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "leq(P1, t)" == formula ))
     pass  
 
   def test_ReadSBML_FunctionDefinition(self):
@@ -406,18 +406,18 @@ def test_ReadSBML_FunctionDefinition(self):
     "</listOfFunctionDefinitions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumFunctionDefinitions() == 1 )
+    self.assertTrue( self.M.getNumFunctionDefinitions() == 1 )
     fd = self.M.getFunctionDefinition(0)
-    self.assert_( fd != None )
+    self.assertTrue( fd != None )
     self.assertEqual( True, fd.isSetId() )
     self.assertEqual( True, fd.isSetName() )
-    self.assert_((  "pow3"   == fd.getId() ))
-    self.assert_((  "cubed"  == fd.getName() ))
+    self.assertTrue((  "pow3"   == fd.getId() ))
+    self.assertTrue((  "cubed"  == fd.getName() ))
     self.assertEqual( True, fd.isSetMath() )
     math = fd.getMath()
     formula = libsbml.formulaToString(math)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, pow(x, 3))" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, pow(x, 3))" == formula ))
     pass  
 
   def test_ReadSBML_KineticLaw(self):
@@ -428,10 +428,10 @@ def test_ReadSBML_KineticLaw(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
     kl = r.getKineticLaw()
-    self.assert_((  "k1*X0" == kl.getFormula() ))
+    self.assertTrue((  "k1*X0" == kl.getFormula() ))
     pass  
 
   def test_ReadSBML_KineticLaw_L2(self):
@@ -451,16 +451,16 @@ def test_ReadSBML_KineticLaw_L2(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_( r != None )
+    self.assertTrue( r != None )
     kl = r.getKineticLaw()
-    self.assert_( kl != None )
+    self.assertTrue( kl != None )
     self.assertEqual( True, kl.isSetMath() )
     math = kl.getMath()
     formula = kl.getFormula()
-    self.assert_( formula != None )
-    self.assert_((  "k * S2 * X0" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "k * S2 * X0" == formula ))
     pass  
 
   def test_ReadSBML_KineticLaw_Parameter(self):
@@ -475,14 +475,14 @@ def test_ReadSBML_KineticLaw_Parameter(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
     kl = r.getKineticLaw()
-    self.assert_((  "k1*X0" == kl.getFormula() ))
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue((  "k1*X0" == kl.getFormula() ))
+    self.assertTrue( kl.getNumParameters() == 1 )
     p = kl.getParameter(0)
-    self.assert_((  "k1" == p.getId() ))
-    self.assert_( p.getValue() == 0 )
+    self.assertTrue((  "k1" == p.getId() ))
+    self.assertTrue( p.getValue() == 0 )
     pass  
 
   def test_ReadSBML_Model(self):
@@ -491,7 +491,7 @@ def test_ReadSBML_Model(self):
     "</sbml>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_((  "testModel" == self.M.getId() ))
+    self.assertTrue((  "testModel" == self.M.getId() ))
     pass  
 
   def test_ReadSBML_Model_L2(self):
@@ -502,7 +502,7 @@ def test_ReadSBML_Model_L2(self):
     self.M = self.D.getModel()
     self.assertEqual( True, self.M.isSetId() )
     self.assertEqual( False, self.M.isSetName() )
-    self.assert_((  "testModel" == self.M.getId() ))
+    self.assertTrue((  "testModel" == self.M.getId() ))
     pass  
 
   def test_ReadSBML_Parameter(self):
@@ -511,12 +511,12 @@ def test_ReadSBML_Parameter(self):
     "</listOfParameters>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumParameters() == 1 )
+    self.assertTrue( self.M.getNumParameters() == 1 )
     p = self.M.getParameter(0)
-    self.assert_((  "Km1"     == p.getId() ))
-    self.assert_((  "second"  == p.getUnits() ))
-    self.assert_( p.getValue() == 2.3 )
-    self.assert_( p.isSetValue() == True )
+    self.assertTrue((  "Km1"     == p.getId() ))
+    self.assertTrue((  "second"  == p.getUnits() ))
+    self.assertTrue( p.getValue() == 2.3 )
+    self.assertTrue( p.isSetValue() == True )
     pass  
 
   def test_ReadSBML_ParameterRule(self):
@@ -525,12 +525,12 @@ def test_ReadSBML_ParameterRule(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     pr = self.M.getRule(0)
     self.assertEqual( True, pr.isParameter() )
-    self.assert_((  "k" == pr.getVariable() ))
-    self.assert_((  "k3/k2"  == pr.getFormula() ))
-    self.assert_( pr.getType() == libsbml.RULE_TYPE_SCALAR )
+    self.assertTrue((  "k" == pr.getVariable() ))
+    self.assertTrue((  "k3/k2"  == pr.getFormula() ))
+    self.assertTrue( pr.getType() == libsbml.RULE_TYPE_SCALAR )
     pass  
 
   def test_ReadSBML_Parameter_L2(self):
@@ -539,16 +539,16 @@ def test_ReadSBML_Parameter_L2(self):
     "</listOfParameters>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumParameters() == 1 )
+    self.assertTrue( self.M.getNumParameters() == 1 )
     p = self.M.getParameter(0)
     self.assertEqual( True, p.isSetId() )
     self.assertEqual( False, p.isSetName() )
     self.assertEqual( True, p.isSetValue() )
     self.assertEqual( True, p.isSetUnits() )
-    self.assert_((  "T"        == p.getId() ))
-    self.assert_((  "Celsius"  == p.getUnits() ))
-    self.assert_( p.getValue() == 4.6 )
-    self.assert_( p.getConstant() == False )
+    self.assertTrue((  "T"        == p.getId() ))
+    self.assertTrue((  "Celsius"  == p.getUnits() ))
+    self.assertTrue( p.getValue() == 4.6 )
+    self.assertTrue( p.getConstant() == False )
     pass  
 
   def test_ReadSBML_Parameter_L2_defaults(self):
@@ -556,14 +556,14 @@ def test_ReadSBML_Parameter_L2_defaults(self):
     )
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumParameters() == 1 )
+    self.assertTrue( self.M.getNumParameters() == 1 )
     p = self.M.getParameter(0)
     self.assertEqual( True, p.isSetId() )
     self.assertEqual( False, p.isSetName() )
     self.assertEqual( False, p.isSetValue() )
     self.assertEqual( False, p.isSetUnits() )
-    self.assert_((  "x" == p.getId() ))
-    self.assert_( p.getConstant() == True )
+    self.assertTrue((  "x" == p.getId() ))
+    self.assertTrue( p.getConstant() == True )
     pass  
 
   def test_ReadSBML_RateRule(self):
@@ -587,14 +587,14 @@ def test_ReadSBML_RateRule(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     rr = self.M.getRule(0)
-    self.assert_( rr != None )
+    self.assertTrue( rr != None )
     self.assertEqual( True, rr.isSetMath() )
     math = rr.getMath()
     formula = rr.getFormula()
-    self.assert_( formula != None )
-    self.assert_((  "(1 - x) * log(x)" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "(1 - x) * log(x)" == formula ))
     pass  
 
   def test_ReadSBML_Reaction(self):
@@ -603,11 +603,11 @@ def test_ReadSBML_Reaction(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_((  "reaction_1" == r.getId() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "reaction_1" == r.getId() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getFast() == False )
     pass  
 
   def test_ReadSBML_Reaction_L2(self):
@@ -616,14 +616,14 @@ def test_ReadSBML_Reaction_L2(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
     self.assertEqual( True, r.isSetId() )
     self.assertEqual( False, r.isSetName() )
     self.assertEqual( True, r.isSetFast() )
-    self.assert_((  "r1" == r.getId() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "r1" == r.getId() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getFast() == False )
     pass  
 
   def test_ReadSBML_Reaction_L2_defaults(self):
@@ -631,13 +631,13 @@ def test_ReadSBML_Reaction_L2_defaults(self):
     )
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
     self.assertEqual( True, r.isSetId() )
     self.assertEqual( False, r.isSetName() )
     self.assertEqual( False, r.isSetFast() )
-    self.assert_((  "r1" == r.getId() ))
-    self.assert_( r.getReversible() == True )
+    self.assertTrue((  "r1" == r.getId() ))
+    self.assertTrue( r.getReversible() == True )
     pass  
 
   def test_ReadSBML_Reaction_defaults(self):
@@ -646,18 +646,18 @@ def test_ReadSBML_Reaction_defaults(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_((  "reaction_1" == r.getId() ))
-    self.assert_( r.getReversible() != False )
-    self.assert_( r.getFast() == False )
+    self.assertTrue((  "reaction_1" == r.getId() ))
+    self.assertTrue( r.getReversible() != False )
+    self.assertTrue( r.getFast() == False )
     pass  
 
   def test_ReadSBML_SBML(self):
     s = wrapXML("<sbml level='1' version='1'> </sbml>")
     self.D = libsbml.readSBMLFromString(s)
-    self.assert_( self.D.getLevel() == 1 )
-    self.assert_( self.D.getVersion() == 1 )
+    self.assertTrue( self.D.getLevel() == 1 )
+    self.assertTrue( self.D.getVersion() == 1 )
     pass  
 
   def test_ReadSBML_Specie(self):
@@ -667,16 +667,16 @@ def test_ReadSBML_Specie(self):
     "</listOfSpecie>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
     sp = self.M.getSpecies(0)
-    self.assert_((  "Glucose"  == sp.getId() ))
-    self.assert_((  "cell"     == sp.getCompartment() ))
-    self.assert_((  "volume"   == sp.getUnits() ))
-    self.assert_( sp.getInitialAmount() == 4.1 )
-    self.assert_( sp.getBoundaryCondition() == False )
-    self.assert_( sp.getCharge() == 6 )
-    self.assert_( sp.isSetInitialAmount() == True )
-    self.assert_( sp.isSetCharge() == True )
+    self.assertTrue((  "Glucose"  == sp.getId() ))
+    self.assertTrue((  "cell"     == sp.getCompartment() ))
+    self.assertTrue((  "volume"   == sp.getUnits() ))
+    self.assertTrue( sp.getInitialAmount() == 4.1 )
+    self.assertTrue( sp.getBoundaryCondition() == False )
+    self.assertTrue( sp.getCharge() == 6 )
+    self.assertTrue( sp.isSetInitialAmount() == True )
+    self.assertTrue( sp.isSetCharge() == True )
     pass  
 
   def test_ReadSBML_SpecieConcentrationRule(self):
@@ -685,12 +685,12 @@ def test_ReadSBML_SpecieConcentrationRule(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     scr = self.M.getRule(0)
     self.assertEqual( True, scr.isSpeciesConcentration() )
-    self.assert_((  "s2" == scr.getVariable() ))
-    self.assert_((  "k * t/(1 + k)"  == scr.getFormula() ))
-    self.assert_( scr.getType() == libsbml.RULE_TYPE_SCALAR )
+    self.assertTrue((  "s2" == scr.getVariable() ))
+    self.assertTrue((  "k * t/(1 + k)"  == scr.getFormula() ))
+    self.assertTrue( scr.getType() == libsbml.RULE_TYPE_SCALAR )
     pass  
 
   def test_ReadSBML_SpecieConcentrationRule_rate(self):
@@ -700,12 +700,12 @@ def test_ReadSBML_SpecieConcentrationRule_rate(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     scr = self.M.getRule(0)
     self.assertEqual( True, scr.isSpeciesConcentration() )
-    self.assert_((  "s2" == scr.getVariable() ))
-    self.assert_((  "k * t/(1 + k)"  == scr.getFormula() ))
-    self.assert_( scr.getType() == libsbml.RULE_TYPE_RATE )
+    self.assertTrue((  "s2" == scr.getVariable() ))
+    self.assertTrue((  "k * t/(1 + k)"  == scr.getFormula() ))
+    self.assertTrue( scr.getType() == libsbml.RULE_TYPE_RATE )
     pass  
 
   def test_ReadSBML_SpecieReference_Product(self):
@@ -718,15 +718,15 @@ def test_ReadSBML_SpecieReference_Product(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_((  "reaction_1" == r.getId() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getNumProducts() == 1 )
+    self.assertTrue((  "reaction_1" == r.getId() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getNumProducts() == 1 )
     sr = r.getProduct(0)
-    self.assert_((  "S1" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "S1" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     pass  
 
   def test_ReadSBML_SpecieReference_Reactant(self):
@@ -739,15 +739,15 @@ def test_ReadSBML_SpecieReference_Reactant(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_((  "reaction_1" == r.getId() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getNumReactants() == 1 )
+    self.assertTrue((  "reaction_1" == r.getId() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getNumReactants() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "X0" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "X0" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     pass  
 
   def test_ReadSBML_SpecieReference_defaults(self):
@@ -760,15 +760,15 @@ def test_ReadSBML_SpecieReference_defaults(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_((  "reaction_1" == r.getId() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getNumReactants() == 1 )
+    self.assertTrue((  "reaction_1" == r.getId() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getNumReactants() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "X0" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "X0" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     pass  
 
   def test_ReadSBML_Specie_defaults(self):
@@ -777,14 +777,14 @@ def test_ReadSBML_Specie_defaults(self):
     "</listOfSpecie>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
     sp = self.M.getSpecies(0)
-    self.assert_((  "Glucose"  == sp.getId() ))
-    self.assert_((  "cell"     == sp.getCompartment() ))
-    self.assert_( sp.getInitialAmount() == 1.0 )
-    self.assert_( sp.getBoundaryCondition() == False )
-    self.assert_( sp.isSetInitialAmount() == True )
-    self.assert_( sp.isSetCharge() == False )
+    self.assertTrue((  "Glucose"  == sp.getId() ))
+    self.assertTrue((  "cell"     == sp.getCompartment() ))
+    self.assertTrue( sp.getInitialAmount() == 1.0 )
+    self.assertTrue( sp.getBoundaryCondition() == False )
+    self.assertTrue( sp.isSetInitialAmount() == True )
+    self.assertTrue( sp.isSetCharge() == False )
     pass  
 
   def test_ReadSBML_Species(self):
@@ -794,16 +794,16 @@ def test_ReadSBML_Species(self):
     "</listOfSpecies>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
     sp = self.M.getSpecies(0)
-    self.assert_((  "Glucose"  == sp.getId() ))
-    self.assert_((  "cell"     == sp.getCompartment() ))
-    self.assert_((  "volume"   == sp.getUnits() ))
-    self.assert_( sp.getInitialAmount() == 4.1 )
-    self.assert_( sp.getBoundaryCondition() == False )
-    self.assert_( sp.getCharge() == 6 )
-    self.assert_( sp.isSetInitialAmount() == True )
-    self.assert_( sp.isSetCharge() == True )
+    self.assertTrue((  "Glucose"  == sp.getId() ))
+    self.assertTrue((  "cell"     == sp.getCompartment() ))
+    self.assertTrue((  "volume"   == sp.getUnits() ))
+    self.assertTrue( sp.getInitialAmount() == 4.1 )
+    self.assertTrue( sp.getBoundaryCondition() == False )
+    self.assertTrue( sp.getCharge() == 6 )
+    self.assertTrue( sp.isSetInitialAmount() == True )
+    self.assertTrue( sp.isSetCharge() == True )
     pass  
 
   def test_ReadSBML_SpeciesConcentrationRule(self):
@@ -812,12 +812,12 @@ def test_ReadSBML_SpeciesConcentrationRule(self):
     "</listOfRules>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumRules() == 1 )
+    self.assertTrue( self.M.getNumRules() == 1 )
     scr = self.M.getRule(0)
     self.assertEqual( True, scr.isSpeciesConcentration() )
-    self.assert_((  "s2" == scr.getVariable() ))
-    self.assert_((  "k * t/(1 + k)"  == scr.getFormula() ))
-    self.assert_( scr.getType() == libsbml.RULE_TYPE_SCALAR )
+    self.assertTrue((  "s2" == scr.getVariable() ))
+    self.assertTrue((  "k * t/(1 + k)"  == scr.getFormula() ))
+    self.assertTrue( scr.getType() == libsbml.RULE_TYPE_SCALAR )
     pass  
 
   def test_ReadSBML_SpeciesReference_StoichiometryMath_1(self):
@@ -834,17 +834,17 @@ def test_ReadSBML_SpeciesReference_StoichiometryMath_1(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_( r != None )
-    self.assert_( r.getNumReactants() == 1 )
+    self.assertTrue( r != None )
+    self.assertTrue( r.getNumReactants() == 1 )
     sr = r.getReactant(0)
-    self.assert_( sr != None )
+    self.assertTrue( sr != None )
     self.assertEqual( True, sr.isSetStoichiometryMath() )
     math = sr.getStoichiometryMath()
     formula = libsbml.formulaToString(math.getMath())
-    self.assert_( formula != None )
-    self.assert_((  "x" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "x" == formula ))
     pass  
 
   def test_ReadSBML_SpeciesReference_StoichiometryMath_2(self):
@@ -861,15 +861,15 @@ def test_ReadSBML_SpeciesReference_StoichiometryMath_2(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_( r != None )
-    self.assert_( r.getNumReactants() == 1 )
+    self.assertTrue( r != None )
+    self.assertTrue( r.getNumReactants() == 1 )
     sr = r.getReactant(0)
-    self.assert_( sr != None )
+    self.assertTrue( sr != None )
     self.assertEqual( False, sr.isSetStoichiometryMath() )
-    self.assert_( sr.getStoichiometry() == 3 )
-    self.assert_( sr.getDenominator() == 2 )
+    self.assertTrue( sr.getStoichiometry() == 3 )
+    self.assertTrue( sr.getDenominator() == 2 )
     pass  
 
   def test_ReadSBML_SpeciesReference_defaults(self):
@@ -882,15 +882,15 @@ def test_ReadSBML_SpeciesReference_defaults(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumReactions() == 1 )
+    self.assertTrue( self.M.getNumReactions() == 1 )
     r = self.M.getReaction(0)
-    self.assert_((  "reaction_1" == r.getId() ))
-    self.assert_( r.getReversible() == False )
-    self.assert_( r.getNumReactants() == 1 )
+    self.assertTrue((  "reaction_1" == r.getId() ))
+    self.assertTrue( r.getReversible() == False )
+    self.assertTrue( r.getNumReactants() == 1 )
     sr = r.getReactant(0)
-    self.assert_((  "X0" == sr.getSpecies() ))
-    self.assert_( sr.getStoichiometry() == 1 )
-    self.assert_( sr.getDenominator() == 1 )
+    self.assertTrue((  "X0" == sr.getSpecies() ))
+    self.assertTrue( sr.getStoichiometry() == 1 )
+    self.assertTrue( sr.getDenominator() == 1 )
     pass  
 
   def test_ReadSBML_Species_L2_1(self):
@@ -901,7 +901,7 @@ def test_ReadSBML_Species_L2_1(self):
     "</listOfSpecies>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
     sp = self.M.getSpecies(0)
     self.assertEqual( True, sp.isSetId() )
     self.assertEqual( False, sp.isSetName() )
@@ -911,15 +911,15 @@ def test_ReadSBML_Species_L2_1(self):
     self.assertEqual( True, sp.isSetSubstanceUnits() )
     self.assertEqual( True, sp.isSetSpatialSizeUnits() )
     self.assertEqual( True, sp.isSetCharge() )
-    self.assert_((  "Glucose"  == sp.getId() ))
-    self.assert_((  "cell"     == sp.getCompartment() ))
-    self.assert_((  "item"     == sp.getSubstanceUnits() ))
-    self.assert_((  "volume"   == sp.getSpatialSizeUnits() ))
-    self.assert_( sp.getInitialConcentration() == 4.1 )
-    self.assert_( sp.getHasOnlySubstanceUnits() == False )
-    self.assert_( sp.getBoundaryCondition() == True )
-    self.assert_( sp.getCharge() == 6 )
-    self.assert_( sp.getConstant() == True )
+    self.assertTrue((  "Glucose"  == sp.getId() ))
+    self.assertTrue((  "cell"     == sp.getCompartment() ))
+    self.assertTrue((  "item"     == sp.getSubstanceUnits() ))
+    self.assertTrue((  "volume"   == sp.getSpatialSizeUnits() ))
+    self.assertTrue( sp.getInitialConcentration() == 4.1 )
+    self.assertTrue( sp.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( sp.getBoundaryCondition() == True )
+    self.assertTrue( sp.getCharge() == 6 )
+    self.assertTrue( sp.getConstant() == True )
     pass  
 
   def test_ReadSBML_Species_L2_2(self):
@@ -928,7 +928,7 @@ def test_ReadSBML_Species_L2_2(self):
     "</listOfSpecies>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
     sp = self.M.getSpecies(0)
     self.assertEqual( True, sp.isSetId() )
     self.assertEqual( False, sp.isSetName() )
@@ -938,11 +938,11 @@ def test_ReadSBML_Species_L2_2(self):
     self.assertEqual( False, sp.isSetSubstanceUnits() )
     self.assertEqual( False, sp.isSetSpatialSizeUnits() )
     self.assertEqual( False, sp.isSetCharge() )
-    self.assert_((  "s"  == sp.getId() ))
-    self.assert_((  "c"  == sp.getCompartment() ))
-    self.assert_( sp.getHasOnlySubstanceUnits() == True )
-    self.assert_( sp.getBoundaryCondition() == False )
-    self.assert_( sp.getConstant() == False )
+    self.assertTrue((  "s"  == sp.getId() ))
+    self.assertTrue((  "c"  == sp.getCompartment() ))
+    self.assertTrue( sp.getHasOnlySubstanceUnits() == True )
+    self.assertTrue( sp.getBoundaryCondition() == False )
+    self.assertTrue( sp.getConstant() == False )
     pass  
 
   def test_ReadSBML_Species_L2_defaults(self):
@@ -951,7 +951,7 @@ def test_ReadSBML_Species_L2_defaults(self):
     "</listOfSpecies>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumSpecies() == 1 )
+    self.assertTrue( self.M.getNumSpecies() == 1 )
     sp = self.M.getSpecies(0)
     self.assertEqual( True, sp.isSetId() )
     self.assertEqual( False, sp.isSetName() )
@@ -961,11 +961,11 @@ def test_ReadSBML_Species_L2_defaults(self):
     self.assertEqual( False, sp.isSetSubstanceUnits() )
     self.assertEqual( False, sp.isSetSpatialSizeUnits() )
     self.assertEqual( False, sp.isSetCharge() )
-    self.assert_((  "Glucose_6_P"  == sp.getId() ))
-    self.assert_((  "cell"         == sp.getCompartment() ))
-    self.assert_( sp.getHasOnlySubstanceUnits() == False )
-    self.assert_( sp.getBoundaryCondition() == False )
-    self.assert_( sp.getConstant() == False )
+    self.assertTrue((  "Glucose_6_P"  == sp.getId() ))
+    self.assertTrue((  "cell"         == sp.getCompartment() ))
+    self.assertTrue( sp.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( sp.getBoundaryCondition() == False )
+    self.assertTrue( sp.getConstant() == False )
     pass  
 
   def test_ReadSBML_Unit(self):
@@ -976,14 +976,14 @@ def test_ReadSBML_Unit(self):
     "</listOfUnitDefinitions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumUnitDefinitions() == 1 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 1 )
     ud = self.M.getUnitDefinition(0)
-    self.assert_((  "substance" == ud.getId() ))
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue((  "substance" == ud.getId() ))
+    self.assertTrue( ud.getNumUnits() == 1 )
     u = ud.getUnit(0)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( u.getExponent() == 1 )
-    self.assert_( u.getScale() == -3 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( u.getExponent() == 1 )
+    self.assertTrue( u.getScale() == -3 )
     pass  
 
   def test_ReadSBML_UnitDefinition(self):
@@ -992,9 +992,9 @@ def test_ReadSBML_UnitDefinition(self):
     "</listOfUnitDefinitions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumUnitDefinitions() == 1 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 1 )
     ud = self.M.getUnitDefinition(0)
-    self.assert_((  "mmls" == ud.getId() ))
+    self.assertTrue((  "mmls" == ud.getId() ))
     pass  
 
   def test_ReadSBML_UnitDefinition_L2(self):
@@ -1003,12 +1003,12 @@ def test_ReadSBML_UnitDefinition_L2(self):
     "</listOfUnitDefinitions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumUnitDefinitions() == 1 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 1 )
     ud = self.M.getUnitDefinition(0)
     self.assertEqual( True, ud.isSetId() )
     self.assertEqual( True, ud.isSetName() )
-    self.assert_((  "mmls" == ud.getId() ))
-    self.assert_((  "mmol/ls" == ud.getName() ))
+    self.assertTrue((  "mmls" == ud.getId() ))
+    self.assertTrue((  "mmol/ls" == ud.getName() ))
     pass  
 
   def test_ReadSBML_Unit_L2(self):
@@ -1021,17 +1021,17 @@ def test_ReadSBML_Unit_L2(self):
     "</listOfUnitDefinitions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumUnitDefinitions() == 1 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 1 )
     ud = self.M.getUnitDefinition(0)
     self.assertEqual( True, ud.isSetId() )
-    self.assert_((  "Fahrenheit" == ud.getId() ))
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue((  "Fahrenheit" == ud.getId() ))
+    self.assertTrue( ud.getNumUnits() == 1 )
     u = ud.getUnit(0)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_CELSIUS )
-    self.assert_( u.getExponent() == 1 )
-    self.assert_( u.getScale() == 0 )
-    self.assert_( u.getMultiplier() == 1.8 )
-    self.assert_( u.getOffset() == 32 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_CELSIUS )
+    self.assertTrue( u.getExponent() == 1 )
+    self.assertTrue( u.getScale() == 0 )
+    self.assertTrue( u.getMultiplier() == 1.8 )
+    self.assertTrue( u.getOffset() == 32 )
     pass  
 
   def test_ReadSBML_Unit_defaults_L1_L2(self):
@@ -1042,16 +1042,16 @@ def test_ReadSBML_Unit_defaults_L1_L2(self):
     "</listOfUnitDefinitions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNumUnitDefinitions() == 1 )
+    self.assertTrue( self.M.getNumUnitDefinitions() == 1 )
     ud = self.M.getUnitDefinition(0)
-    self.assert_((  "bogomips" == ud.getId() ))
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue((  "bogomips" == ud.getId() ))
+    self.assertTrue( ud.getNumUnits() == 1 )
     u = ud.getUnit(0)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_SECOND )
-    self.assert_( u.getExponent() == 1 )
-    self.assert_( u.getScale() == 0 )
-    self.assert_( u.getMultiplier() == 1.0 )
-    self.assert_( u.getOffset() == 0.0 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_SECOND )
+    self.assertTrue( u.getExponent() == 1 )
+    self.assertTrue( u.getScale() == 0 )
+    self.assertTrue( u.getMultiplier() == 1.0 )
+    self.assertTrue( u.getOffset() == 0.0 )
     pass  
 
   def test_ReadSBML_annotation(self):
@@ -1062,9 +1062,9 @@ def test_ReadSBML_annotation(self):
     "</annotation>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getAnnotation() != None )
+    self.assertTrue( self.M.getAnnotation() != None )
     ann = self.M.getAnnotation()
-    self.assert_( ann.getNumChildren() == 2 )
+    self.assertTrue( ann.getNumChildren() == 2 )
     pass  
 
   def test_ReadSBML_annotation_sbml(self):
@@ -1079,7 +1079,7 @@ def test_ReadSBML_annotation_sbml(self):
     "  </annotation>" + 
     "</sbml>")
     self.D = libsbml.readSBMLFromString(s)
-    self.assert_( self.D.getNumErrors() > 0 )
+    self.assertTrue( self.D.getNumErrors() > 0 )
     pass  
 
   def test_ReadSBML_annotation_sbml_L2(self):
@@ -1093,7 +1093,7 @@ def test_ReadSBML_annotation_sbml_L2(self):
     " </sbml>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.D.getNumErrors() == 0 )
+    self.assertTrue( self.D.getNumErrors() == 0 )
     pass  
 
   def test_ReadSBML_invalid_default_namespace(self):
@@ -1200,10 +1200,10 @@ def test_ReadSBML_invalid_default_namespace(self):
     "   </model>" + 
     " </sbml>")
     self.D = libsbml.readSBMLFromString(valid)
-    self.assert_( self.D.getNumErrors() == 0 )
+    self.assertTrue( self.D.getNumErrors() == 0 )
     _dummyList = [ self.D ]; _dummyList[:] = []; del _dummyList
     self.D = libsbml.readSBMLFromString(invalid)
-    self.assert_( self.D.getNumErrors() == 9 )
+    self.assertTrue( self.D.getNumErrors() == 9 )
     pass  
 
   def test_ReadSBML_line_col_numbers(self):
@@ -1217,7 +1217,7 @@ def test_ReadSBML_line_col_numbers(self):
     "</sbml>\n")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M != None )
+    self.assertTrue( self.M != None )
     sb = self.M
     sb = self.M.getListOfReactions()
     sb = self.M.getReaction(0)
@@ -1250,31 +1250,31 @@ def test_ReadSBML_metaid(self):
     "</listOfEvents>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M != None )
+    self.assertTrue( self.M != None )
     sb = self.M.getFunctionDefinition(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "fd" == sb.getMetaId() ))
+    self.assertTrue((  "fd" == sb.getMetaId() ))
     sb = self.M.getUnitDefinition(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "ud" == sb.getMetaId() ))
+    self.assertTrue((  "ud" == sb.getMetaId() ))
     sb = self.M.getCompartment(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "c" == sb.getMetaId() ))
+    self.assertTrue((  "c" == sb.getMetaId() ))
     sb = self.M.getSpecies(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "s" == sb.getMetaId() ))
+    self.assertTrue((  "s" == sb.getMetaId() ))
     sb = self.M.getParameter(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "p" == sb.getMetaId() ))
+    self.assertTrue((  "p" == sb.getMetaId() ))
     sb = self.M.getRule(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "rr" == sb.getMetaId() ))
+    self.assertTrue((  "rr" == sb.getMetaId() ))
     sb = self.M.getReaction(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "rx" == sb.getMetaId() ))
+    self.assertTrue((  "rx" == sb.getMetaId() ))
     sb = self.M.getEvent(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "e" == sb.getMetaId() ))
+    self.assertTrue((  "e" == sb.getMetaId() ))
     pass  
 
   def test_ReadSBML_metaid_Event(self):
@@ -1287,17 +1287,17 @@ def test_ReadSBML_metaid_Event(self):
     "</listOfEvents>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M != None )
+    self.assertTrue( self.M != None )
     e = self.M.getEvent(0)
     sb = e
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "e" == sb.getMetaId() ))
+    self.assertTrue((  "e" == sb.getMetaId() ))
     sb = e.getListOfEventAssignments()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "loea" == sb.getMetaId() ))
+    self.assertTrue((  "loea" == sb.getMetaId() ))
     sb = e.getEventAssignment(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "ea" == sb.getMetaId() ))
+    self.assertTrue((  "ea" == sb.getMetaId() ))
     pass  
 
   def test_ReadSBML_metaid_ListOf(self):
@@ -1311,31 +1311,31 @@ def test_ReadSBML_metaid_ListOf(self):
     "<listOfEvents              metaid='loe'/>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M != None )
+    self.assertTrue( self.M != None )
     sb = self.M.getListOfFunctionDefinitions()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "lofd" == sb.getMetaId() ))
+    self.assertTrue((  "lofd" == sb.getMetaId() ))
     sb = self.M.getListOfUnitDefinitions()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "loud" == sb.getMetaId() ))
+    self.assertTrue((  "loud" == sb.getMetaId() ))
     sb = self.M.getListOfCompartments()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "loc" == sb.getMetaId() ))
+    self.assertTrue((  "loc" == sb.getMetaId() ))
     sb = self.M.getListOfSpecies()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "los" == sb.getMetaId() ))
+    self.assertTrue((  "los" == sb.getMetaId() ))
     sb = self.M.getListOfParameters()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "lop" == sb.getMetaId() ))
+    self.assertTrue((  "lop" == sb.getMetaId() ))
     sb = self.M.getListOfRules()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "lor" == sb.getMetaId() ))
+    self.assertTrue((  "lor" == sb.getMetaId() ))
     sb = self.M.getListOfReactions()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "lorx" == sb.getMetaId() ))
+    self.assertTrue((  "lorx" == sb.getMetaId() ))
     sb = self.M.getListOfEvents()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "loe" == sb.getMetaId() ))
+    self.assertTrue((  "loe" == sb.getMetaId() ))
     pass  
 
   def test_ReadSBML_metaid_Reaction(self):
@@ -1355,32 +1355,32 @@ def test_ReadSBML_metaid_Reaction(self):
     "</listOfReactions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M != None )
+    self.assertTrue( self.M != None )
     r = self.M.getReaction(0)
     sb = r
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "r" == sb.getMetaId() ))
+    self.assertTrue((  "r" == sb.getMetaId() ))
     sb = r.getListOfReactants()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "lor" == sb.getMetaId() ))
+    self.assertTrue((  "lor" == sb.getMetaId() ))
     sb = r.getReactant(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "sr1" == sb.getMetaId() ))
+    self.assertTrue((  "sr1" == sb.getMetaId() ))
     sb = r.getListOfProducts()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "lop" == sb.getMetaId() ))
+    self.assertTrue((  "lop" == sb.getMetaId() ))
     sb = r.getProduct(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "sr2" == sb.getMetaId() ))
+    self.assertTrue((  "sr2" == sb.getMetaId() ))
     sb = r.getListOfModifiers()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "lom" == sb.getMetaId() ))
+    self.assertTrue((  "lom" == sb.getMetaId() ))
     sb = r.getModifier(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "msr" == sb.getMetaId() ))
+    self.assertTrue((  "msr" == sb.getMetaId() ))
     sb = r.getKineticLaw()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "kl" == sb.getMetaId() ))
+    self.assertTrue((  "kl" == sb.getMetaId() ))
     pass  
 
   def test_ReadSBML_metaid_Unit(self):
@@ -1393,17 +1393,17 @@ def test_ReadSBML_metaid_Unit(self):
     "</listOfUnitDefinitions>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M != None )
+    self.assertTrue( self.M != None )
     ud = self.M.getUnitDefinition(0)
     sb = ud
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "ud" == sb.getMetaId() ))
+    self.assertTrue((  "ud" == sb.getMetaId() ))
     sb = ud.getListOfUnits()
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "lou" == sb.getMetaId() ))
+    self.assertTrue((  "lou" == sb.getMetaId() ))
     sb = ud.getUnit(0)
     self.assertEqual( True, sb.isSetMetaId() )
-    self.assert_((  "u" == sb.getMetaId() ))
+    self.assertTrue((  "u" == sb.getMetaId() ))
     pass  
 
   def test_ReadSBML_notes(self):
@@ -1421,9 +1421,9 @@ def test_ReadSBML_notes(self):
     self.M = self.D.getModel()
     r = self.M.getReaction(0)
     kl = r.getKineticLaw()
-    self.assert_( kl.getNotes() != None )
+    self.assertTrue( kl.getNotes() != None )
     notes = kl.getNotes().getChild(0).getCharacters()
-    self.assert_( (  "This is a test note." != notes ) == False )
+    self.assertTrue( (  "This is a test note." != notes ) == False )
     pass  
 
   def test_ReadSBML_notes_ListOf(self):
@@ -1441,19 +1441,19 @@ def test_ReadSBML_notes_ListOf(self):
     "</listOfCompartments>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M != None )
+    self.assertTrue( self.M != None )
     sb = self.M.getListOfFunctionDefinitions()
     self.assertEqual( True, sb.isSetNotes() )
     notes = sb.getNotes().getChild(0).getCharacters()
-    self.assert_( (  "My Functions" != notes ) == False )
+    self.assertTrue( (  "My Functions" != notes ) == False )
     sb = self.M.getListOfUnitDefinitions()
     self.assertEqual( True, sb.isSetNotes() )
     notes = sb.getNotes().getChild(0).getCharacters()
-    self.assert_( (  "My Units" != notes ) == False )
+    self.assertTrue( (  "My Units" != notes ) == False )
     sb = self.M.getListOfCompartments()
     self.assertEqual( True, sb.isSetNotes() )
     notes = sb.getNotes().getChild(0).getCharacters()
-    self.assert_( (  "My Compartments" != notes ) == False )
+    self.assertTrue( (  "My Compartments" != notes ) == False )
     pass  
 
   def test_ReadSBML_notes_sbml(self):
@@ -1461,10 +1461,10 @@ def test_ReadSBML_notes_sbml(self):
     "  <notes>Notes are not allowed as part of the SBML element.</notes>" + 
     "</sbml>")
     self.D = libsbml.readSBMLFromString(s)
-    self.assert_( self.D.getNotes() != None )
+    self.assertTrue( self.D.getNotes() != None )
     notes = self.D.getNotes().getChild(0).getCharacters()
-    self.assert_( (  "Notes are not allowed as part of the SBML element." != notes ) == False )
-    self.assert_( self.D.getNumErrors() > 0 )
+    self.assertTrue( (  "Notes are not allowed as part of the SBML element." != notes ) == False )
+    self.assertTrue( self.D.getNumErrors() > 0 )
     pass  
 
   def test_ReadSBML_notes_sbml_L2(self):
@@ -1477,8 +1477,8 @@ def test_ReadSBML_notes_sbml_L2(self):
     "   </model>" + 
     " </sbml>")
     self.D = libsbml.readSBMLFromString(s)
-    self.assert_( self.D.getNotes() != None )
-    self.assert_( self.D.getNumErrors() == 0 )
+    self.assertTrue( self.D.getNotes() != None )
+    self.assertTrue( self.D.getNumErrors() == 0 )
     pass  
 
   def test_ReadSBML_notes_xmlns(self):
@@ -1487,12 +1487,12 @@ def test_ReadSBML_notes_xmlns(self):
     "</notes>")
     self.D = libsbml.readSBMLFromString(s)
     self.M = self.D.getModel()
-    self.assert_( self.M.getNotes() != None )
+    self.assertTrue( self.M.getNotes() != None )
     ns = self.M.getNotes().getChild(0).getNamespaces()
-    self.assert_( ns.getLength() == 1 )
-    self.assert_((  "http://www.w3.org/1999/xhtml" == ns.getURI(0) ))
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue((  "http://www.w3.org/1999/xhtml" == ns.getURI(0) ))
     notes = self.M.getNotes().getChild(0).getChild(0).getCharacters()
-    self.assert_( (  "Some text." != notes ) == False )
+    self.assertTrue( (  "Some text." != notes ) == False )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestRule.py b/src/bindings/python/test/sbml/TestRule.py
index 99726ae997..ee090eba5e 100644
--- a/src/bindings/python/test/sbml/TestRule.py
+++ b/src/bindings/python/test/sbml/TestRule.py
@@ -50,25 +50,25 @@ def tearDown(self):
     pass  
 
   def test_Rule_init(self):
-    self.assert_( self.R.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
-    self.assert_( self.R.getMetaId() == "" )
-    self.assert_( self.R.getNotes() == None )
-    self.assert_( self.R.getAnnotation() == None )
-    self.assert_( self.R.getFormula() == "" )
-    self.assert_( self.R.getMath() == None )
+    self.assertTrue( self.R.getTypeCode() == libsbml.SBML_ALGEBRAIC_RULE )
+    self.assertTrue( self.R.getMetaId() == "" )
+    self.assertTrue( self.R.getNotes() == None )
+    self.assertTrue( self.R.getAnnotation() == None )
+    self.assertTrue( self.R.getFormula() == "" )
+    self.assertTrue( self.R.getMath() == None )
     pass  
 
   def test_Rule_setFormula(self):
     formula =  "k1*X0";
     self.R.setFormula(formula)
-    self.assert_(( formula == self.R.getFormula() ))
-    self.assert_( self.R.isSetFormula() == True )
+    self.assertTrue(( formula == self.R.getFormula() ))
+    self.assertTrue( self.R.isSetFormula() == True )
     if (self.R.getFormula() == formula):
       pass    
     self.R.setFormula(self.R.getFormula())
-    self.assert_(( formula == self.R.getFormula() ))
+    self.assertTrue(( formula == self.R.getFormula() ))
     self.R.setFormula( "")
-    self.assert_( self.R.isSetFormula() == False )
+    self.assertTrue( self.R.isSetFormula() == False )
     if (self.R.getFormula() != None):
       pass    
     pass  
@@ -76,10 +76,10 @@ def test_Rule_setFormula(self):
   def test_Rule_setMath(self):
     math = libsbml.parseFormula("1 + 1")
     self.R.setMath(math)
-    self.assert_( self.R.getMath() != math )
+    self.assertTrue( self.R.getMath() != math )
     self.assertEqual( True, self.R.isSetMath() )
     self.R.setMath(self.R.getMath())
-    self.assert_( self.R.getMath() != math )
+    self.assertTrue( self.R.getMath() != math )
     self.R.setMath(None)
     self.assertEqual( False, self.R.isSetMath() )
     if (self.R.getMath() != None):
diff --git a/src/bindings/python/test/sbml/TestRule_newSetters.py b/src/bindings/python/test/sbml/TestRule_newSetters.py
index 9776575556..c3f6913dd5 100644
--- a/src/bindings/python/test/sbml/TestRule_newSetters.py
+++ b/src/bindings/python/test/sbml/TestRule_newSetters.py
@@ -52,21 +52,21 @@ def tearDown(self):
   def test_Rule_setFormula1(self):
     formula =  "k1*X0";
     i = self.R.setFormula(formula)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_(( formula == self.R.getFormula() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue(( formula == self.R.getFormula() ))
     self.assertEqual( True, self.R.isSetFormula() )
     pass  
 
   def test_Rule_setFormula2(self):
     i = self.R.setFormula("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.R.isSetFormula() )
     pass  
 
   def test_Rule_setFormula3(self):
     formula =  "k1 X0";
     i = self.R.setFormula(formula)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.R.isSetFormula() )
     pass  
 
@@ -79,13 +79,13 @@ def test_Rule_setMath1(self):
     math.addChild(a)
     math.addChild(b)
     i = self.R.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.R.isSetMath() )
     math1 = self.R.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "a * b" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "a * b" == formula ))
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -95,20 +95,20 @@ def test_Rule_setMath2(self):
     a.setName( "a")
     math.addChild(a)
     i = self.R.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.R.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Rule_setMath3(self):
     i = self.R.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.R.isSetMath() )
     pass  
 
   def test_Rule_setUnits1(self):
     i = self.R.setUnits( "second")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.R.isSetUnits() )
     pass  
 
@@ -116,10 +116,10 @@ def test_Rule_setUnits2(self):
     R1 = libsbml.AssignmentRule(1,2)
     R1.setL1TypeCode(libsbml.SBML_PARAMETER_RULE)
     i = R1.setUnits( "second")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, R1.isSetUnits() )
     i = R1.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, R1.isSetUnits() )
     _dummyList = [ R1 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -128,10 +128,10 @@ def test_Rule_setUnits3(self):
     R1 = libsbml.AssignmentRule(1,2)
     R1.setL1TypeCode(libsbml.SBML_PARAMETER_RULE)
     i = R1.setUnits( "1second")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, R1.isSetUnits() )
     i = R1.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, R1.isSetUnits() )
     _dummyList = [ R1 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -140,33 +140,33 @@ def test_Rule_setUnits4(self):
     R1 = libsbml.AssignmentRule(1,2)
     R1.setL1TypeCode(libsbml.SBML_PARAMETER_RULE)
     i = R1.setUnits( "second")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, R1.isSetUnits() )
     i = R1.setUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, R1.isSetUnits() )
     _dummyList = [ R1 ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Rule_setVariable1(self):
     i = self.R.setVariable( "1mole")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.R.isSetVariable() )
     pass  
 
   def test_Rule_setVariable2(self):
     i = self.R.setVariable( "mole")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.R.isSetVariable() )
     i = self.R.setVariable( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.R.isSetVariable() )
     pass  
 
   def test_Rule_setVariable3(self):
     R1 = libsbml.AlgebraicRule(1,2)
     i = R1.setVariable( "r")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, R1.isSetVariable() )
     _dummyList = [ R1 ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestSBMLConstructorException.py b/src/bindings/python/test/sbml/TestSBMLConstructorException.py
index 5d0d8a992b..6040e71a65 100644
--- a/src/bindings/python/test/sbml/TestSBMLConstructorException.py
+++ b/src/bindings/python/test/sbml/TestSBMLConstructorException.py
@@ -46,7 +46,7 @@ def test_CompartmentType_constructor(self):
     except ValueError:
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
 
@@ -142,7 +142,7 @@ def test_Compartment_constructor(self):
     except ValueError:
        s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     
@@ -179,7 +179,7 @@ def test_Constraint_constructor(self):
     except ValueError:
        s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
 
@@ -270,7 +270,7 @@ def test_InitialAssignment_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -366,7 +366,7 @@ def test_Species_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 	
     msg = ""
     
@@ -402,7 +402,7 @@ def test_SpeciesType_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -494,7 +494,7 @@ def test_Delay_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -567,7 +567,7 @@ def test_Trigger_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -640,7 +640,7 @@ def test_Event_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -713,7 +713,7 @@ def test_EventAssignment_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -786,7 +786,7 @@ def test_ModifierSpeciesReference_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -857,7 +857,7 @@ def test_StoichiometryMath_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -934,7 +934,7 @@ def test_SpeciesReference_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     
@@ -973,7 +973,7 @@ def test_FunctionDefinition_constructor(self):
     except ValueError:
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     try:
@@ -1050,7 +1050,7 @@ def test_KineticLaw_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     
@@ -1094,7 +1094,7 @@ def test_Model_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     
@@ -1138,7 +1138,7 @@ def test_Parameter_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     
@@ -1182,7 +1182,7 @@ def test_Reaction_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     
@@ -1226,7 +1226,7 @@ def test_Unit_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     
@@ -1270,7 +1270,7 @@ def test_UnitDefinition_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
     
@@ -1314,7 +1314,7 @@ def test_AssignmentRule_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
 
@@ -1358,7 +1358,7 @@ def test_AlgebraicRule_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
 
@@ -1402,7 +1402,7 @@ def test_RateRule_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
 
@@ -1434,7 +1434,7 @@ def test_Priority_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
 
@@ -1466,7 +1466,7 @@ def test_LocalParameter_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
 
@@ -1498,7 +1498,7 @@ def test_SBMLNamespaces_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
   pass
   
   def test_SBMLDocument_constructor(self):
@@ -1522,7 +1522,7 @@ def test_SBMLDocument_constructor(self):
       inst = sys.exc_info()[1]
       s = None
     pass
-    self.assert_(s != None)
+    self.assertTrue(s != None)
 
     msg = ""
 
diff --git a/src/bindings/python/test/sbml/TestSBMLConvert.py b/src/bindings/python/test/sbml/TestSBMLConvert.py
index 115381851b..ce8376d0b4 100644
--- a/src/bindings/python/test/sbml/TestSBMLConvert.py
+++ b/src/bindings/python/test/sbml/TestSBMLConvert.py
@@ -59,15 +59,15 @@ def test_SBMLConvert_addModifiersToReaction(self):
     sr1.setSpecies( "S1")
     sr2.setSpecies( "S2")
     sr3.setSpecies( "S5")
-    self.assert_( r.getNumModifiers() == 0 )
-    self.assert_( d.setLevelAndVersion(2,1,False) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 1 )
-    self.assert_( m.getReaction(0).getNumModifiers() == 2 )
+    self.assertTrue( r.getNumModifiers() == 0 )
+    self.assertTrue( d.setLevelAndVersion(2,1,False) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 1 )
+    self.assertTrue( m.getReaction(0).getNumModifiers() == 2 )
     ssr1 = m.getReaction(0).getModifier(0)
     ssr2 = m.getReaction(0).getModifier(1)
-    self.assert_((  "S3" == ssr1.getSpecies() ))
-    self.assert_((  "S4" == ssr2.getSpecies() ))
+    self.assertTrue((  "S3" == ssr1.getSpecies() ))
+    self.assertTrue((  "S4" == ssr2.getSpecies() ))
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -80,13 +80,13 @@ def test_SBMLConvert_convertFromL3(self):
     c.setSize(1.2)
     c.setConstant(True)
     c.setSpatialDimensions(3.4)
-    self.assert_( d.setLevelAndVersion(1,1,True) == False )
-    self.assert_( d.setLevelAndVersion(1,2,True) == False )
-    self.assert_( d.setLevelAndVersion(2,1,True) == False )
-    self.assert_( d.setLevelAndVersion(2,2,True) == False )
-    self.assert_( d.setLevelAndVersion(2,3,True) == False )
-    self.assert_( d.setLevelAndVersion(2,4,True) == False )
-    self.assert_( d.setLevelAndVersion(3,1,True) == True )
+    self.assertTrue( d.setLevelAndVersion(1,1,True) == False )
+    self.assertTrue( d.setLevelAndVersion(1,2,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,1,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,2,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,3,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,4,True) == False )
+    self.assertTrue( d.setLevelAndVersion(3,1,True) == True )
     pass  
 
   def test_SBMLConvert_convertFromL3_conversionFactor(self):
@@ -97,13 +97,13 @@ def test_SBMLConvert_convertFromL3_conversionFactor(self):
     c = m.createParameter()
     c.setId(sid)
     c.setConstant(True)
-    self.assert_( d.setLevelAndVersion(1,1,True) == False )
-    self.assert_( d.setLevelAndVersion(1,2,True) == False )
-    self.assert_( d.setLevelAndVersion(2,1,True) == False )
-    self.assert_( d.setLevelAndVersion(2,2,True) == False )
-    self.assert_( d.setLevelAndVersion(2,3,True) == False )
-    self.assert_( d.setLevelAndVersion(2,4,True) == False )
-    self.assert_( d.setLevelAndVersion(3,1,True) == True )
+    self.assertTrue( d.setLevelAndVersion(1,1,True) == False )
+    self.assertTrue( d.setLevelAndVersion(1,2,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,1,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,2,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,3,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,4,True) == False )
+    self.assertTrue( d.setLevelAndVersion(3,1,True) == True )
     pass  
 
   def test_SBMLConvert_convertFromL3_initialValue(self):
@@ -112,27 +112,27 @@ def test_SBMLConvert_convertFromL3_initialValue(self):
     e = m.createEvent()
     t = e.createTrigger()
     t.setInitialValue(False)
-    self.assert_( d.setLevelAndVersion(1,1,False) == False )
-    self.assert_( d.setLevelAndVersion(1,2,False) == True )
-    self.assert_( d.setLevelAndVersion(2,1,False) == True )
-    self.assert_( d.setLevelAndVersion(2,2,False) == True )
-    self.assert_( d.setLevelAndVersion(2,3,False) == True )
-    self.assert_( d.setLevelAndVersion(2,4,False) == True )
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,1,False) == False )
+    self.assertTrue( d.setLevelAndVersion(1,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,3,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,4,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     pass  
 
   def test_SBMLConvert_convertFromL3_modelUnits(self):
     d = libsbml.SBMLDocument(3,1)
     m = d.createModel()
     m.setVolumeUnits( "litre")
-    self.assert_( m.getNumUnitDefinitions() == 0 )
-    self.assert_( d.setLevelAndVersion(2,4,False) == True )
+    self.assertTrue( m.getNumUnitDefinitions() == 0 )
+    self.assertTrue( d.setLevelAndVersion(2,4,False) == True )
     m = d.getModel()
-    self.assert_( m.getNumUnitDefinitions() == 1 )
+    self.assertTrue( m.getNumUnitDefinitions() == 1 )
     ud = m.getUnitDefinition(0)
-    self.assert_((  "volume" == ud.getId() ))
-    self.assert_( ud.getNumUnits() == 1 )
-    self.assert_( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue((  "volume" == ud.getId() ))
+    self.assertTrue( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE )
     pass  
 
   def test_SBMLConvert_convertFromL3_persistent(self):
@@ -141,13 +141,13 @@ def test_SBMLConvert_convertFromL3_persistent(self):
     e = m.createEvent()
     t = e.createTrigger()
     t.setPersistent(False)
-    self.assert_( d.setLevelAndVersion(1,1,False) == False )
-    self.assert_( d.setLevelAndVersion(1,2,False) == True )
-    self.assert_( d.setLevelAndVersion(2,1,False) == True )
-    self.assert_( d.setLevelAndVersion(2,2,False) == True )
-    self.assert_( d.setLevelAndVersion(2,3,False) == True )
-    self.assert_( d.setLevelAndVersion(2,4,False) == True )
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,1,False) == False )
+    self.assertTrue( d.setLevelAndVersion(1,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,3,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,4,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     pass  
 
   def test_SBMLConvert_convertFromL3_priority(self):
@@ -155,20 +155,20 @@ def test_SBMLConvert_convertFromL3_priority(self):
     m = d.createModel()
     e = m.createEvent()
     p = e.createPriority()
-    self.assert_( d.setLevelAndVersion(1,1,False) == False )
-    self.assert_( d.setLevelAndVersion(1,2,False) == True )
-    self.assert_( d.setLevelAndVersion(2,1,False) == True )
-    self.assert_( d.setLevelAndVersion(2,2,False) == True )
-    self.assert_( d.setLevelAndVersion(2,3,False) == True )
-    self.assert_( d.setLevelAndVersion(2,4,False) == True )
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,1,False) == False )
+    self.assertTrue( d.setLevelAndVersion(1,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,3,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,4,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     pass  
 
   def test_SBMLConvert_convertToL1_SBMLDocument(self):
     d = libsbml.SBMLDocument(2,1)
-    self.assert_( d.setLevelAndVersion(1,2,False) == True )
-    self.assert_( d.getLevel() == 1 )
-    self.assert_( d.getVersion() == 2 )
+    self.assertTrue( d.setLevelAndVersion(1,2,False) == True )
+    self.assertTrue( d.getLevel() == 1 )
+    self.assertTrue( d.getVersion() == 2 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -183,8 +183,8 @@ def test_SBMLConvert_convertToL1_Species_Amount(self):
     s.setCompartment(sid)
     s.setInitialAmount(2.34)
     m.addSpecies(s)
-    self.assert_( d.setLevelAndVersion(1,2,True) == True )
-    self.assert_( s.getInitialAmount() == 2.34 )
+    self.assertTrue( d.setLevelAndVersion(1,2,True) == True )
+    self.assertTrue( s.getInitialAmount() == 2.34 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -201,27 +201,27 @@ def test_SBMLConvert_convertToL1_Species_Concentration(self):
     s.setCompartment(sid)
     s.setInitialConcentration(2.34)
     m.addSpecies(s)
-    self.assert_( d.setLevelAndVersion(1,2,True) == True )
+    self.assertTrue( d.setLevelAndVersion(1,2,True) == True )
     s1 = m.getSpecies(0)
-    self.assert_( s1 != None )
-    self.assert_((  "C" == s1.getCompartment() ))
-    self.assert_( m.getCompartment( "C").getSize() == 1.2 )
-    self.assert_( s1.getInitialConcentration() == 2.34 )
-    self.assert_( s1.isSetInitialConcentration() == True )
+    self.assertTrue( s1 != None )
+    self.assertTrue((  "C" == s1.getCompartment() ))
+    self.assertTrue( m.getCompartment( "C").getSize() == 1.2 )
+    self.assertTrue( s1.getInitialConcentration() == 2.34 )
+    self.assertTrue( s1.isSetInitialConcentration() == True )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBMLConvert_convertToL2_SBMLDocument(self):
     d = libsbml.SBMLDocument(1,2)
-    self.assert_( d.setLevelAndVersion(2,1,False) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 1 )
-    self.assert_( d.setLevelAndVersion(2,2,False) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 2 )
-    self.assert_( d.setLevelAndVersion(2,3,False) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 3 )
+    self.assertTrue( d.setLevelAndVersion(2,1,False) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 1 )
+    self.assertTrue( d.setLevelAndVersion(2,2,False) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 2 )
+    self.assertTrue( d.setLevelAndVersion(2,3,False) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 3 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -230,13 +230,13 @@ def test_SBMLConvert_convertToL2v4_DuplicateAnnotations_doc(self):
     d.createModel()
     annotation =  "<rdf/>\n<rdf/>";
     i = (d).setAnnotation(annotation)
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 1 )
-    self.assert_( (d).getAnnotation().getNumChildren() == 2 )
-    self.assert_( d.setLevelAndVersion(2,4,True) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
-    self.assert_( (d).getAnnotation().getNumChildren() == 1 )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 1 )
+    self.assertTrue( (d).getAnnotation().getNumChildren() == 2 )
+    self.assertTrue( d.setLevelAndVersion(2,4,True) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
+    self.assertTrue( (d).getAnnotation().getNumChildren() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -245,14 +245,14 @@ def test_SBMLConvert_convertToL2v4_DuplicateAnnotations_model(self):
     m = d.createModel()
     annotation =  "<rdf/>\n<rdf/>";
     i = (m).setAnnotation(annotation)
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 1 )
-    self.assert_( (m).getAnnotation().getNumChildren() == 2 )
-    self.assert_( d.setLevelAndVersion(2,4,True) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 1 )
+    self.assertTrue( (m).getAnnotation().getNumChildren() == 2 )
+    self.assertTrue( d.setLevelAndVersion(2,4,True) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
     m = d.getModel()
-    self.assert_( (m).getAnnotation().getNumChildren() == 1 )
+    self.assertTrue( (m).getAnnotation().getNumChildren() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -262,9 +262,9 @@ def test_SBMLConvert_convertToL3_compartment(self):
     sid =  "C";
     c = m.createCompartment()
     c.setId(sid)
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     c1 = m.getCompartment(0)
-    self.assert_( c1.hasRequiredAttributes() == 1 )
+    self.assertTrue( c1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -276,28 +276,28 @@ def test_SBMLConvert_convertToL3_defaultUnits(self):
     c.setId(sid)
     c.setSize(1.2)
     c.setUnits( "volume")
-    self.assert_( m.getNumUnitDefinitions() == 0 )
-    self.assert_( d.setLevelAndVersion(3,1,True) == True )
-    self.assert_( m.getNumUnitDefinitions() == 2 )
+    self.assertTrue( m.getNumUnitDefinitions() == 0 )
+    self.assertTrue( d.setLevelAndVersion(3,1,True) == True )
+    self.assertTrue( m.getNumUnitDefinitions() == 2 )
     ud = m.getUnitDefinition(0)
-    self.assert_( ud != None )
-    self.assert_((  "volume" == ud.getId() ))
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud != None )
+    self.assertTrue((  "volume" == ud.getId() ))
+    self.assertTrue( ud.getNumUnits() == 1 )
     u = ud.getUnit(0)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( u.getExponent() == 1 )
-    self.assert_( u.getMultiplier() == 1 )
-    self.assert_( u.getScale() == 0 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( u.getExponent() == 1 )
+    self.assertTrue( u.getMultiplier() == 1 )
+    self.assertTrue( u.getScale() == 0 )
     ud = m.getUnitDefinition(1)
-    self.assert_( ud != None )
-    self.assert_((  "area" == ud.getId() ))
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud != None )
+    self.assertTrue((  "area" == ud.getId() ))
+    self.assertTrue( ud.getNumUnits() == 1 )
     u = ud.getUnit(0)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_METRE )
-    self.assert_( u.getExponent() == 2 )
-    self.assert_( u.getMultiplier() == 1 )
-    self.assert_( u.getScale() == 0 )
-    self.assert_((  "second" == m.getTimeUnits() ))
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_METRE )
+    self.assertTrue( u.getExponent() == 2 )
+    self.assertTrue( u.getMultiplier() == 1 )
+    self.assertTrue( u.getScale() == 0 )
+    self.assertTrue((  "second" == m.getTimeUnits() ))
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -305,9 +305,9 @@ def test_SBMLConvert_convertToL3_event(self):
     d = libsbml.SBMLDocument(2,2)
     m = d.createModel()
     e = m.createEvent()
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     e1 = m.getEvent(0)
-    self.assert_( e1.hasRequiredAttributes() == 1 )
+    self.assertTrue( e1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -326,12 +326,12 @@ def test_SBMLConvert_convertToL3_localParameters(self):
     kl.setFormula( "s*k")
     p = kl.createParameter()
     p.setId( "k")
-    self.assert_( kl.getNumLocalParameters() == 0 )
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( kl.getNumLocalParameters() == 0 )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     m = d.getModel()
     r = m.getReaction(0)
     kl = r.getKineticLaw()
-    self.assert_( kl.getNumLocalParameters() == 1 )
+    self.assertTrue( kl.getNumLocalParameters() == 1 )
     lp = kl.getLocalParameter(0)
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -342,9 +342,9 @@ def test_SBMLConvert_convertToL3_parameter(self):
     sid =  "C";
     p = m.createParameter()
     p.setId(sid)
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     p1 = m.getParameter(0)
-    self.assert_( p1.hasRequiredAttributes() == 1 )
+    self.assertTrue( p1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -354,9 +354,9 @@ def test_SBMLConvert_convertToL3_product(self):
     r = m.createReaction()
     sr = r.createProduct()
     sr.setSpecies( "s" )
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     sr1 = m.getReaction(0).getProduct(0)
-    self.assert_( sr1.hasRequiredAttributes() == 1 )
+    self.assertTrue( sr1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -366,9 +366,9 @@ def test_SBMLConvert_convertToL3_reactant(self):
     r = m.createReaction()
     sr = r.createReactant()
     sr.setSpecies( "s" )
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     sr1 = m.getReaction(0).getReactant(0)
-    self.assert_( sr1.hasRequiredAttributes() == 1 )
+    self.assertTrue( sr1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -378,9 +378,9 @@ def test_SBMLConvert_convertToL3_reaction(self):
     sid =  "C";
     r = m.createReaction()
     r.setId(sid)
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     r1 = m.getReaction(0)
-    self.assert_( r1.hasRequiredAttributes() == 1 )
+    self.assertTrue( r1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -391,9 +391,9 @@ def test_SBMLConvert_convertToL3_species(self):
     s = m.createSpecies()
     s.setId(sid)
     s.setCompartment( "comp")
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     s1 = m.getSpecies(0)
-    self.assert_( s1.hasRequiredAttributes() == 1 )
+    self.assertTrue( s1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -411,16 +411,16 @@ def test_SBMLConvert_convertToL3_stoichiometryMath(self):
     sm = sr.createStoichiometryMath()
     ast = libsbml.parseFormula("c*2")
     sm.setMath(ast)
-    self.assert_( m.getNumRules() == 0 )
-    self.assert_( sr.isSetId() == False )
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( m.getNumRules() == 0 )
+    self.assertTrue( sr.isSetId() == False )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     m = d.getModel()
     r = m.getReaction(0)
     sr = r.getReactant(0)
-    self.assert_( m.getNumRules() == 1 )
-    self.assert_( sr.isSetId() == True )
+    self.assertTrue( m.getNumRules() == 1 )
+    self.assertTrue( sr.isSetId() == True )
     rule = m.getRule(0)
-    self.assert_( sr.getId() == rule.getVariable() )
+    self.assertTrue( sr.getId() == rule.getVariable() )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -429,9 +429,9 @@ def test_SBMLConvert_convertToL3_trigger(self):
     m = d.createModel()
     e = m.createEvent()
     t = e.createTrigger()
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     t1 = m.getEvent(0).getTrigger()
-    self.assert_( t1.hasRequiredAttributes() == 1 )
+    self.assertTrue( t1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -443,9 +443,9 @@ def test_SBMLConvert_convertToL3_unit(self):
     ud.setId(sid)
     u = ud.createUnit()
     u.setKind(libsbml.UNIT_KIND_MOLE)
-    self.assert_( d.setLevelAndVersion(3,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(3,1,False) == True )
     u1 = m.getUnitDefinition(0).getUnit(0)
-    self.assert_( u1.hasRequiredAttributes() == 1 )
+    self.assertTrue( u1.hasRequiredAttributes() == 1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -457,10 +457,10 @@ def test_SBMLConvert_invalidLevelVersion(self):
     c.setId(sid)
     c.setSize(1.2)
     c.setUnits( "volume")
-    self.assert_( d.setLevelAndVersion(1,3,True) == False )
-    self.assert_( d.setLevelAndVersion(2,7,True) == False )
-    self.assert_( d.setLevelAndVersion(3,5,True) == False )
-    self.assert_( d.setLevelAndVersion(4,1,True) == False )
+    self.assertTrue( d.setLevelAndVersion(1,3,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,7,True) == False )
+    self.assertTrue( d.setLevelAndVersion(3,5,True) == False )
+    self.assertTrue( d.setLevelAndVersion(4,1,True) == False )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestSBMLConvertStrict.py b/src/bindings/python/test/sbml/TestSBMLConvertStrict.py
index bc1c0ce3de..18bdfbc973 100644
--- a/src/bindings/python/test/sbml/TestSBMLConvertStrict.py
+++ b/src/bindings/python/test/sbml/TestSBMLConvertStrict.py
@@ -52,11 +52,11 @@ def test_SBMLConvertStrict_convertL1ParamRule(self):
     ar.setVariable( "p1")
     ar.setMath(math)
     ar.setUnits( "mole")
-    self.assert_( d.setLevelAndVersion(2,1,True) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 1 )
+    self.assertTrue( d.setLevelAndVersion(2,1,True) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 1 )
     r1 = d.getModel().getRule(0)
-    self.assert_( r1.getUnits() == "" )
+    self.assertTrue( r1.getUnits() == "" )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -67,22 +67,22 @@ def test_SBMLConvertStrict_convertNonStrictSBO(self):
     c.setId( "c")
     c.setConstant(False)
     (c).setSBOTerm(64)
-    self.assert_( d.setLevelAndVersion(2,3,True) == False )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
-    self.assert_( d.setLevelAndVersion(2,2,True) == False )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
-    self.assert_( d.setLevelAndVersion(2,1,True) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 1 )
+    self.assertTrue( d.setLevelAndVersion(2,3,True) == False )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
+    self.assertTrue( d.setLevelAndVersion(2,2,True) == False )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
+    self.assertTrue( d.setLevelAndVersion(2,1,True) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 1 )
     c1 = d.getModel().getCompartment(0)
-    self.assert_( (c1).getSBOTerm() == -1 )
-    self.assert_( d.setLevelAndVersion(1,2,True) == True )
-    self.assert_( d.getLevel() == 1 )
-    self.assert_( d.getVersion() == 2 )
+    self.assertTrue( (c1).getSBOTerm() == -1 )
+    self.assertTrue( d.setLevelAndVersion(1,2,True) == True )
+    self.assertTrue( d.getLevel() == 1 )
+    self.assertTrue( d.getVersion() == 2 )
     c2 = d.getModel().getCompartment(0)
-    self.assert_( (c2).getSBOTerm() == -1 )
+    self.assertTrue( (c2).getSBOTerm() == -1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -99,18 +99,18 @@ def test_SBMLConvertStrict_convertNonStrictUnits(self):
     ar = m.createAssignmentRule()
     ar.setVariable( "c")
     ar.setMath(math)
-    self.assert_( d.setLevelAndVersion(2,1,True) == False )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
-    self.assert_( d.setLevelAndVersion(2,2,True) == False )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
-    self.assert_( d.setLevelAndVersion(2,3,True) == False )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
-    self.assert_( d.setLevelAndVersion(1,2,True) == False )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 4 )
+    self.assertTrue( d.setLevelAndVersion(2,1,True) == False )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
+    self.assertTrue( d.setLevelAndVersion(2,2,True) == False )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
+    self.assertTrue( d.setLevelAndVersion(2,3,True) == False )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
+    self.assertTrue( d.setLevelAndVersion(1,2,True) == False )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 4 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -120,14 +120,14 @@ def test_SBMLConvertStrict_convertSBO(self):
     c = m.createCompartment()
     c.setId( "c")
     (c).setSBOTerm(240)
-    self.assert_( d.setLevelAndVersion(2,3,True) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 3 )
-    self.assert_( d.setLevelAndVersion(2,2,True) == True )
-    self.assert_( d.getLevel() == 2 )
-    self.assert_( d.getVersion() == 2 )
+    self.assertTrue( d.setLevelAndVersion(2,3,True) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 3 )
+    self.assertTrue( d.setLevelAndVersion(2,2,True) == True )
+    self.assertTrue( d.getLevel() == 2 )
+    self.assertTrue( d.getVersion() == 2 )
     c1 = d.getModel().getCompartment(0)
-    self.assert_( (c1).getSBOTerm() == -1 )
+    self.assertTrue( (c1).getSBOTerm() == -1 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -141,15 +141,15 @@ def test_SBMLConvertStrict_convertToL1(self):
     s = m.createSpecies()
     s.setId( "s")
     s.setCompartment( "c")
-    self.assert_( d.setLevelAndVersion(1,2,True) == True )
-    self.assert_( d.getLevel() == 1 )
-    self.assert_( d.getVersion() == 2 )
+    self.assertTrue( d.setLevelAndVersion(1,2,True) == True )
+    self.assertTrue( d.getLevel() == 1 )
+    self.assertTrue( d.getVersion() == 2 )
     m1 = d.getModel()
-    self.assert_( (m1).getMetaId() == "" )
+    self.assertTrue( (m1).getMetaId() == "" )
     c1 = m1.getCompartment(0)
-    self.assert_( (c1).getSBOTerm() == -1 )
+    self.assertTrue( (c1).getSBOTerm() == -1 )
     s1 = m1.getSpecies(0)
-    self.assert_( s1.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( s1.getHasOnlySubstanceUnits() == False )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestSBMLDocument.py b/src/bindings/python/test/sbml/TestSBMLDocument.py
index 79bbe69abf..e585197f33 100644
--- a/src/bindings/python/test/sbml/TestSBMLDocument.py
+++ b/src/bindings/python/test/sbml/TestSBMLDocument.py
@@ -39,23 +39,23 @@ class TestSBMLDocument(unittest.TestCase):
 
   def test_SBMLDocument_create(self):
     d = libsbml.SBMLDocument()
-    self.assert_( d.getTypeCode() == libsbml.SBML_DOCUMENT )
-    self.assert_( d.getNotes() == None )
-    self.assert_( d.getAnnotation() == None )
-    self.assert_( d.getLevel() == 3 )
-    self.assert_( d.getVersion() == 2 )
-    self.assert_( d.getNumErrors() == 0 )
+    self.assertTrue( d.getTypeCode() == libsbml.SBML_DOCUMENT )
+    self.assertTrue( d.getNotes() == None )
+    self.assertTrue( d.getAnnotation() == None )
+    self.assertTrue( d.getLevel() == 3 )
+    self.assertTrue( d.getVersion() == 2 )
+    self.assertTrue( d.getNumErrors() == 0 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBMLDocument_createWith(self):
     d = libsbml.SBMLDocument(1,2)
-    self.assert_( d.getTypeCode() == libsbml.SBML_DOCUMENT )
-    self.assert_( d.getNotes() == None )
-    self.assert_( d.getAnnotation() == None )
-    self.assert_( d.getLevel() == 1 )
-    self.assert_( d.getVersion() == 2 )
-    self.assert_( d.getNumErrors() == 0 )
+    self.assertTrue( d.getTypeCode() == libsbml.SBML_DOCUMENT )
+    self.assertTrue( d.getNotes() == None )
+    self.assertTrue( d.getAnnotation() == None )
+    self.assertTrue( d.getLevel() == 1 )
+    self.assertTrue( d.getVersion() == 2 )
+    self.assertTrue( d.getNumErrors() == 0 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -67,10 +67,10 @@ def test_SBMLDocument_setLevelAndVersion(self):
     d = libsbml.SBMLDocument(2,2)
     m1 = libsbml.Model(2,2)
     d.setModel(m1)
-    self.assert_( d.setLevelAndVersion(2,3,False) == True )
-    self.assert_( d.setLevelAndVersion(2,1,False) == True )
-    self.assert_( d.setLevelAndVersion(1,2,False) == True )
-    self.assert_( d.setLevelAndVersion(1,1,False) == False )
+    self.assertTrue( d.setLevelAndVersion(2,3,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,1,False) == False )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -86,10 +86,10 @@ def test_SBMLDocument_setLevelAndVersion_Error(self):
     ud.addUnit(u)
     m1.addUnitDefinition(ud)
     d.setModel(m1)
-    self.assert_( d.setLevelAndVersion(2,2,True) == False )
-    self.assert_( d.setLevelAndVersion(2,3,True) == False )
-    self.assert_( d.setLevelAndVersion(1,2,True) == False )
-    self.assert_( d.setLevelAndVersion(1,1,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,2,True) == False )
+    self.assertTrue( d.setLevelAndVersion(2,3,True) == False )
+    self.assertTrue( d.setLevelAndVersion(1,2,True) == False )
+    self.assertTrue( d.setLevelAndVersion(1,1,True) == False )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -105,10 +105,10 @@ def test_SBMLDocument_setLevelAndVersion_UnitsError(self):
     r = m1.createAssignmentRule()
     r.setVariable( "c")
     r.setFormula( "p*p")
-    self.assert_( d.setLevelAndVersion(2,2,False) == True )
-    self.assert_( d.setLevelAndVersion(2,3,False) == True )
-    self.assert_( d.setLevelAndVersion(1,2,False) == True )
-    self.assert_( d.setLevelAndVersion(1,1,False) == False )
+    self.assertTrue( d.setLevelAndVersion(2,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,3,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,1,False) == False )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -117,10 +117,10 @@ def test_SBMLDocument_setLevelAndVersion_Warning(self):
     m1 = libsbml.Model(2,2)
     (m1).setSBOTerm(2)
     d.setModel(m1)
-    self.assert_( d.setLevelAndVersion(2,3,False) == True )
-    self.assert_( d.setLevelAndVersion(2,1,False) == True )
-    self.assert_( d.setLevelAndVersion(1,2,False) == True )
-    self.assert_( d.setLevelAndVersion(1,1,False) == False )
+    self.assertTrue( d.setLevelAndVersion(2,3,False) == True )
+    self.assertTrue( d.setLevelAndVersion(2,1,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,2,False) == True )
+    self.assertTrue( d.setLevelAndVersion(1,1,False) == False )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -128,22 +128,22 @@ def test_SBMLDocument_setModel(self):
     d = libsbml.SBMLDocument(2,4)
     m1 = libsbml.Model(2,4)
     m2 = libsbml.Model(2,4)
-    self.assert_( d.getModel() == None )
+    self.assertTrue( d.getModel() == None )
     i = d.setModel(m1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     mout = d.getModel()
-    self.assert_( mout != None )
-    self.assert_( mout != m1 )
+    self.assertTrue( mout != None )
+    self.assertTrue( mout != m1 )
     i = d.setModel(d.getModel())
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     mout = d.getModel()
-    self.assert_( mout != None )
-    self.assert_( mout != m1 )
+    self.assertTrue( mout != None )
+    self.assertTrue( mout != m1 )
     i = d.setModel(m2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     mout = d.getModel()
-    self.assert_( mout != None )
-    self.assert_( mout != m2 )
+    self.assertTrue( mout != None )
+    self.assertTrue( mout != m2 )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -151,8 +151,8 @@ def test_SBMLDocument_setModel1(self):
     d = libsbml.SBMLDocument(2,2)
     m1 = libsbml.Model(2,1)
     i = d.setModel(m1)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( d.getModel() == None )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( d.getModel() == None )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -161,8 +161,8 @@ def test_SBMLDocument_setModel2(self):
     m1 = libsbml.Model(1,2)
     m1.createCompartment()
     i = d.setModel(m1)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( d.getModel() == None )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( d.getModel() == None )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -170,8 +170,8 @@ def test_SBMLDocument_setModel3(self):
     d = libsbml.SBMLDocument(2,2)
     m1 = libsbml.Model(2,2)
     i = d.setModel(m1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( d.getModel() != None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( d.getModel() != None )
     _dummyList = [ d ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestSBMLError.py b/src/bindings/python/test/sbml/TestSBMLError.py
index e1f53ba9d4..44f0fc3d92 100644
--- a/src/bindings/python/test/sbml/TestSBMLError.py
+++ b/src/bindings/python/test/sbml/TestSBMLError.py
@@ -39,54 +39,54 @@ class TestSBMLError(unittest.TestCase):
 
   def test_SBMLError_create(self):
     error = libsbml.SBMLError()
-    self.assert_( error != None )
+    self.assertTrue( error != None )
     error = None
     error = libsbml.SBMLError(libsbml.EmptyListInReaction)
-    self.assert_( error.getErrorId() == libsbml.EmptyListInReaction )
-    #self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
-    #self.assert_( error.getSeverityAsString() ==  "Error"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_SBML )
-    self.assert_( error.getCategoryAsString() ==  "General SBML conformance" )
+    self.assertTrue( error.getErrorId() == libsbml.EmptyListInReaction )
+    #self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
+    #self.assertTrue( error.getSeverityAsString() ==  "Error"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_SBML )
+    self.assertTrue( error.getCategoryAsString() ==  "General SBML conformance" )
     error = None
     error = libsbml.SBMLError(libsbml.OverdeterminedSystem,2,1)
-    self.assert_( error.getErrorId() == libsbml.OverdeterminedSystem )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_WARNING )
-    self.assert_( error.getSeverityAsString() ==  "Warning"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL )
-    self.assert_( error.getCategoryAsString() ==  "Overdetermined model" )
+    self.assertTrue( error.getErrorId() == libsbml.OverdeterminedSystem )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_WARNING )
+    self.assertTrue( error.getSeverityAsString() ==  "Warning"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL )
+    self.assertTrue( error.getCategoryAsString() ==  "Overdetermined model" )
     error = None
     error = libsbml.SBMLError(libsbml.OffsetNoLongerValid,2,2)
-    self.assert_( error.getErrorId() == libsbml.OffsetNoLongerValid )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
-    self.assert_( error.getSeverityAsString() ==  "Error"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY )
-    self.assert_( error.getCategoryAsString() ==  "SBML component consistency" )
+    self.assertTrue( error.getErrorId() == libsbml.OffsetNoLongerValid )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
+    self.assertTrue( error.getSeverityAsString() ==  "Error"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY )
+    self.assertTrue( error.getCategoryAsString() ==  "SBML component consistency" )
     error = None
     error = libsbml.SBMLError(libsbml.NoSBOTermsInL1,2,2)
-    self.assert_( error.getErrorId() == libsbml.NoSBOTermsInL1 )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_WARNING )
-    self.assert_( error.getSeverityAsString() ==  "Warning"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_SBML_L1_COMPAT )
-    self.assert_( error.getCategoryAsString() ==  "Translation to SBML L1V2" )
+    self.assertTrue( error.getErrorId() == libsbml.NoSBOTermsInL1 )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_WARNING )
+    self.assertTrue( error.getSeverityAsString() ==  "Warning"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_SBML_L1_COMPAT )
+    self.assertTrue( error.getCategoryAsString() ==  "Translation to SBML L1V2" )
     error = None
     error = libsbml.SBMLError(libsbml.DisallowedMathMLEncodingUse,2,2)
-    self.assert_( error.getErrorId() == libsbml.DisallowedMathMLEncodingUse )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
-    self.assert_( error.getSeverityAsString() ==  "Error"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_MATHML_CONSISTENCY )
-    self.assert_( error.getShortMessage() ==  "Use of the MathML 'encoding' attribute is not allowed on this element" )
+    self.assertTrue( error.getErrorId() == libsbml.DisallowedMathMLEncodingUse )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
+    self.assertTrue( error.getSeverityAsString() ==  "Error"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_MATHML_CONSISTENCY )
+    self.assertTrue( error.getShortMessage() ==  "Use of the MathML 'encoding' attribute is not allowed on this element" )
     error = None
     error = libsbml.SBMLError(libsbml.DisallowedMathMLEncodingUse,1,2)
-    self.assert_( error.getErrorId() == libsbml.DisallowedMathMLEncodingUse )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_NOT_APPLICABLE )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_MATHML_CONSISTENCY )
+    self.assertTrue( error.getErrorId() == libsbml.DisallowedMathMLEncodingUse )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_NOT_APPLICABLE )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_MATHML_CONSISTENCY )
     error = None
     error = libsbml.SBMLError(libsbml.UnknownError,2,4)
-    self.assert_( error.getErrorId() == libsbml.UnknownError )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_FATAL )
-    self.assert_( error.getSeverityAsString() ==  "Fatal"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_INTERNAL )
-    self.assert_( error.getShortMessage() ==  "Encountered unknown internal libSBML error" )
+    self.assertTrue( error.getErrorId() == libsbml.UnknownError )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_FATAL )
+    self.assertTrue( error.getSeverityAsString() ==  "Fatal"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_INTERNAL )
+    self.assertTrue( error.getShortMessage() ==  "Encountered unknown internal libSBML error" )
     error = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestSBMLNamespaces.py b/src/bindings/python/test/sbml/TestSBMLNamespaces.py
index be5628b1a9..482726a0ed 100644
--- a/src/bindings/python/test/sbml/TestSBMLNamespaces.py
+++ b/src/bindings/python/test/sbml/TestSBMLNamespaces.py
@@ -39,101 +39,101 @@ class TestSBMLNamespaces(unittest.TestCase):
 
   def test_SBMLNamespaces_L1V1(self):
     sbml = libsbml.SBMLNamespaces(1,1)
-    self.assert_( sbml.getLevel() == 1 )
-    self.assert_( sbml.getVersion() == 1 )
+    self.assertTrue( sbml.getLevel() == 1 )
+    self.assertTrue( sbml.getVersion() == 1 )
     ns = sbml.getNamespaces()
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.getURI(0) ==  "http://www.sbml.org/sbml/level1" )
-    self.assert_( ns.getPrefix(0) ==  "" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.getURI(0) ==  "http://www.sbml.org/sbml/level1" )
+    self.assertTrue( ns.getPrefix(0) ==  "" )
     sbml = None
     pass  
 
   def test_SBMLNamespaces_L1V2(self):
     sbml = libsbml.SBMLNamespaces(1,2)
-    self.assert_( sbml.getLevel() == 1 )
-    self.assert_( sbml.getVersion() == 2 )
+    self.assertTrue( sbml.getLevel() == 1 )
+    self.assertTrue( sbml.getVersion() == 2 )
     ns = sbml.getNamespaces()
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.getURI(0) ==  "http://www.sbml.org/sbml/level1" )
-    self.assert_( ns.getPrefix(0) ==  "" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.getURI(0) ==  "http://www.sbml.org/sbml/level1" )
+    self.assertTrue( ns.getPrefix(0) ==  "" )
     sbml = None
     pass  
 
   def test_SBMLNamespaces_L2V1(self):
     sbml = libsbml.SBMLNamespaces(2,1)
-    self.assert_( sbml.getLevel() == 2 )
-    self.assert_( sbml.getVersion() == 1 )
+    self.assertTrue( sbml.getLevel() == 2 )
+    self.assertTrue( sbml.getVersion() == 1 )
     ns = sbml.getNamespaces()
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.getURI(0) ==  "http://www.sbml.org/sbml/level2" )
-    self.assert_( ns.getPrefix(0) ==  "" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.getURI(0) ==  "http://www.sbml.org/sbml/level2" )
+    self.assertTrue( ns.getPrefix(0) ==  "" )
     sbml = None
     pass  
 
   def test_SBMLNamespaces_L2V2(self):
     sbml = libsbml.SBMLNamespaces(2,2)
-    self.assert_( sbml.getLevel() == 2 )
-    self.assert_( sbml.getVersion() == 2 )
+    self.assertTrue( sbml.getLevel() == 2 )
+    self.assertTrue( sbml.getVersion() == 2 )
     ns = sbml.getNamespaces()
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.getURI(0) ==  "http://www.sbml.org/sbml/level2/version2" )
-    self.assert_( ns.getPrefix(0) ==  "" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.getURI(0) ==  "http://www.sbml.org/sbml/level2/version2" )
+    self.assertTrue( ns.getPrefix(0) ==  "" )
     sbml = None
     pass  
 
   def test_SBMLNamespaces_L2V3(self):
     sbml = libsbml.SBMLNamespaces(2,3)
-    self.assert_( sbml.getLevel() == 2 )
-    self.assert_( sbml.getVersion() == 3 )
+    self.assertTrue( sbml.getLevel() == 2 )
+    self.assertTrue( sbml.getVersion() == 3 )
     ns = sbml.getNamespaces()
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.getURI(0) ==  "http://www.sbml.org/sbml/level2/version3" )
-    self.assert_( ns.getPrefix(0) ==  "" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.getURI(0) ==  "http://www.sbml.org/sbml/level2/version3" )
+    self.assertTrue( ns.getPrefix(0) ==  "" )
     sbml = None
     pass  
 
   def test_SBMLNamespaces_L2V4(self):
     sbml = libsbml.SBMLNamespaces(2,4)
-    self.assert_( sbml.getLevel() == 2 )
-    self.assert_( sbml.getVersion() == 4 )
+    self.assertTrue( sbml.getLevel() == 2 )
+    self.assertTrue( sbml.getVersion() == 4 )
     ns = sbml.getNamespaces()
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.getURI(0) ==  "http://www.sbml.org/sbml/level2/version4" )
-    self.assert_( ns.getPrefix(0) ==  "" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.getURI(0) ==  "http://www.sbml.org/sbml/level2/version4" )
+    self.assertTrue( ns.getPrefix(0) ==  "" )
     sbml = None
     pass  
 
   def test_SBMLNamespaces_L3V1(self):
     sbml = libsbml.SBMLNamespaces(3,1)
-    self.assert_( sbml.getLevel() == 3 )
-    self.assert_( sbml.getVersion() == 1 )
+    self.assertTrue( sbml.getLevel() == 3 )
+    self.assertTrue( sbml.getVersion() == 1 )
     ns = sbml.getNamespaces()
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.getURI(0) ==  "http://www.sbml.org/sbml/level3/version1/core" )
-    self.assert_( ns.getPrefix(0) ==  "" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.getURI(0) ==  "http://www.sbml.org/sbml/level3/version1/core" )
+    self.assertTrue( ns.getPrefix(0) ==  "" )
     sbml = None
     pass  
 
   def test_SBMLNamespaces_add_and_remove_namespaces(self):
     sbmlns = libsbml.SBMLNamespaces( 3,1 )
-    self.assert_( sbmlns.getLevel() == 3 )
-    self.assert_( sbmlns.getVersion() == 1 )
+    self.assertTrue( sbmlns.getLevel() == 3 )
+    self.assertTrue( sbmlns.getVersion() == 1 )
     sbmlns.addNamespace("http://www.sbml.org/sbml/level3/version1/group/version1",  "group")
     sbmlns.addNamespace("http://www.sbml.org/sbml/level3/version1/layout/version1", "layout")
     sbmlns.addNamespace("http://www.sbml.org/sbml/level3/version1/render/version1", "render")
     sbmlns.addNamespace("http://www.sbml.org/sbml/level3/version1/multi/version1",  "multi")
     ns = sbmlns.getNamespaces()
-    self.assert_( ns.getLength() == 5 )
-    self.assert_( ns.getURI(0) ==  "http://www.sbml.org/sbml/level3/version1/core" )
-    self.assert_( ns.getPrefix(0) ==  "" )
-    self.assert_( ns.getURI(1) ==  "http://www.sbml.org/sbml/level3/version1/group/version1" )
-    self.assert_( ns.getPrefix(1) ==  "group" )
-    self.assert_( ns.getURI(2) ==  "http://www.sbml.org/sbml/level3/version1/layout/version1" )
-    self.assert_( ns.getPrefix(2) ==  "layout" )
-    self.assert_( ns.getURI(3) ==  "http://www.sbml.org/sbml/level3/version1/render/version1" )
-    self.assert_( ns.getPrefix(3) ==  "render" )
-    self.assert_( ns.getURI(4) ==  "http://www.sbml.org/sbml/level3/version1/multi/version1" )
-    self.assert_( ns.getPrefix(4) ==  "multi" )
+    self.assertTrue( ns.getLength() == 5 )
+    self.assertTrue( ns.getURI(0) ==  "http://www.sbml.org/sbml/level3/version1/core" )
+    self.assertTrue( ns.getPrefix(0) ==  "" )
+    self.assertTrue( ns.getURI(1) ==  "http://www.sbml.org/sbml/level3/version1/group/version1" )
+    self.assertTrue( ns.getPrefix(1) ==  "group" )
+    self.assertTrue( ns.getURI(2) ==  "http://www.sbml.org/sbml/level3/version1/layout/version1" )
+    self.assertTrue( ns.getPrefix(2) ==  "layout" )
+    self.assertTrue( ns.getURI(3) ==  "http://www.sbml.org/sbml/level3/version1/render/version1" )
+    self.assertTrue( ns.getPrefix(3) ==  "render" )
+    self.assertTrue( ns.getURI(4) ==  "http://www.sbml.org/sbml/level3/version1/multi/version1" )
+    self.assertTrue( ns.getPrefix(4) ==  "multi" )
     sbmlns.removeNamespace("http://www.sbml.org/sbml/level3/version1/layout/version1")
     sbmlns.removeNamespace("http://www.sbml.org/sbml/level3/version1/group/version1")
     sbmlns.removeNamespace("http://www.sbml.org/sbml/level3/version1/render/version1")
@@ -141,13 +141,13 @@ def test_SBMLNamespaces_add_and_remove_namespaces(self):
     pass  
 
   def test_SBMLNamespaces_getURI(self):
-    self.assert_( libsbml.SBMLNamespaces.getSBMLNamespaceURI(1,1) ==                              "http://www.sbml.org/sbml/level1" )
-    self.assert_( libsbml.SBMLNamespaces.getSBMLNamespaceURI(1,2) ==                              "http://www.sbml.org/sbml/level1" )
-    self.assert_( libsbml.SBMLNamespaces.getSBMLNamespaceURI(2,1) ==                              "http://www.sbml.org/sbml/level2" )
-    self.assert_( libsbml.SBMLNamespaces.getSBMLNamespaceURI(2,2) ==                              "http://www.sbml.org/sbml/level2/version2" )
-    self.assert_( libsbml.SBMLNamespaces.getSBMLNamespaceURI(2,3) ==                              "http://www.sbml.org/sbml/level2/version3" )
-    self.assert_( libsbml.SBMLNamespaces.getSBMLNamespaceURI(2,4) ==                              "http://www.sbml.org/sbml/level2/version4" )
-    self.assert_( libsbml.SBMLNamespaces.getSBMLNamespaceURI(3,1) ==                              "http://www.sbml.org/sbml/level3/version1/core" )
+    self.assertTrue( libsbml.SBMLNamespaces.getSBMLNamespaceURI(1,1) ==                              "http://www.sbml.org/sbml/level1" )
+    self.assertTrue( libsbml.SBMLNamespaces.getSBMLNamespaceURI(1,2) ==                              "http://www.sbml.org/sbml/level1" )
+    self.assertTrue( libsbml.SBMLNamespaces.getSBMLNamespaceURI(2,1) ==                              "http://www.sbml.org/sbml/level2" )
+    self.assertTrue( libsbml.SBMLNamespaces.getSBMLNamespaceURI(2,2) ==                              "http://www.sbml.org/sbml/level2/version2" )
+    self.assertTrue( libsbml.SBMLNamespaces.getSBMLNamespaceURI(2,3) ==                              "http://www.sbml.org/sbml/level2/version3" )
+    self.assertTrue( libsbml.SBMLNamespaces.getSBMLNamespaceURI(2,4) ==                              "http://www.sbml.org/sbml/level2/version4" )
+    self.assertTrue( libsbml.SBMLNamespaces.getSBMLNamespaceURI(3,1) ==                              "http://www.sbml.org/sbml/level3/version1/core" )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestSBMLParentObject.py b/src/bindings/python/test/sbml/TestSBMLParentObject.py
index 98ff527f19..52837d2acc 100644
--- a/src/bindings/python/test/sbml/TestSBMLParentObject.py
+++ b/src/bindings/python/test/sbml/TestSBMLParentObject.py
@@ -41,18 +41,18 @@ def test_AlgebraicRule_parent_create(self):
     m = libsbml.Model(2,4)
     r = m.createAlgebraicRule()
     lo = m.getListOfRules()
-    self.assert_( lo == m.getRule(0).getParentSBMLObject() )
-    self.assert_( lo == r.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getRule(0).getParentSBMLObject() )
+    self.assertTrue( lo == r.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_AssignmentRule_parent_create(self):
     m = libsbml.Model(2,4)
     r = m.createAssignmentRule()
     lo = m.getListOfRules()
-    self.assert_( lo == m.getRule(0).getParentSBMLObject() )
-    self.assert_( lo == r.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getRule(0).getParentSBMLObject() )
+    self.assertTrue( lo == r.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_CompartmentType_parent_NULL(self):
@@ -61,9 +61,9 @@ def test_CompartmentType_parent_NULL(self):
     c = m.createCompartmentType()
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -74,17 +74,17 @@ def test_CompartmentType_parent_add(self):
     m.addCompartmentType(ct)
     ct = None
     lo = m.getListOfCompartmentTypes()
-    self.assert_( lo == m.getCompartmentType(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getCompartmentType(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_CompartmentType_parent_create(self):
     m = libsbml.Model(2,4)
     ct = m.createCompartmentType()
     lo = m.getListOfCompartmentTypes()
-    self.assert_( lo == m.getCompartmentType(0).getParentSBMLObject() )
-    self.assert_( lo == ct.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getCompartmentType(0).getParentSBMLObject() )
+    self.assertTrue( lo == ct.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Compartment_parent_NULL(self):
@@ -93,9 +93,9 @@ def test_Compartment_parent_NULL(self):
     c = m.createCompartment()
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -106,17 +106,17 @@ def test_Compartment_parent_add(self):
     m.addCompartment(c)
     c = None
     lo = m.getListOfCompartments()
-    self.assert_( lo == m.getCompartment(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getCompartment(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Compartment_parent_create(self):
     m = libsbml.Model(2,4)
     c = m.createCompartment()
     lo = m.getListOfCompartments()
-    self.assert_( lo == m.getCompartment(0).getParentSBMLObject() )
-    self.assert_( lo == c.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getCompartment(0).getParentSBMLObject() )
+    self.assertTrue( lo == c.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Constraint_parent_NULL(self):
@@ -125,9 +125,9 @@ def test_Constraint_parent_NULL(self):
     c = m.createConstraint()
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -138,17 +138,17 @@ def test_Constraint_parent_add(self):
     m.addConstraint(ct)
     ct = None
     lo = m.getListOfConstraints()
-    self.assert_( lo == m.getConstraint(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getConstraint(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Constraint_parent_create(self):
     m = libsbml.Model(2,4)
     ct = m.createConstraint()
     lo = m.getListOfConstraints()
-    self.assert_( lo == m.getConstraint(0).getParentSBMLObject() )
-    self.assert_( lo == ct.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getConstraint(0).getParentSBMLObject() )
+    self.assertTrue( lo == ct.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Delay_parent_add(self):
@@ -157,7 +157,7 @@ def test_Delay_parent_add(self):
     e = libsbml.Event(2,4)
     e.setDelay(d)
     d = None
-    self.assert_( e == e.getDelay().getParentSBMLObject() )
+    self.assertTrue( e == e.getDelay().getParentSBMLObject() )
     e = None
     pass  
 
@@ -169,17 +169,17 @@ def test_EventAssignment_parent_add(self):
     e.addEventAssignment(ea)
     ea = None
     lo = e.getListOfEventAssignments()
-    self.assert_( lo == e.getEventAssignment(0).getParentSBMLObject() )
-    self.assert_( e == lo.getParentSBMLObject() )
+    self.assertTrue( lo == e.getEventAssignment(0).getParentSBMLObject() )
+    self.assertTrue( e == lo.getParentSBMLObject() )
     pass  
 
   def test_EventAssignment_parent_create(self):
     e = libsbml.Event(2,4)
     ea = e.createEventAssignment()
     lo = e.getListOfEventAssignments()
-    self.assert_( lo == e.getEventAssignment(0).getParentSBMLObject() )
-    self.assert_( lo == ea.getParentSBMLObject() )
-    self.assert_( e == lo.getParentSBMLObject() )
+    self.assertTrue( lo == e.getEventAssignment(0).getParentSBMLObject() )
+    self.assertTrue( lo == ea.getParentSBMLObject() )
+    self.assertTrue( e == lo.getParentSBMLObject() )
     pass  
 
   def test_EventAssignment_parent_create_model(self):
@@ -187,9 +187,9 @@ def test_EventAssignment_parent_create_model(self):
     e = m.createEvent()
     ea = m.createEventAssignment()
     lo = e.getListOfEventAssignments()
-    self.assert_( lo == e.getEventAssignment(0).getParentSBMLObject() )
-    self.assert_( lo == ea.getParentSBMLObject() )
-    self.assert_( e == lo.getParentSBMLObject() )
+    self.assertTrue( lo == e.getEventAssignment(0).getParentSBMLObject() )
+    self.assertTrue( lo == ea.getParentSBMLObject() )
+    self.assertTrue( e == lo.getParentSBMLObject() )
     pass  
 
   def test_Event_parent_NULL(self):
@@ -203,27 +203,27 @@ def test_Event_parent_NULL(self):
     dy.setMath(libsbml.ASTNode())
     c.setTrigger(t)
     c.setDelay(dy)
-    self.assert_( c.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( c.getTrigger().getParentSBMLObject() == c )
-    self.assert_( c.getDelay().getSBMLDocument() == d )
-    self.assert_( ea.getAncestorOfType(libsbml.SBML_EVENT) == c )
+    self.assertTrue( c.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( c.getTrigger().getParentSBMLObject() == c )
+    self.assertTrue( c.getDelay().getSBMLDocument() == d )
+    self.assertTrue( ea.getAncestorOfType(libsbml.SBML_EVENT) == c )
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
-    self.assert_( c1.getEventAssignment(0).getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getEventAssignment(0).getAncestorOfType(libsbml.SBML_EVENT) == c1 )
-    self.assert_( c1.getEventAssignment(0).getParentSBMLObject() != None )
-    self.assert_( c1.getEventAssignment(0).getSBMLDocument() == None )
-    self.assert_( c1.getTrigger().getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getTrigger().getAncestorOfType(libsbml.SBML_EVENT) == c1 )
-    self.assert_( c1.getTrigger().getParentSBMLObject() != None )
-    self.assert_( c1.getTrigger().getSBMLDocument() == None )
-    self.assert_( c1.getDelay().getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getDelay().getAncestorOfType(libsbml.SBML_EVENT) == c1 )
-    self.assert_( c1.getDelay().getParentSBMLObject() != None )
-    self.assert_( c1.getDelay().getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getEventAssignment(0).getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getEventAssignment(0).getAncestorOfType(libsbml.SBML_EVENT) == c1 )
+    self.assertTrue( c1.getEventAssignment(0).getParentSBMLObject() != None )
+    self.assertTrue( c1.getEventAssignment(0).getSBMLDocument() == None )
+    self.assertTrue( c1.getTrigger().getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getTrigger().getAncestorOfType(libsbml.SBML_EVENT) == c1 )
+    self.assertTrue( c1.getTrigger().getParentSBMLObject() != None )
+    self.assertTrue( c1.getTrigger().getSBMLDocument() == None )
+    self.assertTrue( c1.getDelay().getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getDelay().getAncestorOfType(libsbml.SBML_EVENT) == c1 )
+    self.assertTrue( c1.getDelay().getParentSBMLObject() != None )
+    self.assertTrue( c1.getDelay().getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -237,17 +237,17 @@ def test_Event_parent_add(self):
     m.addEvent(e)
     e = None
     lo = m.getListOfEvents()
-    self.assert_( lo == m.getEvent(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getEvent(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Event_parent_create(self):
     m = libsbml.Model(2,4)
     e = m.createEvent()
     lo = m.getListOfEvents()
-    self.assert_( lo == m.getEvent(0).getParentSBMLObject() )
-    self.assert_( lo == e.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getEvent(0).getParentSBMLObject() )
+    self.assertTrue( lo == e.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_FunctionDefinition_parent_NULL(self):
@@ -256,9 +256,9 @@ def test_FunctionDefinition_parent_NULL(self):
     c = m.createFunctionDefinition()
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -270,17 +270,17 @@ def test_FunctionDefinition_parent_add(self):
     m.addFunctionDefinition(fd)
     fd = None
     lo = m.getListOfFunctionDefinitions()
-    self.assert_( lo == m.getFunctionDefinition(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getFunctionDefinition(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_FunctionDefinition_parent_create(self):
     m = libsbml.Model(2,4)
     fd = m.createFunctionDefinition()
     lo = m.getListOfFunctionDefinitions()
-    self.assert_( lo == m.getFunctionDefinition(0).getParentSBMLObject() )
-    self.assert_( lo == fd.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getFunctionDefinition(0).getParentSBMLObject() )
+    self.assertTrue( lo == fd.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_InitialAssignment_parent_NULL(self):
@@ -289,9 +289,9 @@ def test_InitialAssignment_parent_NULL(self):
     c = m.createInitialAssignment()
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -303,17 +303,17 @@ def test_InitialAssignment_parent_add(self):
     m.addInitialAssignment(ia)
     ia = None
     lo = m.getListOfInitialAssignments()
-    self.assert_( lo == m.getInitialAssignment(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getInitialAssignment(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_InitialAssignment_parent_create(self):
     m = libsbml.Model(2,4)
     ia = m.createInitialAssignment()
     lo = m.getListOfInitialAssignments()
-    self.assert_( lo == m.getInitialAssignment(0).getParentSBMLObject() )
-    self.assert_( lo == ia.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getInitialAssignment(0).getParentSBMLObject() )
+    self.assertTrue( lo == ia.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_KineticLaw_Parameter_parent_add(self):
@@ -322,22 +322,22 @@ def test_KineticLaw_Parameter_parent_add(self):
     p.setId("jake")
     kl.addParameter(p)
     p = None
-    self.assert_( kl.getNumParameters() == 1 )
-    self.assert_( kl.getParameter(0).getId() ==  "jake" )
+    self.assertTrue( kl.getNumParameters() == 1 )
+    self.assertTrue( kl.getParameter(0).getId() ==  "jake" )
     lop = kl.getListOfParameters()
-    self.assert_( kl == lop.getParentSBMLObject() )
-    self.assert_( lop == kl.getParameter(0).getParentSBMLObject() )
+    self.assertTrue( kl == lop.getParentSBMLObject() )
+    self.assertTrue( lop == kl.getParameter(0).getParentSBMLObject() )
     kl = None
     pass  
 
   def test_KineticLaw_Parameter_parent_create(self):
     kl = libsbml.KineticLaw(2,4)
     p = kl.createParameter()
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue( kl.getNumParameters() == 1 )
     lop = kl.getListOfParameters()
-    self.assert_( kl == lop.getParentSBMLObject() )
-    self.assert_( lop == p.getParentSBMLObject() )
-    self.assert_( lop == kl.getParameter(0).getParentSBMLObject() )
+    self.assertTrue( kl == lop.getParentSBMLObject() )
+    self.assertTrue( lop == p.getParentSBMLObject() )
+    self.assertTrue( lop == kl.getParameter(0).getParentSBMLObject() )
     kl = None
     pass  
 
@@ -346,12 +346,12 @@ def test_KineticLaw_Parameter_parent_create_model(self):
     r = m.createReaction()
     kl = m.createKineticLaw()
     p = m.createKineticLawParameter()
-    self.assert_( kl.getNumParameters() == 1 )
+    self.assertTrue( kl.getNumParameters() == 1 )
     lop = kl.getListOfParameters()
-    self.assert_( r == kl.getParentSBMLObject() )
-    self.assert_( kl == lop.getParentSBMLObject() )
-    self.assert_( lop == p.getParentSBMLObject() )
-    self.assert_( lop == kl.getParameter(0).getParentSBMLObject() )
+    self.assertTrue( r == kl.getParentSBMLObject() )
+    self.assertTrue( kl == lop.getParentSBMLObject() )
+    self.assertTrue( lop == p.getParentSBMLObject() )
+    self.assertTrue( lop == kl.getParameter(0).getParentSBMLObject() )
     kl = None
     pass  
 
@@ -359,13 +359,13 @@ def test_KineticLaw_parent_NULL(self):
     r = libsbml.Reaction(2,4)
     kl = r.createKineticLaw()
     p = kl.createParameter()
-    self.assert_( r == kl.getParentSBMLObject() )
-    self.assert_( r == p.getAncestorOfType(libsbml.SBML_REACTION) )
-    self.assert_( kl == p.getAncestorOfType(libsbml.SBML_KINETIC_LAW) )
+    self.assertTrue( r == kl.getParentSBMLObject() )
+    self.assertTrue( r == p.getAncestorOfType(libsbml.SBML_REACTION) )
+    self.assertTrue( kl == p.getAncestorOfType(libsbml.SBML_KINETIC_LAW) )
     kl1 = kl.clone()
-    self.assert_( kl1.getParentSBMLObject() == None )
-    self.assert_( kl1.getParameter(0).getAncestorOfType(libsbml.SBML_REACTION) == None )
-    self.assert_( kl1 == kl1.getParameter(0).getAncestorOfType(libsbml.SBML_KINETIC_LAW) )
+    self.assertTrue( kl1.getParentSBMLObject() == None )
+    self.assertTrue( kl1.getParameter(0).getAncestorOfType(libsbml.SBML_REACTION) == None )
+    self.assertTrue( kl1 == kl1.getParameter(0).getAncestorOfType(libsbml.SBML_KINETIC_LAW) )
     r = None
     pass  
 
@@ -374,14 +374,14 @@ def test_KineticLaw_parent_add(self):
     kl.setMath(libsbml.parseFormula("1"))
     r = libsbml.Reaction(2,4)
     r.setKineticLaw(kl)
-    self.assert_( r == r.getKineticLaw().getParentSBMLObject() )
+    self.assertTrue( r == r.getKineticLaw().getParentSBMLObject() )
     r = None
     pass  
 
   def test_KineticLaw_parent_create(self):
     r = libsbml.Reaction(2,4)
     kl = r.createKineticLaw()
-    self.assert_( r == kl.getParentSBMLObject() )
+    self.assertTrue( r == kl.getParentSBMLObject() )
     r = None
     pass  
 
@@ -389,8 +389,8 @@ def test_KineticLaw_parent_create_model(self):
     m = libsbml.Model(2,4)
     r = m.createReaction()
     kl = r.createKineticLaw()
-    self.assert_( r == kl.getParentSBMLObject() )
-    self.assert_( r == r.getKineticLaw().getParentSBMLObject() )
+    self.assertTrue( r == kl.getParentSBMLObject() )
+    self.assertTrue( r == r.getKineticLaw().getParentSBMLObject() )
     r = None
     pass  
 
@@ -398,14 +398,14 @@ def test_Model_parent_add(self):
     d = libsbml.SBMLDocument(2,4)
     m = libsbml.Model(2,4)
     d.setModel(m)
-    self.assert_( d == d.getModel().getParentSBMLObject() )
+    self.assertTrue( d == d.getModel().getParentSBMLObject() )
     d = None
     pass  
 
   def test_Model_parent_create(self):
     d = libsbml.SBMLDocument(2,4)
     m = d.createModel()
-    self.assert_( d == m.getParentSBMLObject() )
+    self.assertTrue( d == m.getParentSBMLObject() )
     d = None
     pass  
 
@@ -415,9 +415,9 @@ def test_Parameter_parent_NULL(self):
     c = m.createParameter()
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -428,26 +428,26 @@ def test_Parameter_parent_add(self):
     m.addParameter(ia)
     ia = None
     lo = m.getListOfParameters()
-    self.assert_( lo == m.getParameter(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getParameter(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Parameter_parent_create(self):
     m = libsbml.Model(2,4)
     p = m.createParameter()
     lo = m.getListOfParameters()
-    self.assert_( lo == m.getParameter(0).getParentSBMLObject() )
-    self.assert_( lo == p.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getParameter(0).getParentSBMLObject() )
+    self.assertTrue( lo == p.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_RateRule_parent_create(self):
     m = libsbml.Model(2,4)
     r = m.createRateRule()
     lo = m.getListOfRules()
-    self.assert_( lo == m.getRule(0).getParentSBMLObject() )
-    self.assert_( lo == r.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getRule(0).getParentSBMLObject() )
+    self.assertTrue( lo == r.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Reaction_parent_NULL(self):
@@ -456,22 +456,22 @@ def test_Reaction_parent_NULL(self):
     c = m.createReaction()
     sr = c.createReactant()
     kl = c.createKineticLaw()
-    self.assert_( c.getAncestorOfType(libsbml.SBML_MODEL) == m )
-    self.assert_( c.getSBMLDocument() == d )
-    self.assert_( sr.getAncestorOfType(libsbml.SBML_REACTION) == c )
-    self.assert_( kl.getAncestorOfType(libsbml.SBML_REACTION) == c )
+    self.assertTrue( c.getAncestorOfType(libsbml.SBML_MODEL) == m )
+    self.assertTrue( c.getSBMLDocument() == d )
+    self.assertTrue( sr.getAncestorOfType(libsbml.SBML_REACTION) == c )
+    self.assertTrue( kl.getAncestorOfType(libsbml.SBML_REACTION) == c )
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     sr1 = c1.getReactant(0)
-    self.assert_( sr1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( sr1.getAncestorOfType(libsbml.SBML_REACTION) == c1 )
-    self.assert_( sr1.getSBMLDocument() == None )
-    self.assert_( c1.getKineticLaw().getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getKineticLaw().getAncestorOfType(libsbml.SBML_REACTION) == c1 )
-    self.assert_( c1.getKineticLaw().getSBMLDocument() == None )
+    self.assertTrue( sr1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( sr1.getAncestorOfType(libsbml.SBML_REACTION) == c1 )
+    self.assertTrue( sr1.getSBMLDocument() == None )
+    self.assertTrue( c1.getKineticLaw().getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getKineticLaw().getAncestorOfType(libsbml.SBML_REACTION) == c1 )
+    self.assertTrue( c1.getKineticLaw().getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -482,17 +482,17 @@ def test_Reaction_parent_add(self):
     m.addReaction(ia)
     ia = None
     lo = m.getListOfReactions()
-    self.assert_( lo == m.getReaction(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getReaction(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Reaction_parent_create(self):
     m = libsbml.Model(2,4)
     r = m.createReaction()
     lo = m.getListOfReactions()
-    self.assert_( lo == m.getReaction(0).getParentSBMLObject() )
-    self.assert_( lo == r.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getReaction(0).getParentSBMLObject() )
+    self.assertTrue( lo == r.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Rule_parent_add(self):
@@ -503,8 +503,8 @@ def test_Rule_parent_add(self):
     m.addRule(ia)
     ia = None
     lo = m.getListOfRules()
-    self.assert_( lo == m.getRule(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getRule(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Modifier_parent_add(self):
@@ -514,17 +514,17 @@ def test_SpeciesReference_Modifier_parent_add(self):
     r.addModifier(sr)
     sr = None
     lo = r.getListOfModifiers()
-    self.assert_( lo == r.getModifier(0).getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == r.getModifier(0).getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Modifier_parent_create(self):
     r = libsbml.Reaction(2,4)
     sr = r.createModifier()
     lo = r.getListOfModifiers()
-    self.assert_( lo == sr.getParentSBMLObject() )
-    self.assert_( lo == r.getModifier(0).getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == sr.getParentSBMLObject() )
+    self.assertTrue( lo == r.getModifier(0).getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Modifier_parent_create_model(self):
@@ -532,9 +532,9 @@ def test_SpeciesReference_Modifier_parent_create_model(self):
     r = m.createReaction()
     sr = m.createModifier()
     lo = r.getListOfModifiers()
-    self.assert_( lo == sr.getParentSBMLObject() )
-    self.assert_( lo == r.getModifier(0).getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == sr.getParentSBMLObject() )
+    self.assertTrue( lo == r.getModifier(0).getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Product_parent_add(self):
@@ -544,17 +544,17 @@ def test_SpeciesReference_Product_parent_add(self):
     r.addProduct(sr)
     sr = None
     lo = r.getListOfProducts()
-    self.assert_( lo == r.getProduct(0).getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == r.getProduct(0).getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Product_parent_create(self):
     r = libsbml.Reaction(2,4)
     sr = r.createProduct()
     lo = r.getListOfProducts()
-    self.assert_( lo == r.getProduct(0).getParentSBMLObject() )
-    self.assert_( lo == sr.getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == r.getProduct(0).getParentSBMLObject() )
+    self.assertTrue( lo == sr.getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Product_parent_create_model(self):
@@ -562,9 +562,9 @@ def test_SpeciesReference_Product_parent_create_model(self):
     r = m.createReaction()
     sr = m.createProduct()
     lo = r.getListOfProducts()
-    self.assert_( lo == r.getProduct(0).getParentSBMLObject() )
-    self.assert_( lo == sr.getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == r.getProduct(0).getParentSBMLObject() )
+    self.assertTrue( lo == sr.getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Reactant_parent_add(self):
@@ -574,17 +574,17 @@ def test_SpeciesReference_Reactant_parent_add(self):
     r.addReactant(sr)
     sr = None
     lo = r.getListOfReactants()
-    self.assert_( lo == r.getReactant(0).getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == r.getReactant(0).getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Reactant_parent_create(self):
     r = libsbml.Reaction(2,4)
     sr = r.createReactant()
     lo = r.getListOfReactants()
-    self.assert_( lo == r.getReactant(0).getParentSBMLObject() )
-    self.assert_( lo == sr.getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == r.getReactant(0).getParentSBMLObject() )
+    self.assertTrue( lo == sr.getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesReference_Reactant_parent_create_model(self):
@@ -592,9 +592,9 @@ def test_SpeciesReference_Reactant_parent_create_model(self):
     r = m.createReaction()
     sr = m.createReactant()
     lo = r.getListOfReactants()
-    self.assert_( lo == r.getReactant(0).getParentSBMLObject() )
-    self.assert_( lo == sr.getParentSBMLObject() )
-    self.assert_( r == lo.getParentSBMLObject() )
+    self.assertTrue( lo == r.getReactant(0).getParentSBMLObject() )
+    self.assertTrue( lo == sr.getParentSBMLObject() )
+    self.assertTrue( r == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesType_parent_NULL(self):
@@ -603,9 +603,9 @@ def test_SpeciesType_parent_NULL(self):
     c = m.createSpeciesType()
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -616,17 +616,17 @@ def test_SpeciesType_parent_add(self):
     m.addSpeciesType(ia)
     ia = None
     lo = m.getListOfSpeciesTypes()
-    self.assert_( lo == m.getSpeciesType(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getSpeciesType(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_SpeciesType_parent_create(self):
     m = libsbml.Model(2,4)
     st = m.createSpeciesType()
     lo = m.getListOfSpeciesTypes()
-    self.assert_( lo == m.getSpeciesType(0).getParentSBMLObject() )
-    self.assert_( lo == st.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getSpeciesType(0).getParentSBMLObject() )
+    self.assertTrue( lo == st.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Species_parent_NULL(self):
@@ -635,9 +635,9 @@ def test_Species_parent_NULL(self):
     c = m.createSpecies()
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -649,17 +649,17 @@ def test_Species_parent_add(self):
     m.addSpecies(ia)
     ia = None
     lo = m.getListOfSpecies()
-    self.assert_( lo == m.getSpecies(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getSpecies(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Species_parent_create(self):
     m = libsbml.Model(2,4)
     s = m.createSpecies()
     lo = m.getListOfSpecies()
-    self.assert_( lo == s.getParentSBMLObject() )
-    self.assert_( lo == m.getSpecies(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == s.getParentSBMLObject() )
+    self.assertTrue( lo == m.getSpecies(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_StoichiometryMath_parent_add(self):
@@ -668,7 +668,7 @@ def test_StoichiometryMath_parent_add(self):
     sr = libsbml.SpeciesReference(2,4)
     sr.setStoichiometryMath(m)
     m = None
-    self.assert_( sr == sr.getStoichiometryMath().getParentSBMLObject() )
+    self.assertTrue( sr == sr.getStoichiometryMath().getParentSBMLObject() )
     sr = None
     pass  
 
@@ -678,7 +678,7 @@ def test_Trigger_parent_add(self):
     e = libsbml.Event(2,4)
     e.setTrigger(d)
     d = None
-    self.assert_( e == e.getTrigger().getParentSBMLObject() )
+    self.assertTrue( e == e.getTrigger().getParentSBMLObject() )
     e = None
     pass  
 
@@ -687,15 +687,15 @@ def test_UnitDefinition_parent_NULL(self):
     m = d.createModel()
     c = m.createUnitDefinition()
     u = c.createUnit()
-    self.assert_( u.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == c )
+    self.assertTrue( u.getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == c )
     c1 = c.clone()
     d = None
-    self.assert_( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
-    self.assert_( c1.getParentSBMLObject() == None )
-    self.assert_( c1.getSBMLDocument() == None )
-    self.assert_( c1.getUnit(0).getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == c1 )
-    self.assert_( c1.getUnit(0).getParentSBMLObject() != None )
-    self.assert_( c1.getUnit(0).getSBMLDocument() == None )
+    self.assertTrue( c1.getAncestorOfType(libsbml.SBML_MODEL) == None )
+    self.assertTrue( c1.getParentSBMLObject() == None )
+    self.assertTrue( c1.getSBMLDocument() == None )
+    self.assertTrue( c1.getUnit(0).getAncestorOfType(libsbml.SBML_UNIT_DEFINITION) == c1 )
+    self.assertTrue( c1.getUnit(0).getParentSBMLObject() != None )
+    self.assertTrue( c1.getUnit(0).getSBMLDocument() == None )
     c1 = None
     pass  
 
@@ -707,17 +707,17 @@ def test_UnitDefinition_parent_add(self):
     m.addUnitDefinition(ia)
     ia = None
     lo = m.getListOfUnitDefinitions()
-    self.assert_( lo == m.getUnitDefinition(0).getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getUnitDefinition(0).getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_UnitDefinition_parent_create(self):
     m = libsbml.Model(2,4)
     ud = m.createUnitDefinition()
     lo = m.getListOfUnitDefinitions()
-    self.assert_( lo == m.getUnitDefinition(0).getParentSBMLObject() )
-    self.assert_( lo == ud.getParentSBMLObject() )
-    self.assert_( m == lo.getParentSBMLObject() )
+    self.assertTrue( lo == m.getUnitDefinition(0).getParentSBMLObject() )
+    self.assertTrue( lo == ud.getParentSBMLObject() )
+    self.assertTrue( m == lo.getParentSBMLObject() )
     pass  
 
   def test_Unit_parent_add(self):
@@ -726,21 +726,21 @@ def test_Unit_parent_add(self):
     u.setKind(libsbml.UNIT_KIND_MOLE)
     ud.addUnit(u)
     u = None
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
     lo = ud.getListOfUnits()
-    self.assert_( lo == ud.getUnit(0).getParentSBMLObject() )
-    self.assert_( ud == lo.getParentSBMLObject() )
+    self.assertTrue( lo == ud.getUnit(0).getParentSBMLObject() )
+    self.assertTrue( ud == lo.getParentSBMLObject() )
     ud = None
     pass  
 
   def test_Unit_parent_create(self):
     ud = libsbml.UnitDefinition(2,4)
     u = ud.createUnit()
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
     lo = ud.getListOfUnits()
-    self.assert_( lo == ud.getUnit(0).getParentSBMLObject() )
-    self.assert_( lo == u.getParentSBMLObject() )
-    self.assert_( ud == lo.getParentSBMLObject() )
+    self.assertTrue( lo == ud.getUnit(0).getParentSBMLObject() )
+    self.assertTrue( lo == u.getParentSBMLObject() )
+    self.assertTrue( ud == lo.getParentSBMLObject() )
     ud = None
     pass  
 
@@ -748,11 +748,11 @@ def test_Unit_parent_create_model(self):
     m = libsbml.Model(2,4)
     ud = m.createUnitDefinition()
     u = m.createUnit()
-    self.assert_( ud.getNumUnits() == 1 )
+    self.assertTrue( ud.getNumUnits() == 1 )
     lo = ud.getListOfUnits()
-    self.assert_( lo == ud.getUnit(0).getParentSBMLObject() )
-    self.assert_( lo == u.getParentSBMLObject() )
-    self.assert_( ud == lo.getParentSBMLObject() )
+    self.assertTrue( lo == ud.getUnit(0).getParentSBMLObject() )
+    self.assertTrue( lo == u.getParentSBMLObject() )
+    self.assertTrue( ud == lo.getParentSBMLObject() )
     ud = None
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestSBase.py b/src/bindings/python/test/sbml/TestSBase.py
index 718fcc0b80..46711fdcb7 100644
--- a/src/bindings/python/test/sbml/TestSBase.py
+++ b/src/bindings/python/test/sbml/TestSBase.py
@@ -57,15 +57,15 @@ def test_SBase_CVTerms(self):
     cv = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     cv.setBiologicalQualifierType(libsbml.BQB_IS)
     cv.addResource( "foo")
-    self.assert_( self.S.getNumCVTerms() == 0 )
-    #self.assert_( self.S.getCVTerms() == None )
-    self.assert_( len(self.S.getCVTerms()) == 0 )
+    self.assertTrue( self.S.getNumCVTerms() == 0 )
+    #self.assertTrue( self.S.getCVTerms() == None )
+    self.assertTrue( len(self.S.getCVTerms()) == 0 )
     self.S.setMetaId( "_id")
     self.S.addCVTerm(cv)
-    self.assert_( self.S.getNumCVTerms() == 1 )
-    #self.assert_( self.S.getCVTerms() != None )
-    self.assert_( len(self.S.getCVTerms()) == 1 )
-    self.assert_( self.S.getCVTerm(0) != cv )
+    self.assertTrue( self.S.getNumCVTerms() == 1 )
+    #self.assertTrue( self.S.getCVTerms() != None )
+    self.assertTrue( len(self.S.getCVTerms()) == 1 )
+    self.assertTrue( self.S.getCVTerm(0) != cv )
     _dummyList = [ cv ]; _dummyList[:] = []; del _dummyList
     pass
 
@@ -75,43 +75,43 @@ def test_SBase_addCVTerms(self):
     cv.addResource( "foo")
     self.S.setMetaId( "sbase1")
     self.S.addCVTerm(cv)
-    self.assert_( self.S.getNumCVTerms() == 1 )
-    #self.assert_( self.S.getCVTerms() != None )
-    self.assert_( len(self.S.getCVTerms()) == 1 )
+    self.assertTrue( self.S.getNumCVTerms() == 1 )
+    #self.assertTrue( self.S.getCVTerms() != None )
+    self.assertTrue( len(self.S.getCVTerms()) == 1 )
     res = self.S.getCVTerm(0).getResources()
-    self.assert_((  "foo" == res.getValue(0) ))
+    self.assertTrue((  "foo" == res.getValue(0) ))
     cv1 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     cv1.setBiologicalQualifierType(libsbml.BQB_IS)
     cv1.addResource( "bar")
     self.S.addCVTerm(cv1)
-    self.assert_( self.S.getNumCVTerms() == 2 )
+    self.assertTrue( self.S.getNumCVTerms() == 2 )
     cv2 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     cv2.setBiologicalQualifierType(libsbml.BQB_IS)
     cv2.addResource( "bar1")
     self.S.addCVTerm(cv2)
-    self.assert_( self.S.getNumCVTerms() == 2 )
+    self.assertTrue( self.S.getNumCVTerms() == 2 )
     res = self.S.getCVTerm(1).getResources()
-    self.assert_( res.getLength() == 2 )
-    self.assert_((  "bar" == res.getValue(0) ))
-    self.assert_((  "bar1" == res.getValue(1) ))
+    self.assertTrue( res.getLength() == 2 )
+    self.assertTrue((  "bar" == res.getValue(0) ))
+    self.assertTrue((  "bar1" == res.getValue(1) ))
     cv4 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     cv4.setBiologicalQualifierType(libsbml.BQB_IS)
     cv4.addResource( "bar1")
     self.S.addCVTerm(cv4)
-    self.assert_( self.S.getNumCVTerms() == 2 )
+    self.assertTrue( self.S.getNumCVTerms() == 2 )
     res = self.S.getCVTerm(1).getResources()
-    self.assert_( res.getLength() == 2 )
-    self.assert_((  "bar" == res.getValue(0) ))
-    self.assert_((  "bar1" == res.getValue(1) ))
+    self.assertTrue( res.getLength() == 2 )
+    self.assertTrue((  "bar" == res.getValue(0) ))
+    self.assertTrue((  "bar1" == res.getValue(1) ))
     cv5 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     cv5.setBiologicalQualifierType(libsbml.BQB_HAS_PART)
     cv5.addResource( "bar1")
     self.S.addCVTerm(cv5)
-    self.assert_( self.S.getNumCVTerms() == 2 )
+    self.assertTrue( self.S.getNumCVTerms() == 2 )
     res = self.S.getCVTerm(1).getResources()
-    self.assert_( res.getLength() == 2 )
-    self.assert_((  "bar" == res.getValue(0) ))
-    self.assert_((  "bar1" == res.getValue(1) ))
+    self.assertTrue( res.getLength() == 2 )
+    self.assertTrue((  "bar" == res.getValue(0) ))
+    self.assertTrue((  "bar1" == res.getValue(1) ))
     _dummyList = [ cv ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ cv2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ cv1 ]; _dummyList[:] = []; del _dummyList
@@ -131,22 +131,22 @@ def test_SBase_appendNotes(self):
     node = libsbml.XMLNode(token)
     node.addChild(node4)
     self.S.setNotes(node)
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( self.S.isSetNotes() == True )
     token1 = libsbml.XMLToken(triple,att,ns)
     node1 = libsbml.XMLNode(token1)
     node1.addChild(node5)
     self.S.appendNotes(node1)
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( self.S.isSetNotes() == True )
     node2 = self.S.getNotes()
-    self.assert_( node2.getNumChildren() == 2 )
-    self.assert_((  "p" == node2.getChild(0).getName() ))
-    self.assert_( node2.getChild(0).getNumChildren() == 1 )
-    self.assert_((  "p" == node2.getChild(1).getName() ))
-    self.assert_( node2.getChild(1).getNumChildren() == 1 )
+    self.assertTrue( node2.getNumChildren() == 2 )
+    self.assertTrue((  "p" == node2.getChild(0).getName() ))
+    self.assertTrue( node2.getChild(0).getNumChildren() == 1 )
+    self.assertTrue((  "p" == node2.getChild(1).getName() ))
+    self.assertTrue( node2.getChild(1).getNumChildren() == 1 )
     chars1 = node2.getChild(0).getChild(0).getCharacters()
     chars2 = node2.getChild(1).getChild(0).getCharacters()
-    self.assert_((  "This is my text" == chars1 ))
-    self.assert_((  "This is additional text" == chars2 ))
+    self.assertTrue((  "This is my text" == chars1 ))
+    self.assertTrue((  "This is additional text" == chars2 ))
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node1 ]; _dummyList[:] = []; del _dummyList
     pass
@@ -192,26 +192,26 @@ def test_SBase_appendNotes1(self):
     self.S.setNotes(html_node)
     self.S.appendNotes(html_node1)
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -272,26 +272,26 @@ def test_SBase_appendNotes2(self):
     self.S.setNotes(html_node)
     self.S.appendNotes(body_node1)
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -349,26 +349,26 @@ def test_SBase_appendNotes3(self):
     self.S.setNotes(html_node)
     self.S.appendNotes(p_node1)
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -427,26 +427,26 @@ def test_SBase_appendNotes4(self):
     self.S.setNotes(body_node)
     self.S.appendNotes(html_node1)
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -502,26 +502,26 @@ def test_SBase_appendNotes5(self):
     self.S.setNotes(p_node)
     self.S.appendNotes(html_node1)
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -565,23 +565,23 @@ def test_SBase_appendNotes6(self):
     self.S.setNotes(body_node)
     self.S.appendNotes(body_node1)
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ body_triple ]; _dummyList[:] = []; del _dummyList
@@ -620,23 +620,23 @@ def test_SBase_appendNotes7(self):
     self.S.setNotes(p_node)
     self.S.appendNotes(body_node1)
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ body_triple ]; _dummyList[:] = []; del _dummyList
@@ -675,23 +675,23 @@ def test_SBase_appendNotes8(self):
     self.S.setNotes(body_node)
     self.S.appendNotes(p_node1)
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ body_triple ]; _dummyList[:] = []; del _dummyList
@@ -724,26 +724,26 @@ def test_SBase_appendNotesString(self):
     "  <p xmlns=\"http://www.w3.org/1999/xhtml\">This is more test notes 2</p>\n" +
     "</notes>")
     self.S.setNotes(notes)
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( self.S.isSetNotes() == True )
     self.S.appendNotes(newnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(newnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes2 ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes2 ))
     self.S.setNotes(notes)
     self.S.appendNotes(newnotes3)
     notes3 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes3 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes3 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(newnotes4)
     notes4 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes4 == taggednewnotes2 ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes4 == taggednewnotes2 ))
     pass
 
   def test_SBase_appendNotesString1(self):
@@ -785,13 +785,13 @@ def test_SBase_appendNotesString1(self):
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString2(self):
@@ -822,13 +822,13 @@ def test_SBase_appendNotesString2(self):
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString3(self):
@@ -871,23 +871,23 @@ def test_SBase_appendNotesString3(self):
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes2 ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes2 ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes3)
     notes3 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes3 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes3 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes4)
     notes4 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes4 == taggednewnotes2 ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes4 == taggednewnotes2 ))
     pass
 
   def test_SBase_appendNotesString4(self):
@@ -923,13 +923,13 @@ def test_SBase_appendNotesString4(self):
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString5(self):
@@ -965,13 +965,13 @@ def test_SBase_appendNotesString5(self):
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString6(self):
@@ -991,13 +991,13 @@ def test_SBase_appendNotesString6(self):
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString7(self):
@@ -1017,13 +1017,13 @@ def test_SBase_appendNotesString7(self):
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString8(self):
@@ -1053,23 +1053,23 @@ def test_SBase_appendNotesString8(self):
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes2)
     notes2 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes2 == taggednewnotes2 ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes2 == taggednewnotes2 ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes3)
     notes3 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes3 == taggednewnotes ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes3 == taggednewnotes ))
     self.S.setNotes(notes)
     self.S.appendNotes(addnotes4)
     notes4 = self.S.getNotesString()
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes4 == taggednewnotes2 ))
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes4 == taggednewnotes2 ))
     pass
 
   def test_SBase_getQualifiersFromResources(self):
@@ -1078,12 +1078,12 @@ def test_SBase_getQualifiersFromResources(self):
     cv.addResource( "foo")
     self.S.setMetaId( "sbase1")
     self.S.addCVTerm(cv)
-    self.assert_( self.S.getResourceBiologicalQualifier( "foo") == libsbml.BQB_ENCODES )
+    self.assertTrue( self.S.getResourceBiologicalQualifier( "foo") == libsbml.BQB_ENCODES )
     cv1 = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
     cv1.setModelQualifierType(libsbml.BQM_IS)
     cv1.addResource( "bar")
     self.S.addCVTerm(cv1)
-    self.assert_( self.S.getResourceModelQualifier( "bar") == libsbml.BQM_IS )
+    self.assertTrue( self.S.getResourceModelQualifier( "bar") == libsbml.BQM_IS )
     _dummyList = [ cv ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ cv1 ]; _dummyList[:] = []; del _dummyList
     pass
@@ -1092,38 +1092,38 @@ def test_SBase_setAnnotation(self):
     token = libsbml.XMLToken("This is a test note")
     node = libsbml.XMLNode(token)
     self.S.setAnnotation(node)
-    self.assert_( self.S.isSetAnnotation() == True )
+    self.assertTrue( self.S.isSetAnnotation() == True )
     t1 = self.S.getAnnotation()
-    self.assert_( t1.getNumChildren() == 1 )
-    self.assert_((  "This is a test note" == t1.getChild(0).getCharacters() ))
+    self.assertTrue( t1.getNumChildren() == 1 )
+    self.assertTrue((  "This is a test note" == t1.getChild(0).getCharacters() ))
     if (self.S.getAnnotation() == node):
       pass
     self.S.setAnnotation(self.S.getAnnotation())
-    self.assert_((  "This is a test note" == self.S.getAnnotation().getChild(0).getCharacters() ))
+    self.assertTrue((  "This is a test note" == self.S.getAnnotation().getChild(0).getCharacters() ))
     self.S.setAnnotation(None)
-    self.assert_( self.S.isSetAnnotation() == False )
+    self.assertTrue( self.S.isSetAnnotation() == False )
     if (self.S.getAnnotation() != None):
       pass
     self.S.setAnnotation(node)
-    self.assert_( self.S.isSetAnnotation() == True )
+    self.assertTrue( self.S.isSetAnnotation() == True )
     self.S.unsetAnnotation()
-    self.assert_( self.S.isSetAnnotation() == False )
+    self.assertTrue( self.S.isSetAnnotation() == False )
     token = libsbml.XMLToken("(CR) &#0168; &#x00a8; &#x00A8; (NOT CR) &#; &#x; &#00a8; &#0168 &#x00a8")
     node = libsbml.XMLNode(token)
     self.S.setAnnotation(node)
     t1 = self.S.getAnnotation()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     s = t1.getChild(0).toXMLString()
     expected =  "(CR) &#0168; &#x00a8; &#x00A8; (NOT CR) &amp;#; &amp;#x; &amp;#00a8; &amp;#0168 &amp;#x00a8";
-    self.assert_(( expected == s ))
+    self.assertTrue(( expected == s ))
     token = libsbml.XMLToken("& ' > < \" &amp; &apos; &gt; &lt; &quot;")
     node = libsbml.XMLNode(token)
     self.S.setAnnotation(node)
     t1 = self.S.getAnnotation()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     s2 = t1.getChild(0).toXMLString()
     expected2 =  "&amp; &apos; &gt; &lt; &quot; &amp; &apos; &gt; &lt; &quot;";
-    self.assert_(( expected2 == s2 ))
+    self.assertTrue(( expected2 == s2 ))
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass
@@ -1132,40 +1132,40 @@ def test_SBase_setAnnotationString(self):
     annotation =  "This is a test note";
     taggedannotation =  "<annotation>This is a test note</annotation>";
     self.S.setAnnotation(annotation)
-    self.assert_( self.S.isSetAnnotation() == True )
+    self.assertTrue( self.S.isSetAnnotation() == True )
     if (( taggedannotation != self.S.getAnnotationString() )):
       pass
     t1 = self.S.getAnnotation()
-    self.assert_( t1.getNumChildren() == 1 )
-    self.assert_((  "This is a test note" == t1.getChild(0).getCharacters() ))
+    self.assertTrue( t1.getNumChildren() == 1 )
+    self.assertTrue((  "This is a test note" == t1.getChild(0).getCharacters() ))
     self.S.setAnnotation(self.S.getAnnotationString())
     t1 = self.S.getAnnotation()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     chars = self.S.getAnnotationString()
-    self.assert_(( taggedannotation == chars ))
+    self.assertTrue(( taggedannotation == chars ))
     self.S.setAnnotation( "")
-    self.assert_( self.S.isSetAnnotation() == False )
+    self.assertTrue( self.S.isSetAnnotation() == False )
     if (self.S.getAnnotationString() != None):
       pass
     self.S.setAnnotation(taggedannotation)
-    self.assert_( self.S.isSetAnnotation() == True )
+    self.assertTrue( self.S.isSetAnnotation() == True )
     if (( taggedannotation != self.S.getAnnotationString() )):
       pass
     t1 = self.S.getAnnotation()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     t2 = t1.getChild(0)
-    self.assert_((  "This is a test note" == t2.getCharacters() ))
+    self.assertTrue((  "This is a test note" == t2.getCharacters() ))
     pass
 
   def test_SBase_setMetaId(self):
     metaid =  "x12345";
     self.S.setMetaId(metaid)
-    self.assert_(( metaid == self.S.getMetaId() ))
+    self.assertTrue(( metaid == self.S.getMetaId() ))
     self.assertEqual( True, self.S.isSetMetaId() )
     if (self.S.getMetaId() == metaid):
       pass
     self.S.setMetaId(self.S.getMetaId())
-    self.assert_(( metaid == self.S.getMetaId() ))
+    self.assertTrue(( metaid == self.S.getMetaId() ))
     self.S.setMetaId("")
     self.assertEqual( False, self.S.isSetMetaId() )
     if (self.S.getMetaId() != None):
@@ -1177,39 +1177,39 @@ def test_SBase_setNotes(self):
     token = libsbml.XMLToken("This is a test note")
     node = libsbml.XMLNode(token)
     c.setNotes(node)
-    self.assert_( c.isSetNotes() == True )
+    self.assertTrue( c.isSetNotes() == True )
     if (c.getNotes() == node):
       pass
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
-    self.assert_((  "This is a test note" == t1.getChild(0).getCharacters() ))
+    self.assertTrue( t1.getNumChildren() == 1 )
+    self.assertTrue((  "This is a test note" == t1.getChild(0).getCharacters() ))
     c.setNotes(c.getNotes())
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     chars = t1.getChild(0).getCharacters()
-    self.assert_((  "This is a test note" == chars ))
+    self.assertTrue((  "This is a test note" == chars ))
     c.setNotes(None)
-    self.assert_( c.isSetNotes() == False )
+    self.assertTrue( c.isSetNotes() == False )
     if (c.getNotes() != None):
       pass
     c.setNotes(node)
-    self.assert_( c.isSetNotes() == True )
+    self.assertTrue( c.isSetNotes() == True )
     token = libsbml.XMLToken("(CR) &#0168; &#x00a8; &#x00A8; (NOT CR) &#; &#x; &#00a8; &#0168 &#x00a8")
     node = libsbml.XMLNode(token)
     c.setNotes(node)
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     s = t1.getChild(0).toXMLString()
     expected =  "(CR) &#0168; &#x00a8; &#x00A8; (NOT CR) &amp;#; &amp;#x; &amp;#00a8; &amp;#0168 &amp;#x00a8";
-    self.assert_(( expected == s ))
+    self.assertTrue(( expected == s ))
     token = libsbml.XMLToken("& ' > < \" &amp; &apos; &gt; &lt; &quot;")
     node = libsbml.XMLNode(token)
     c.setNotes(node)
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     s2 = t1.getChild(0).toXMLString()
     expected2 =  "&amp; &apos; &gt; &lt; &quot; &amp; &apos; &gt; &lt; &quot;";
-    self.assert_(( expected2 == s2 ))
+    self.assertTrue(( expected2 == s2 ))
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass
@@ -1219,37 +1219,37 @@ def test_SBase_setNotesString(self):
     notes =  "This is a test note";
     taggednotes =  "<notes>This is a test note</notes>";
     c.setNotes(notes)
-    self.assert_( c.isSetNotes() == True )
+    self.assertTrue( c.isSetNotes() == True )
     if (( taggednotes != c.getNotesString() )):
       pass
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     t2 = t1.getChild(0)
-    self.assert_((  "This is a test note" == t2.getCharacters() ))
+    self.assertTrue((  "This is a test note" == t2.getCharacters() ))
     c.setNotes(c.getNotesString())
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     chars = c.getNotesString()
-    self.assert_(( taggednotes == chars ))
+    self.assertTrue(( taggednotes == chars ))
     c.setNotes("")
-    self.assert_( c.isSetNotes() == False )
+    self.assertTrue( c.isSetNotes() == False )
     if (c.getNotesString() != None):
       pass
     c.setNotes(taggednotes)
-    self.assert_( c.isSetNotes() == True )
+    self.assertTrue( c.isSetNotes() == True )
     if (( taggednotes != c.getNotesString() )):
       pass
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     t2 = t1.getChild(0)
-    self.assert_((  "This is a test note" == t2.getCharacters() ))
+    self.assertTrue((  "This is a test note" == t2.getCharacters() ))
     pass
 
   def test_SBase_setNotesString_l3(self):
     c = libsbml.Model(3,1)
     notes =  "This is a test note";
     c.setNotes(notes)
-    self.assert_( c.isSetNotes() == False )
+    self.assertTrue( c.isSetNotes() == False )
     pass
 
   def test_SBase_setNotesString_l3_addMarkup(self):
@@ -1258,34 +1258,34 @@ def test_SBase_setNotesString_l3_addMarkup(self):
     taggednotes = wrapString("<notes>\n" + "  <p xmlns=\"http://www.w3.org/1999/xhtml\">This is a test note</p>\n" +
     "</notes>")
     c.setNotes(notes, True)
-    self.assert_( c.isSetNotes() == True )
+    self.assertTrue( c.isSetNotes() == True )
     if (( taggednotes != c.getNotesString() )):
       pass
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     t2 = t1.getChild(0)
-    self.assert_( t2.getNumChildren() == 1 )
+    self.assertTrue( t2.getNumChildren() == 1 )
     t3 = t2.getChild(0)
-    self.assert_((  "This is a test note" == t3.getCharacters() ))
+    self.assertTrue((  "This is a test note" == t3.getCharacters() ))
     c.setNotes(c.getNotesString(), True)
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     chars = c.getNotesString()
-    self.assert_(( taggednotes == chars ))
+    self.assertTrue(( taggednotes == chars ))
     c.setNotes("", True)
-    self.assert_( c.isSetNotes() == False )
+    self.assertTrue( c.isSetNotes() == False )
     if (c.getNotesString() != None):
       pass
     c.setNotes(taggednotes, True)
-    self.assert_( c.isSetNotes() == True )
+    self.assertTrue( c.isSetNotes() == True )
     if (( taggednotes != c.getNotesString() )):
       pass
     t1 = c.getNotes()
-    self.assert_( t1.getNumChildren() == 1 )
+    self.assertTrue( t1.getNumChildren() == 1 )
     t2 = t1.getChild(0)
-    self.assert_( t2.getNumChildren() == 1 )
+    self.assertTrue( t2.getNumChildren() == 1 )
     t3 = t2.getChild(0)
-    self.assert_((  "This is a test note" == t3.getCharacters() ))
+    self.assertTrue((  "This is a test note" == t3.getCharacters() ))
     pass
 
   def test_SBase_unsetAnnotationWithCVTerms(self):
@@ -1310,22 +1310,22 @@ def test_SBase_unsetAnnotationWithCVTerms(self):
     "  </rdf:RDF>\n" +
     "</annotation>")
     self.S.setAnnotation(annt)
-    self.assert_( self.S.isSetAnnotation() == True )
-    self.assert_(( annt == self.S.getAnnotationString() ))
+    self.assertTrue( self.S.isSetAnnotation() == True )
+    self.assertTrue(( annt == self.S.getAnnotationString() ))
     self.S.unsetAnnotation()
-    self.assert_( self.S.isSetAnnotation() == False )
-    self.assert_( self.S.getAnnotation() == None )
+    self.assertTrue( self.S.isSetAnnotation() == False )
+    self.assertTrue( self.S.getAnnotation() == None )
     self.S.setAnnotation(annt)
     self.S.setMetaId( "_000001")
     cv = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
     cv.setBiologicalQualifierType(libsbml.BQB_IS)
     cv.addResource( "http://www.geneontology.org/#GO:0005895")
     self.S.addCVTerm(cv)
-    self.assert_( self.S.isSetAnnotation() == True )
-    self.assert_(( annt_with_cvterm == self.S.getAnnotationString() ))
+    self.assertTrue( self.S.isSetAnnotation() == True )
+    self.assertTrue(( annt_with_cvterm == self.S.getAnnotationString() ))
     self.S.unsetAnnotation()
-    self.assert_( self.S.isSetAnnotation() == False )
-    self.assert_( self.S.getAnnotation() == None )
+    self.assertTrue( self.S.isSetAnnotation() == False )
+    self.assertTrue( self.S.getAnnotation() == None )
     _dummyList = [ cv ]; _dummyList[:] = []; del _dummyList
     pass
 
@@ -1365,11 +1365,11 @@ def test_SBase_unsetAnnotationWithModelHistory(self):
     "  </rdf:RDF>\n" +
     "</annotation>")
     self.S.setAnnotation(annt)
-    self.assert_( self.S.isSetAnnotation() == True )
-    self.assert_(( annt == self.S.getAnnotationString() ))
+    self.assertTrue( self.S.isSetAnnotation() == True )
+    self.assertTrue(( annt == self.S.getAnnotationString() ))
     self.S.unsetAnnotation()
-    self.assert_( self.S.isSetAnnotation() == False )
-    self.assert_( self.S.getAnnotation() == None )
+    self.assertTrue( self.S.isSetAnnotation() == False )
+    self.assertTrue( self.S.getAnnotation() == None )
     self.S.setAnnotation(annt)
     self.S.setMetaId( "_000001")
     c.setFamilyName("Keating")
@@ -1381,11 +1381,11 @@ def test_SBase_unsetAnnotationWithModelHistory(self):
     dm = libsbml.Date(2005,12,30,12,15,45,1,2,0)
     h.setModifiedDate(dm)
     self.S.setModelHistory(h)
-    self.assert_( self.S.isSetAnnotation() == True )
-    self.assert_(( annt_with_modelhistory == self.S.getAnnotationString() ))
+    self.assertTrue( self.S.isSetAnnotation() == True )
+    self.assertTrue(( annt_with_modelhistory == self.S.getAnnotationString() ))
     self.S.unsetAnnotation()
-    self.assert_( self.S.isSetAnnotation() == False )
-    self.assert_( self.S.getAnnotation() == None )
+    self.assertTrue( self.S.isSetAnnotation() == False )
+    self.assertTrue( self.S.getAnnotation() == None )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ h ]; _dummyList[:] = []; del _dummyList
     pass
@@ -1408,11 +1408,11 @@ def test_SBase_unsetCVTerms(self):
     cv4.setBiologicalQualifierType(libsbml.BQB_IS)
     cv4.addResource( "bar1")
     self.S.addCVTerm(cv4)
-    self.assert_( self.S.getNumCVTerms() == 2 )
+    self.assertTrue( self.S.getNumCVTerms() == 2 )
     self.S.unsetCVTerms()
-    self.assert_( self.S.getNumCVTerms() == 0 )
-    #self.assert_( self.S.getCVTerms() == None )
-    self.assert_( len(self.S.getCVTerms()) == 0 )
+    self.assertTrue( self.S.getNumCVTerms() == 0 )
+    #self.assertTrue( self.S.getCVTerms() == None )
+    self.assertTrue( len(self.S.getCVTerms()) == 0 )
     _dummyList = [ cv ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ cv2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ cv1 ]; _dummyList[:] = []; del _dummyList
diff --git a/src/bindings/python/test/sbml/TestSBase_newSetters.py b/src/bindings/python/test/sbml/TestSBase_newSetters.py
index e4d8326338..4ba2eb946e 100644
--- a/src/bindings/python/test/sbml/TestSBase_newSetters.py
+++ b/src/bindings/python/test/sbml/TestSBase_newSetters.py
@@ -59,25 +59,25 @@ def test_SBase_addCVTerms(self):
     cv.setBiologicalQualifierType(libsbml.BQB_ENCODES)
     cv.addResource( "foo")
     i = self.S.addCVTerm(cv)
-    self.assert_( i == libsbml.LIBSBML_MISSING_METAID )
-    self.assert_( self.S.getNumCVTerms() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_MISSING_METAID )
+    self.assertTrue( self.S.getNumCVTerms() == 0 )
     self.S.setMetaId( "_id")
     i = self.S.addCVTerm(cv)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.getNumCVTerms() == 1 )
-    #self.assert_( self.S.getCVTerms() != None )
-    self.assert_( len(self.S.getCVTerms()) == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.getNumCVTerms() == 1 )
+    #self.assertTrue( self.S.getCVTerms() != None )
+    self.assertTrue( len(self.S.getCVTerms()) == 1 )
     i = self.S.addCVTerm(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( self.S.getNumCVTerms() == 1 )
-    #self.assert_( self.S.getCVTerms() != None )
-    self.assert_( len(self.S.getCVTerms()) == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( self.S.getNumCVTerms() == 1 )
+    #self.assertTrue( self.S.getCVTerms() != None )
+    self.assertTrue( len(self.S.getCVTerms()) == 1 )
     cv2 = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
     i = self.S.addCVTerm(cv2)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( self.S.getNumCVTerms() == 1 )
-    #self.assert_( self.S.getCVTerms() != None )
-    self.assert_( len(self.S.getCVTerms()) == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( self.S.getNumCVTerms() == 1 )
+    #self.assertTrue( self.S.getCVTerms() != None )
+    self.assertTrue( len(self.S.getCVTerms()) == 1 )
     _dummyList = [ cv ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ cv2 ]; _dummyList[:] = []; del _dummyList
     pass
@@ -101,12 +101,12 @@ def test_SBase_appendAnnotation(self):
     node_top1 = libsbml.XMLNode(token_top1);
     node_top1.addChild(node1);
     i = self.S.setAnnotation(node_top)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = self.S.appendAnnotation(node_top1)
     t1 = self.S.getAnnotation()
-    self.assert_( t1.getNumChildren() == 2 )
-    self.assert_((     "This is a test note" == t1.getChild(0).getChild(0).getCharacters() ))
-    self.assert_((     "This is additional" == t1.getChild(1).getChild(0).getCharacters() ))
+    self.assertTrue( t1.getNumChildren() == 2 )
+    self.assertTrue((     "This is a test note" == t1.getChild(0).getChild(0).getCharacters() ))
+    self.assertTrue((     "This is additional" == t1.getChild(1).getChild(0).getCharacters() ))
     pass
 
   def test_SBase_appendAnnotationString(self):
@@ -120,14 +120,14 @@ def test_SBase_appendAnnotationString(self):
     node_top = libsbml.XMLNode(token_top);
     node_top.addChild(node);
     i = self.S.setAnnotation(node_top)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = self.S.appendAnnotation("<prA:other xmlns:prA=\"http://some\">This is additional</prA:other>");
     t1 = self.S.getAnnotation()
-    self.assert_( t1.getNumChildren() == 2 )
-    self.assert_((     "This is a test note" == t1.getChild(0).getChild(0).getCharacters() ))
+    self.assertTrue( t1.getNumChildren() == 2 )
+    self.assertTrue((     "This is a test note" == t1.getChild(0).getChild(0).getCharacters() ))
     c1 = t1.getChild(1)
-    self.assert_( c1.getNumChildren() == 1 )
-    self.assert_((  "This is additional" == c1.getChild(0).getCharacters() ))
+    self.assertTrue( c1.getNumChildren() == 1 )
+    self.assertTrue((  "This is additional" == c1.getChild(0).getCharacters() ))
     pass
 
   def test_SBase_appendNotes(self):
@@ -143,24 +143,24 @@ def test_SBase_appendNotes(self):
     node = libsbml.XMLNode(token)
     node.addChild(node4)
     i = self.S.setNotes(node)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
     token1 = libsbml.XMLToken(triple,att,ns)
     node1 = libsbml.XMLNode(token1)
     node1.addChild(node5)
     i = self.S.appendNotes(node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
     node2 = self.S.getNotes()
-    self.assert_( node2.getNumChildren() == 2 )
-    self.assert_((  "p" == node2.getChild(0).getName() ))
-    self.assert_( node2.getChild(0).getNumChildren() == 1 )
-    self.assert_((  "p" == node2.getChild(1).getName() ))
-    self.assert_( node2.getChild(1).getNumChildren() == 1 )
+    self.assertTrue( node2.getNumChildren() == 2 )
+    self.assertTrue((  "p" == node2.getChild(0).getName() ))
+    self.assertTrue( node2.getChild(0).getNumChildren() == 1 )
+    self.assertTrue((  "p" == node2.getChild(1).getName() ))
+    self.assertTrue( node2.getChild(1).getNumChildren() == 1 )
     chars1 = node2.getChild(0).getChild(0).getCharacters()
     chars2 = node2.getChild(1).getChild(0).getCharacters()
-    self.assert_((  "This is my text" == chars1 ))
-    self.assert_((  "This is additional text" == chars2 ))
+    self.assertTrue((  "This is my text" == chars1 ))
+    self.assertTrue((  "This is additional text" == chars2 ))
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node1 ]; _dummyList[:] = []; del _dummyList
     pass
@@ -205,28 +205,28 @@ def test_SBase_appendNotes1(self):
     html_node1.addChild(body_node1)
     i = self.S.setNotes(html_node)
     i = self.S.appendNotes(html_node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -286,28 +286,28 @@ def test_SBase_appendNotes2(self):
     body_node1.addChild(p_node1)
     i = self.S.setNotes(html_node)
     i = self.S.appendNotes(body_node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -364,28 +364,28 @@ def test_SBase_appendNotes3(self):
     p_node1.addChild(text_node1)
     i = self.S.setNotes(html_node)
     i = self.S.appendNotes(p_node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -443,28 +443,28 @@ def test_SBase_appendNotes4(self):
     html_node1.addChild(body_node1)
     i = self.S.setNotes(body_node)
     i = self.S.appendNotes(html_node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -519,28 +519,28 @@ def test_SBase_appendNotes5(self):
     html_node1.addChild(body_node1)
     i = self.S.setNotes(p_node)
     i = self.S.appendNotes(html_node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -583,25 +583,25 @@ def test_SBase_appendNotes6(self):
     body_node1.addChild(p_node1)
     i = self.S.setNotes(body_node)
     i = self.S.appendNotes(body_node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ body_triple ]; _dummyList[:] = []; del _dummyList
@@ -639,25 +639,25 @@ def test_SBase_appendNotes7(self):
     body_node1.addChild(p_node1)
     i = self.S.setNotes(p_node)
     i = self.S.appendNotes(body_node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ body_triple ]; _dummyList[:] = []; del _dummyList
@@ -695,25 +695,25 @@ def test_SBase_appendNotes8(self):
     p_node1.addChild(text_node1)
     i = self.S.setNotes(body_node)
     i = self.S.appendNotes(p_node1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child1 = child.getChild(0)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is my text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     child1 = child.getChild(1)
-    self.assert_((  "p" == child1.getName() ))
-    self.assert_( child1.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child1.getName() ))
+    self.assertTrue( child1.getNumChildren() == 1 )
     child1 = child1.getChild(0)
-    self.assert_((  "This is more text" == child1.getCharacters() ))
-    self.assert_( child1.getNumChildren() == 0 )
+    self.assertTrue((  "This is more text" == child1.getCharacters() ))
+    self.assertTrue( child1.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ body_triple ]; _dummyList[:] = []; del _dummyList
@@ -739,18 +739,18 @@ def test_SBase_appendNotesString(self):
     badnotes =  "<notes>This is a test note</notes>";
     newnotes =  "<p xmlns=\"http://www.w3.org/1999/xhtml\">This is more test notes </p>";
     i = self.S.setNotes(notes)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
     i = self.S.appendNotes(badnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednotes ))
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednotes ))
     i = self.S.appendNotes(newnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString1(self):
@@ -782,9 +782,9 @@ def test_SBase_appendNotesString1(self):
     i = self.S.setNotes(notes)
     i = self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString2(self):
@@ -810,9 +810,9 @@ def test_SBase_appendNotesString2(self):
     i = self.S.setNotes(notes)
     i = self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString3(self):
@@ -838,9 +838,9 @@ def test_SBase_appendNotesString3(self):
     i = self.S.setNotes(notes)
     i = self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString4(self):
@@ -866,9 +866,9 @@ def test_SBase_appendNotesString4(self):
     i = self.S.setNotes(notes)
     i = self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString5(self):
@@ -894,9 +894,9 @@ def test_SBase_appendNotesString5(self):
     i = self.S.setNotes(notes)
     i = self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString6(self):
@@ -911,9 +911,9 @@ def test_SBase_appendNotesString6(self):
     i = self.S.setNotes(notes)
     i = self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString7(self):
@@ -928,9 +928,9 @@ def test_SBase_appendNotesString7(self):
     i = self.S.setNotes(notes)
     i = self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_appendNotesString8(self):
@@ -945,78 +945,78 @@ def test_SBase_appendNotesString8(self):
     i = self.S.setNotes(notes)
     i = self.S.appendNotes(addnotes)
     notes1 = self.S.getNotesString()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
-    self.assert_(( notes1 == taggednewnotes ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
+    self.assertTrue(( notes1 == taggednewnotes ))
     pass
 
   def test_SBase_setAnnotation(self):
     token = libsbml.XMLToken("This is a test note")
     node = libsbml.XMLNode(token)
     i = self.S.setAnnotation(node)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetAnnotation() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetAnnotation() == True )
     i = self.S.unsetAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.S.unsetAnnotation()
-    self.assert_( self.S.isSetAnnotation() == False )
+    self.assertTrue( self.S.isSetAnnotation() == False )
     i = self.S.setAnnotation(node)
     i = self.S.setAnnotation(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetAnnotation() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetAnnotation() == False )
     pass
 
   def test_SBase_setAnnotationString(self):
     annotation =  "This is a test note";
     taggedannotation =  "<annotation>This is a test note</annotation>";
     i = self.S.setAnnotation(annotation)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetAnnotation() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetAnnotation() == True )
     i = self.S.setAnnotation( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetAnnotation() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetAnnotation() == False )
     i = self.S.setAnnotation(taggedannotation)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetAnnotation() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetAnnotation() == True )
     i = self.S.unsetAnnotation()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetAnnotation() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetAnnotation() == False )
     pass
 
   def test_SBase_setMetaId1(self):
     c = libsbml.Compartment(1,2)
     i = c.setMetaId( "cell")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, c.isSetMetaId() )
     c = None
     pass
 
   def test_SBase_setMetaId2(self):
     i = self.S.setMetaId( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.S.isSetMetaId() )
     i = self.S.unsetMetaId()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.S.isSetMetaId() )
     pass
 
   def test_SBase_setMetaId3(self):
     i = self.S.setMetaId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.S.isSetMetaId() )
-    self.assert_((  "cell"  == self.S.getMetaId() ))
+    self.assertTrue((  "cell"  == self.S.getMetaId() ))
     i = self.S.unsetMetaId()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.S.isSetMetaId() )
     pass
 
   def test_SBase_setMetaId4(self):
     i = self.S.setMetaId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.S.isSetMetaId() )
-    self.assert_((  "cell"  == self.S.getMetaId() ))
+    self.assertTrue((  "cell"  == self.S.getMetaId() ))
     i = self.S.setMetaId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.S.isSetMetaId() )
     pass
 
@@ -1024,7 +1024,7 @@ def test_SBase_setModelHistory(self):
     sb = libsbml.Species(2,4)
     mh = libsbml.ModelHistory()
     i = sb.setModelHistory(mh)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass
 
@@ -1042,14 +1042,14 @@ def test_SBase_setModelHistoryL3(self):
     mh.setCreatedDate(date)
     mh.setModifiedDate(date)
     i = sb.setModelHistory(mh)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( sb.isSetModelHistory() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( sb.isSetModelHistory() == True )
     mh = sb.getModelHistory()
-    self.assert_( mh != None )
+    self.assertTrue( mh != None )
     sb.unsetModelHistory()
     mh = sb.getModelHistory()
-    self.assert_( sb.isSetModelHistory() == False )
-    self.assert_( mh == None )
+    self.assertTrue( sb.isSetModelHistory() == False )
+    self.assertTrue( mh == None )
     _dummyList = [ mh ]; _dummyList[:] = []; del _dummyList
     pass
 
@@ -1066,7 +1066,7 @@ def test_SBase_setModelHistory_Model(self):
     history.setCreatedDate(date)
     history.setModifiedDate(date)
     i = self.S.setModelHistory(history)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     _dummyList = [ history ]; _dummyList[:] = []; del _dummyList
     pass
 
@@ -1074,11 +1074,11 @@ def test_SBase_setNamespaces(self):
     ns = libsbml.XMLNamespaces()
     ns.add("url", "name")
     i = self.S.setNamespaces(ns)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( (self.S).getNamespaces().getLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( (self.S).getNamespaces().getLength() == 1 )
     i = self.S.setNamespaces(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( (self.S).getNamespaces() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( (self.S).getNamespaces() == None )
     pass
 
   def test_SBase_setNotes(self):
@@ -1092,25 +1092,25 @@ def test_SBase_setNotes(self):
     node = libsbml.XMLNode(token)
     node.addChild(n1)
     i = self.S.setNotes(node)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
     i = self.S.unsetNotes()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( (self.S.isSetNotes() == True) == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( (self.S.isSetNotes() == True) == False )
     token = libsbml.XMLToken("This is a test note")
     node = libsbml.XMLNode(token)
     i = self.S.setNotes(node)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( (self.S.isSetNotes() == True) == False )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( (self.S.isSetNotes() == True) == False )
     token = libsbml.XMLToken(triple,att,ns)
     node = libsbml.XMLNode(token)
     node.addChild(n1)
     i = self.S.setNotes(node)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
     i = self.S.setNotes(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( (self.S.isSetNotes() == True) == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( (self.S.isSetNotes() == True) == False )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass
 
@@ -1141,22 +1141,22 @@ def test_SBase_setNotes1(self):
     html_node.addChild(head_node)
     html_node.addChild(body_node)
     i = self.S.setNotes(html_node)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "html" == child.getName() ))
-    self.assert_( child.getNumChildren() == 2 )
+    self.assertTrue((  "html" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 2 )
     child = child.getChild(1)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 1 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 1 )
     child = child.getChild(0)
-    self.assert_((  "p" == child.getName() ))
-    self.assert_( child.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 1 )
     child = child.getChild(0)
-    self.assert_((  "This is my text" == child.getCharacters() ))
-    self.assert_( child.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child.getCharacters() ))
+    self.assertTrue( child.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ html_triple ]; _dummyList[:] = []; del _dummyList
@@ -1190,19 +1190,19 @@ def test_SBase_setNotes2(self):
     p_node.addChild(text_node)
     body_node.addChild(p_node)
     i = self.S.setNotes(body_node)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "body" == child.getName() ))
-    self.assert_( child.getNumChildren() == 1 )
+    self.assertTrue((  "body" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 1 )
     child = child.getChild(0)
-    self.assert_((  "p" == child.getName() ))
-    self.assert_( child.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 1 )
     child = child.getChild(0)
-    self.assert_((  "This is my text" == child.getCharacters() ))
-    self.assert_( child.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child.getCharacters() ))
+    self.assertTrue( child.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ body_triple ]; _dummyList[:] = []; del _dummyList
@@ -1226,16 +1226,16 @@ def test_SBase_setNotes3(self):
     text_node = libsbml.XMLNode(text_token)
     p_node.addChild(text_node)
     i = self.S.setNotes(p_node)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     notes = self.S.getNotes()
-    self.assert_((  "notes" == notes.getName() ))
-    self.assert_( notes.getNumChildren() == 1 )
+    self.assertTrue((  "notes" == notes.getName() ))
+    self.assertTrue( notes.getNumChildren() == 1 )
     child = notes.getChild(0)
-    self.assert_((  "p" == child.getName() ))
-    self.assert_( child.getNumChildren() == 1 )
+    self.assertTrue((  "p" == child.getName() ))
+    self.assertTrue( child.getNumChildren() == 1 )
     child = child.getChild(0)
-    self.assert_((  "This is my text" == child.getCharacters() ))
-    self.assert_( child.getNumChildren() == 0 )
+    self.assertTrue((  "This is my text" == child.getCharacters() ))
+    self.assertTrue( child.getNumChildren() == 0 )
     _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ p_triple ]; _dummyList[:] = []; del _dummyList
@@ -1250,92 +1250,92 @@ def test_SBase_setNotesString(self):
     taggednotes =  "<notes><p xmlns=\"http://www.w3.org/1999/xhtml\">This is a test note </p></notes>";
     badnotes =  "<notes>This is a test note</notes>";
     i = self.S.setNotes(notes)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
     i = self.S.unsetNotes()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( (self.S.isSetNotes() == True) == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( (self.S.isSetNotes() == True) == False )
     i = self.S.setNotes(taggednotes)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.isSetNotes() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.isSetNotes() == True )
     i = self.S.setNotes(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( (self.S.isSetNotes() == True) == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( (self.S.isSetNotes() == True) == False )
     i = self.S.setNotes(badnotes)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
-    self.assert_( (self.S.isSetNotes() == True) == False )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( (self.S.isSetNotes() == True) == False )
     pass
 
   def test_SBase_setSBOTerm1(self):
     c = libsbml.Compartment(1,2)
     i = c.setSBOTerm(2)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, c.isSetSBOTerm() )
     c = None
     pass
 
   def test_SBase_setSBOTerm2(self):
     i = self.S.setSBOTerm(5)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTerm() == 5 )
-    self.assert_( (  "SBO:0000005" != self.S.getSBOTermID() ) == False )
-    self.assert_( (  "http://identifiers.org/biomodels.sbo/SBO:0000005" != self.S.getSBOTermAsURL() ) == False )
+    self.assertTrue( self.S.getSBOTerm() == 5 )
+    self.assertTrue( (  "SBO:0000005" != self.S.getSBOTermID() ) == False )
+    self.assertTrue( (  "http://identifiers.org/biomodels.sbo/SBO:0000005" != self.S.getSBOTermAsURL() ) == False )
     i = self.S.unsetSBOTerm()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTermID() == "" )
-    self.assert_( self.S.getSBOTermAsURL() == "" )
+    self.assertTrue( self.S.getSBOTermID() == "" )
+    self.assertTrue( self.S.getSBOTermAsURL() == "" )
     i = self.S.setSBOTerm(0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTerm() == 0 )
-    self.assert_( (  "SBO:0000000" != self.S.getSBOTermID() ) == False )
-    self.assert_( (  "http://identifiers.org/biomodels.sbo/SBO:0000000" != self.S.getSBOTermAsURL() ) == False )
+    self.assertTrue( self.S.getSBOTerm() == 0 )
+    self.assertTrue( (  "SBO:0000000" != self.S.getSBOTermID() ) == False )
+    self.assertTrue( (  "http://identifiers.org/biomodels.sbo/SBO:0000000" != self.S.getSBOTermAsURL() ) == False )
     i = self.S.setSBOTerm(9999999)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTerm() == 9999999 )
-    self.assert_( (  "SBO:9999999" != self.S.getSBOTermID() ) == False )
-    self.assert_( (  "http://identifiers.org/biomodels.sbo/SBO:9999999" != self.S.getSBOTermAsURL() ) == False )
+    self.assertTrue( self.S.getSBOTerm() == 9999999 )
+    self.assertTrue( (  "SBO:9999999" != self.S.getSBOTermID() ) == False )
+    self.assertTrue( (  "http://identifiers.org/biomodels.sbo/SBO:9999999" != self.S.getSBOTermAsURL() ) == False )
     i = self.S.setSBOTerm( "SBO:0000005")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTerm() == 5 )
-    self.assert_( (  "SBO:0000005" != self.S.getSBOTermID() ) == False )
-    self.assert_( (  "http://identifiers.org/biomodels.sbo/SBO:0000005" != self.S.getSBOTermAsURL() ) == False )
+    self.assertTrue( self.S.getSBOTerm() == 5 )
+    self.assertTrue( (  "SBO:0000005" != self.S.getSBOTermID() ) == False )
+    self.assertTrue( (  "http://identifiers.org/biomodels.sbo/SBO:0000005" != self.S.getSBOTermAsURL() ) == False )
     i = self.S.unsetSBOTerm()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTermID() == "" )
-    self.assert_( self.S.getSBOTermAsURL() == "" )
+    self.assertTrue( self.S.getSBOTermID() == "" )
+    self.assertTrue( self.S.getSBOTermAsURL() == "" )
     i = self.S.setSBOTerm( "SBO:0000000")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTerm() == 0 )
-    self.assert_( (  "SBO:0000000" != self.S.getSBOTermID() ) == False )
-    self.assert_( (  "http://identifiers.org/biomodels.sbo/SBO:0000000" != self.S.getSBOTermAsURL() ) == False )
+    self.assertTrue( self.S.getSBOTerm() == 0 )
+    self.assertTrue( (  "SBO:0000000" != self.S.getSBOTermID() ) == False )
+    self.assertTrue( (  "http://identifiers.org/biomodels.sbo/SBO:0000000" != self.S.getSBOTermAsURL() ) == False )
     i = self.S.setSBOTerm( "SBO:9999999")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTerm() == 9999999 )
-    self.assert_( (  "SBO:9999999" != self.S.getSBOTermID() ) == False )
-    self.assert_( (  "http://identifiers.org/biomodels.sbo/SBO:9999999" != self.S.getSBOTermAsURL() ) == False )
+    self.assertTrue( self.S.getSBOTerm() == 9999999 )
+    self.assertTrue( (  "SBO:9999999" != self.S.getSBOTermID() ) == False )
+    self.assertTrue( (  "http://identifiers.org/biomodels.sbo/SBO:9999999" != self.S.getSBOTermAsURL() ) == False )
     i = self.S.setSBOTerm(SBML_INT_MAX)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTermID() == "" )
-    self.assert_( self.S.getSBOTermAsURL() == "" )
+    self.assertTrue( self.S.getSBOTermID() == "" )
+    self.assertTrue( self.S.getSBOTermAsURL() == "" )
     i = self.S.setSBOTerm(-1)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTermID() == "" )
-    self.assert_( self.S.getSBOTermAsURL() == "" )
+    self.assertTrue( self.S.getSBOTermID() == "" )
+    self.assertTrue( self.S.getSBOTermAsURL() == "" )
     i = self.S.setSBOTerm(10000000)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.S.isSetSBOTerm() )
-    self.assert_( self.S.getSBOTermID() == "" )
-    self.assert_( self.S.getSBOTermAsURL() == "" )
+    self.assertTrue( self.S.getSBOTermID() == "" )
+    self.assertTrue( self.S.getSBOTermAsURL() == "" )
     pass
 
   def test_SBase_unsetCVTerms(self):
@@ -1356,12 +1356,12 @@ def test_SBase_unsetCVTerms(self):
     cv4.setBiologicalQualifierType(libsbml.BQB_IS)
     cv4.addResource( "bar1")
     self.S.addCVTerm(cv4)
-    self.assert_( self.S.getNumCVTerms() == 2 )
+    self.assertTrue( self.S.getNumCVTerms() == 2 )
     i = self.S.unsetCVTerms()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.S.getNumCVTerms() == 0 )
-    #self.assert_( self.S.getCVTerms() == None )
-    self.assert_( len(self.S.getCVTerms()) == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.S.getNumCVTerms() == 0 )
+    #self.assertTrue( self.S.getCVTerms() == None )
+    self.assertTrue( len(self.S.getCVTerms()) == 0 )
     _dummyList = [ cv ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ cv2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ cv1 ]; _dummyList[:] = []; del _dummyList
diff --git a/src/bindings/python/test/sbml/TestSpecies.py b/src/bindings/python/test/sbml/TestSpecies.py
index 0a61fd5f30..546ee2fccf 100644
--- a/src/bindings/python/test/sbml/TestSpecies.py
+++ b/src/bindings/python/test/sbml/TestSpecies.py
@@ -50,21 +50,21 @@ def tearDown(self):
     pass  
 
   def test_Species_create(self):
-    self.assert_( self.S.getTypeCode() == libsbml.SBML_SPECIES )
-    self.assert_( self.S.getMetaId() == "" )
-    self.assert_( self.S.getNotes() == None )
-    self.assert_( self.S.getAnnotation() == None )
-    self.assert_( self.S.getId() == "" )
-    self.assert_( self.S.getName() == "" )
-    self.assert_( self.S.getCompartment() == "" )
-    self.assert_( self.S.getInitialAmount() == 0.0 )
-    self.assert_( self.S.getInitialConcentration() == 0.0 )
-    self.assert_( self.S.getSubstanceUnits() == "" )
-    self.assert_( self.S.getSpatialSizeUnits() == "" )
-    self.assert_( self.S.getHasOnlySubstanceUnits() == False )
-    self.assert_( self.S.getBoundaryCondition() == False )
-    self.assert_( self.S.getCharge() == 0 )
-    self.assert_( self.S.getConstant() == False )
+    self.assertTrue( self.S.getTypeCode() == libsbml.SBML_SPECIES )
+    self.assertTrue( self.S.getMetaId() == "" )
+    self.assertTrue( self.S.getNotes() == None )
+    self.assertTrue( self.S.getAnnotation() == None )
+    self.assertTrue( self.S.getId() == "" )
+    self.assertTrue( self.S.getName() == "" )
+    self.assertTrue( self.S.getCompartment() == "" )
+    self.assertTrue( self.S.getInitialAmount() == 0.0 )
+    self.assertTrue( self.S.getInitialConcentration() == 0.0 )
+    self.assertTrue( self.S.getSubstanceUnits() == "" )
+    self.assertTrue( self.S.getSpatialSizeUnits() == "" )
+    self.assertTrue( self.S.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( self.S.getBoundaryCondition() == False )
+    self.assertTrue( self.S.getCharge() == 0 )
+    self.assertTrue( self.S.getConstant() == False )
     self.assertEqual( False, self.S.isSetId() )
     self.assertEqual( False, self.S.isSetName() )
     self.assertEqual( False, self.S.isSetCompartment() )
@@ -85,14 +85,14 @@ def test_Species_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Species(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_SPECIES )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_SPECIES )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -103,12 +103,12 @@ def test_Species_free_NULL(self):
   def test_Species_setCompartment(self):
     compartment =  "cell";
     self.S.setCompartment(compartment)
-    self.assert_(( compartment == self.S.getCompartment() ))
+    self.assertTrue(( compartment == self.S.getCompartment() ))
     self.assertEqual( True, self.S.isSetCompartment() )
     if (self.S.getCompartment() == compartment):
       pass    
     self.S.setCompartment(self.S.getCompartment())
-    self.assert_(( compartment == self.S.getCompartment() ))
+    self.assertTrue(( compartment == self.S.getCompartment() ))
     self.S.setCompartment("")
     self.assertEqual( False, self.S.isSetCompartment() )
     if (self.S.getCompartment() != None):
@@ -118,12 +118,12 @@ def test_Species_setCompartment(self):
   def test_Species_setId(self):
     id =  "Glucose";
     self.S.setId(id)
-    self.assert_(( id == self.S.getId() ))
+    self.assertTrue(( id == self.S.getId() ))
     self.assertEqual( True, self.S.isSetId() )
     if (self.S.getId() == id):
       pass    
     self.S.setId(self.S.getId())
-    self.assert_(( id == self.S.getId() ))
+    self.assertTrue(( id == self.S.getId() ))
     self.S.setId("")
     self.assertEqual( False, self.S.isSetId() )
     if (self.S.getId() != None):
@@ -136,7 +136,7 @@ def test_Species_setInitialAmount(self):
     self.S.setInitialAmount(1.2)
     self.assertEqual( True, self.S.isSetInitialAmount() )
     self.assertEqual( False, self.S.isSetInitialConcentration() )
-    self.assert_( self.S.getInitialAmount() == 1.2 )
+    self.assertTrue( self.S.getInitialAmount() == 1.2 )
     pass  
 
   def test_Species_setInitialConcentration(self):
@@ -145,18 +145,18 @@ def test_Species_setInitialConcentration(self):
     self.S.setInitialConcentration(3.4)
     self.assertEqual( False, self.S.isSetInitialAmount() )
     self.assertEqual( True, self.S.isSetInitialConcentration() )
-    self.assert_( self.S.getInitialConcentration() == 3.4 )
+    self.assertTrue( self.S.getInitialConcentration() == 3.4 )
     pass  
 
   def test_Species_setName(self):
     name =  "So_Sweet";
     self.S.setName(name)
-    self.assert_(( name == self.S.getName() ))
+    self.assertTrue(( name == self.S.getName() ))
     self.assertEqual( True, self.S.isSetName() )
     if (self.S.getName() == name):
       pass    
     self.S.setName(self.S.getName())
-    self.assert_(( name == self.S.getName() ))
+    self.assertTrue(( name == self.S.getName() ))
     self.S.setName("")
     self.assertEqual( False, self.S.isSetName() )
     if (self.S.getName() != None):
@@ -167,12 +167,12 @@ def test_Species_setSpatialSizeUnits(self):
     s = libsbml.Species(2,1)
     units =  "volume";
     s.setSpatialSizeUnits(units)
-    self.assert_(( units == s.getSpatialSizeUnits() ))
+    self.assertTrue(( units == s.getSpatialSizeUnits() ))
     self.assertEqual( True, s.isSetSpatialSizeUnits() )
     if (s.getSpatialSizeUnits() == units):
       pass    
     s.setSpatialSizeUnits(s.getSpatialSizeUnits())
-    self.assert_(( units == s.getSpatialSizeUnits() ))
+    self.assertTrue(( units == s.getSpatialSizeUnits() ))
     s.setSpatialSizeUnits("")
     self.assertEqual( False, s.isSetSpatialSizeUnits() )
     if (s.getSpatialSizeUnits() != None):
@@ -183,12 +183,12 @@ def test_Species_setSpatialSizeUnits(self):
   def test_Species_setSubstanceUnits(self):
     units =  "item";
     self.S.setSubstanceUnits(units)
-    self.assert_(( units == self.S.getSubstanceUnits() ))
+    self.assertTrue(( units == self.S.getSubstanceUnits() ))
     self.assertEqual( True, self.S.isSetSubstanceUnits() )
     if (self.S.getSubstanceUnits() == units):
       pass    
     self.S.setSubstanceUnits(self.S.getSubstanceUnits())
-    self.assert_(( units == self.S.getSubstanceUnits() ))
+    self.assertTrue(( units == self.S.getSubstanceUnits() ))
     self.S.setSubstanceUnits("")
     self.assertEqual( False, self.S.isSetSubstanceUnits() )
     if (self.S.getSubstanceUnits() != None):
@@ -198,12 +198,12 @@ def test_Species_setSubstanceUnits(self):
   def test_Species_setUnits(self):
     units =  "mole";
     self.S.setUnits(units)
-    self.assert_(( units == self.S.getUnits() ))
+    self.assertTrue(( units == self.S.getUnits() ))
     self.assertEqual( True, self.S.isSetUnits() )
     if (self.S.getSubstanceUnits() == units):
       pass    
     self.S.setUnits(self.S.getSubstanceUnits())
-    self.assert_(( units == self.S.getUnits() ))
+    self.assertTrue(( units == self.S.getUnits() ))
     self.S.setUnits("")
     self.assertEqual( False, self.S.isSetUnits() )
     if (self.S.getSubstanceUnits() != None):
diff --git a/src/bindings/python/test/sbml/TestSpeciesConcentrationRule.py b/src/bindings/python/test/sbml/TestSpeciesConcentrationRule.py
index 696703408d..60479c8d91 100644
--- a/src/bindings/python/test/sbml/TestSpeciesConcentrationRule.py
+++ b/src/bindings/python/test/sbml/TestSpeciesConcentrationRule.py
@@ -51,13 +51,13 @@ def tearDown(self):
     pass  
 
   def test_SpeciesConcentrationRule_create(self):
-    self.assert_( self.SCR.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
-    self.assert_( self.SCR.getL1TypeCode() == libsbml.SBML_SPECIES_CONCENTRATION_RULE )
-    self.assert_( self.SCR.getNotes() == None )
-    self.assert_( self.SCR.getAnnotation() == None )
-    self.assert_( self.SCR.getFormula() == "" )
-    self.assert_( self.SCR.getType() == libsbml.RULE_TYPE_SCALAR )
-    self.assert_( self.SCR.getVariable() == "" )
+    self.assertTrue( self.SCR.getTypeCode() == libsbml.SBML_ASSIGNMENT_RULE )
+    self.assertTrue( self.SCR.getL1TypeCode() == libsbml.SBML_SPECIES_CONCENTRATION_RULE )
+    self.assertTrue( self.SCR.getNotes() == None )
+    self.assertTrue( self.SCR.getAnnotation() == None )
+    self.assertTrue( self.SCR.getFormula() == "" )
+    self.assertTrue( self.SCR.getType() == libsbml.RULE_TYPE_SCALAR )
+    self.assertTrue( self.SCR.getVariable() == "" )
     self.assertEqual( False, self.SCR.isSetVariable() )
     pass  
 
@@ -68,13 +68,13 @@ def test_SpeciesConcentrationRule_free_NULL(self):
   def test_SpeciesConcentrationRule_setSpecies(self):
     species =  "s2";
     self.SCR.setVariable(species)
-    self.assert_(( species == self.SCR.getVariable() ))
+    self.assertTrue(( species == self.SCR.getVariable() ))
     self.assertEqual( True, self.SCR.isSetVariable() )
     if (self.SCR.getVariable() == species):
       pass    
     s = self.SCR.getVariable()
     self.SCR.setVariable(s)
-    self.assert_(( species == self.SCR.getVariable() ))
+    self.assertTrue(( species == self.SCR.getVariable() ))
     self.SCR.setVariable("")
     self.assertEqual( False, self.SCR.isSetVariable() )
     if (self.SCR.getVariable() != None):
diff --git a/src/bindings/python/test/sbml/TestSpeciesReference.py b/src/bindings/python/test/sbml/TestSpeciesReference.py
index a69526d1bd..4ca9a56305 100644
--- a/src/bindings/python/test/sbml/TestSpeciesReference.py
+++ b/src/bindings/python/test/sbml/TestSpeciesReference.py
@@ -50,14 +50,14 @@ def tearDown(self):
     pass  
 
   def test_SpeciesReference_create(self):
-    self.assert_( self.SR.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
-    self.assert_( self.SR.getMetaId() == "" )
-    self.assert_( self.SR.getNotes() == None )
-    self.assert_( self.SR.getAnnotation() == None )
-    self.assert_( self.SR.getSpecies() == "" )
-    self.assert_( self.SR.getStoichiometry() == 1 )
-    self.assert_( self.SR.getStoichiometryMath() == None )
-    self.assert_( self.SR.getDenominator() == 1 )
+    self.assertTrue( self.SR.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
+    self.assertTrue( self.SR.getMetaId() == "" )
+    self.assertTrue( self.SR.getNotes() == None )
+    self.assertTrue( self.SR.getAnnotation() == None )
+    self.assertTrue( self.SR.getSpecies() == "" )
+    self.assertTrue( self.SR.getStoichiometry() == 1 )
+    self.assertTrue( self.SR.getStoichiometryMath() == None )
+    self.assertTrue( self.SR.getDenominator() == 1 )
     self.assertEqual( False, self.SR.isSetSpecies() )
     self.assertEqual( False, self.SR.isSetStoichiometryMath() )
     pass  
@@ -68,14 +68,14 @@ def test_SpeciesReference_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.SpeciesReference(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_SPECIES_REFERENCE )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -86,12 +86,12 @@ def test_SpeciesReference_free_NULL(self):
   def test_SpeciesReference_setId(self):
     species =  "X0";
     self.SR.setId(species)
-    self.assert_(( species == self.SR.getId() ))
+    self.assertTrue(( species == self.SR.getId() ))
     self.assertEqual( True, self.SR.isSetId() )
     if (self.SR.getId() == species):
       pass    
     self.SR.setId(self.SR.getId())
-    self.assert_(( species == self.SR.getId() ))
+    self.assertTrue(( species == self.SR.getId() ))
     self.SR.setId("")
     self.assertEqual( False, self.SR.isSetId() )
     if (self.SR.getId() != None):
@@ -101,12 +101,12 @@ def test_SpeciesReference_setId(self):
   def test_SpeciesReference_setSpecies(self):
     species =  "X0";
     self.SR.setSpecies(species)
-    self.assert_(( species == self.SR.getSpecies() ))
+    self.assertTrue(( species == self.SR.getSpecies() ))
     self.assertEqual( True, self.SR.isSetSpecies() )
     if (self.SR.getSpecies() == species):
       pass    
     self.SR.setSpecies(self.SR.getSpecies())
-    self.assert_(( species == self.SR.getSpecies() ))
+    self.assertTrue(( species == self.SR.getSpecies() ))
     self.SR.setSpecies("")
     self.assertEqual( False, self.SR.isSetSpecies() )
     if (self.SR.getSpecies() != None):
@@ -119,10 +119,10 @@ def test_SpeciesReference_setStoichiometryMath(self):
     stoich.setMath(math)
     self.SR.setStoichiometryMath(stoich)
     math1 = self.SR.getStoichiometryMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1.getMath())
-    self.assert_( formula != None )
-    self.assert_((  "k3 / k2" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "k3 / k2" == formula ))
     self.assertEqual( True, self.SR.isSetStoichiometryMath() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestSpeciesReference_newSetters.py b/src/bindings/python/test/sbml/TestSpeciesReference_newSetters.py
index ba5cdd25dc..3dbc980ef0 100644
--- a/src/bindings/python/test/sbml/TestSpeciesReference_newSetters.py
+++ b/src/bindings/python/test/sbml/TestSpeciesReference_newSetters.py
@@ -51,28 +51,28 @@ def tearDown(self):
 
   def test_SpeciesReference_setDenominator1(self):
     i = self.sr.setDenominator(2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.sr.getDenominator() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.sr.getDenominator() == 2 )
     pass  
 
   def test_SpeciesReference_setDenominator2(self):
     c = libsbml.SpeciesReference(2,2)
     i = c.setDenominator(4)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getDenominator() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getDenominator() == 4 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SpeciesReference_setId1(self):
     i = self.sr.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.sr.isSetId() )
-    self.assert_((  "cell"  == self.sr.getId() ))
+    self.assertTrue((  "cell"  == self.sr.getId() ))
     pass  
 
   def test_SpeciesReference_setId2(self):
     i = self.sr.setId( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.sr.isSetId() )
     pass  
 
@@ -84,59 +84,59 @@ def test_SpeciesReference_setId3(self):
 
   def test_SpeciesReference_setId4(self):
     i = self.sr.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.sr.isSetId() )
-    self.assert_((  "cell"  == self.sr.getId() ))
+    self.assertTrue((  "cell"  == self.sr.getId() ))
     i = self.sr.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetId() )
     pass  
 
   def test_SpeciesReference_setName1(self):
     i = self.sr.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.sr.isSetName() )
     i = self.sr.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetName() )
     pass  
 
   def test_SpeciesReference_setName2(self):
     i = self.sr.setName( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.sr.isSetName() )
     i = self.sr.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetName() )
     pass  
 
   def test_SpeciesReference_setName3(self):
     c = libsbml.SpeciesReference(2,1)
     i = c.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, c.isSetName() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SpeciesReference_setName4(self):
     i = self.sr.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.sr.isSetName() )
     i = self.sr.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetName() )
     pass  
 
   def test_SpeciesReference_setSpecies1(self):
     i = self.sr.setSpecies( "mm")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.sr.isSetSpecies() )
     pass  
 
   def test_SpeciesReference_setSpecies2(self):
     c = libsbml.SpeciesReference(2,2)
     i = c.setSpecies( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, c.isSetSpecies() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -144,32 +144,32 @@ def test_SpeciesReference_setSpecies2(self):
   def test_SpeciesReference_setSpecies3(self):
     c = libsbml.SpeciesReference(2,2)
     i = c.setSpecies( "mole")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "mole" == c.getSpecies() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "mole" == c.getSpecies() ))
     self.assertEqual( True, c.isSetSpecies() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SpeciesReference_setSpecies4(self):
     i = self.sr.setSpecies( "mm")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.sr.isSetSpecies() )
     i = self.sr.setSpecies("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetSpecies() )
     pass  
 
   def test_SpeciesReference_setStoichiometry1(self):
     i = self.sr.setStoichiometry(2.0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.sr.getStoichiometry() == 2.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.sr.getStoichiometry() == 2.0 )
     pass  
 
   def test_SpeciesReference_setStoichiometry2(self):
     c = libsbml.SpeciesReference(2,2)
     i = c.setStoichiometry(4)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getStoichiometry() == 4.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getStoichiometry() == 4.0 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -184,11 +184,11 @@ def test_SpeciesReference_setStoichiometryMath1(self):
     math.addChild(b)
     sm.setMath(math)
     i = self.sr.setStoichiometryMath(sm)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.sr.isSetStoichiometryMath() )
-    self.assert_( self.sr.getStoichiometry() == 1 )
+    self.assertTrue( self.sr.getStoichiometry() == 1 )
     i = self.sr.unsetStoichiometryMath()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetStoichiometryMath() )
     _dummyList = [ sm ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -201,17 +201,17 @@ def test_SpeciesReference_setStoichiometryMath2(self):
     math.addChild(a)
     sm.setMath(math)
     i = self.sr.setStoichiometryMath(sm)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.sr.isSetStoichiometryMath() )
     _dummyList = [ sm ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SpeciesReference_setStoichiometryMath3(self):
     i = self.sr.setStoichiometryMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetStoichiometryMath() )
     i = self.sr.unsetStoichiometryMath()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetStoichiometryMath() )
     pass  
 
@@ -220,11 +220,11 @@ def test_SpeciesReference_setStoichiometryMath4(self):
     math = None
     sm.setMath(math)
     i = self.sr.setStoichiometryMath(sm)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.sr.isSetStoichiometryMath() )
-    self.assert_( self.sr.getStoichiometry() == 1 )
+    self.assertTrue( self.sr.getStoichiometry() == 1 )
     i = self.sr.unsetStoichiometryMath()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.sr.isSetStoichiometryMath() )
     _dummyList = [ sm ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -241,7 +241,7 @@ def test_SpeciesReference_setStoichiometryMath5(self):
     math.addChild(b)
     sm.setMath(math)
     i = sr1.setStoichiometryMath(sm)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, sr1.isSetStoichiometryMath() )
     _dummyList = [ sm ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ sr1 ]; _dummyList[:] = []; del _dummyList
@@ -251,7 +251,7 @@ def test_SpeciesReference_setStoichiometryMath6(self):
     sm = libsbml.StoichiometryMath(2,1)
     sm.setMath(libsbml.parseFormula("1 + 1"))
     i = self.sr.setStoichiometryMath(sm)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
     self.assertEqual( False, self.sr.isSetStoichiometryMath() )
     _dummyList = [ sm ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -259,7 +259,7 @@ def test_SpeciesReference_setStoichiometryMath6(self):
   def test_SpeciesReference_setStoichiometryMath7(self):
     sr1 = libsbml.SpeciesReference(1,2)
     i = sr1.unsetStoichiometryMath()
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     _dummyList = [ sr1 ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestSpeciesType.py b/src/bindings/python/test/sbml/TestSpeciesType.py
index 0e077efcc7..768a88e05d 100644
--- a/src/bindings/python/test/sbml/TestSpeciesType.py
+++ b/src/bindings/python/test/sbml/TestSpeciesType.py
@@ -50,12 +50,12 @@ def tearDown(self):
     pass  
 
   def test_SpeciesType_create(self):
-    self.assert_( self.CT.getTypeCode() == libsbml.SBML_SPECIES_TYPE )
-    self.assert_( self.CT.getMetaId() == "" )
-    self.assert_( self.CT.getNotes() == None )
-    self.assert_( self.CT.getAnnotation() == None )
-    self.assert_( self.CT.getId() == "" )
-    self.assert_( self.CT.getName() == "" )
+    self.assertTrue( self.CT.getTypeCode() == libsbml.SBML_SPECIES_TYPE )
+    self.assertTrue( self.CT.getMetaId() == "" )
+    self.assertTrue( self.CT.getNotes() == None )
+    self.assertTrue( self.CT.getAnnotation() == None )
+    self.assertTrue( self.CT.getId() == "" )
+    self.assertTrue( self.CT.getName() == "" )
     self.assertEqual( False, self.CT.isSetId() )
     self.assertEqual( False, self.CT.isSetName() )
     pass  
@@ -66,14 +66,14 @@ def test_SpeciesType_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,2)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.SpeciesType(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_SPECIES_TYPE )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 2 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_SPECIES_TYPE )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 2 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -84,12 +84,12 @@ def test_SpeciesType_free_NULL(self):
   def test_SpeciesType_setId(self):
     id =  "mitochondria";
     self.CT.setId(id)
-    self.assert_(( id == self.CT.getId() ))
+    self.assertTrue(( id == self.CT.getId() ))
     self.assertEqual( True, self.CT.isSetId() )
     if (self.CT.getId() == id):
       pass    
     self.CT.setId(self.CT.getId())
-    self.assert_(( id == self.CT.getId() ))
+    self.assertTrue(( id == self.CT.getId() ))
     self.CT.setId("")
     self.assertEqual( False, self.CT.isSetId() )
     if (self.CT.getId() != None):
@@ -99,12 +99,12 @@ def test_SpeciesType_setId(self):
   def test_SpeciesType_setName(self):
     name =  "My_Favorite_Factory";
     self.CT.setName(name)
-    self.assert_(( name == self.CT.getName() ))
+    self.assertTrue(( name == self.CT.getName() ))
     self.assertEqual( True, self.CT.isSetName() )
     if (self.CT.getName() == name):
       pass    
     self.CT.setName(self.CT.getName())
-    self.assert_(( name == self.CT.getName() ))
+    self.assertTrue(( name == self.CT.getName() ))
     self.CT.setName("")
     self.assertEqual( False, self.CT.isSetName() )
     if (self.CT.getName() != None):
@@ -113,7 +113,7 @@ def test_SpeciesType_setName(self):
 
   def test_SpeciesType_unsetName(self):
     self.CT.setName( "name")
-    self.assert_((  "name"      == self.CT.getName() ))
+    self.assertTrue((  "name"      == self.CT.getName() ))
     self.assertEqual( True, self.CT.isSetName() )
     self.CT.unsetName()
     self.assertEqual( False, self.CT.isSetName() )
diff --git a/src/bindings/python/test/sbml/TestSpeciesType_newSetters.py b/src/bindings/python/test/sbml/TestSpeciesType_newSetters.py
index d7faf9e542..24086d6251 100644
--- a/src/bindings/python/test/sbml/TestSpeciesType_newSetters.py
+++ b/src/bindings/python/test/sbml/TestSpeciesType_newSetters.py
@@ -51,51 +51,51 @@ def tearDown(self):
 
   def test_SpeciesType_setId2(self):
     i = self.ST.setId( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.ST.isSetId() )
     pass  
 
   def test_SpeciesType_setId3(self):
     i = self.ST.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.ST.isSetId() )
-    self.assert_((  "cell"  == self.ST.getId() ))
+    self.assertTrue((  "cell"  == self.ST.getId() ))
     pass  
 
   def test_SpeciesType_setId4(self):
     i = self.ST.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.ST.isSetId() )
-    self.assert_((  "cell"  == self.ST.getId() ))
+    self.assertTrue((  "cell"  == self.ST.getId() ))
     i = self.ST.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.ST.isSetId() )
     pass  
 
   def test_SpeciesType_setName1(self):
     i = self.ST.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.ST.isSetName() )
     i = self.ST.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.ST.isSetName() )
     pass  
 
   def test_SpeciesType_setName2(self):
     i = self.ST.setName( "1cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.ST.isSetName() )
     i = self.ST.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.ST.isSetName() )
     pass  
 
   def test_SpeciesType_setName3(self):
     i = self.ST.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.ST.isSetName() )
     i = self.ST.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.ST.isSetName() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestSpecies_newSetters.py b/src/bindings/python/test/sbml/TestSpecies_newSetters.py
index 61bbcde617..57242e3280 100644
--- a/src/bindings/python/test/sbml/TestSpecies_newSetters.py
+++ b/src/bindings/python/test/sbml/TestSpecies_newSetters.py
@@ -51,27 +51,27 @@ def tearDown(self):
 
   def test_Species_setBoundaryCondition1(self):
     i = self.C.setBoundaryCondition(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.getBoundaryCondition() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.getBoundaryCondition() == False )
     i = self.C.setBoundaryCondition(True)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.getBoundaryCondition() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.getBoundaryCondition() == True )
     pass  
 
   def test_Species_setCharge1(self):
     i = self.C.setCharge(2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetCharge() )
-    self.assert_( self.C.getCharge() == 2 )
+    self.assertTrue( self.C.getCharge() == 2 )
     i = self.C.unsetCharge()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetCharge() )
     pass  
 
   def test_Species_setCharge2(self):
     c = libsbml.Species(2,2)
     i = c.setCharge(4)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, c.isSetCharge() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -79,64 +79,64 @@ def test_Species_setCharge2(self):
   def test_Species_setCharge3(self):
     c = libsbml.Species(2,1)
     i = c.unsetCharge()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetCharge() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setCompartment1(self):
     i = self.C.setCompartment( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.C.isSetCompartment() )
     i = self.C.setCompartment( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetCompartment() )
     pass  
 
   def test_Species_setCompartment2(self):
     i = self.C.setCompartment( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetCompartment() )
     i = self.C.setCompartment( "")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetCompartment() )
     pass  
 
   def test_Species_setConstant1(self):
     i = self.C.setConstant(False)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( self.C.getConstant() == False )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.C.getConstant() == False )
     pass  
 
   def test_Species_setConstant2(self):
     c = libsbml.Species(2,2)
     i = c.setConstant(True)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getConstant() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getConstant() == True )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setHasOnlySubstanceUnits1(self):
     i = self.C.setHasOnlySubstanceUnits(False)
-    self.assert_( self.C.getHasOnlySubstanceUnits() == False )
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.C.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     pass  
 
   def test_Species_setHasOnlySubstanceUnits2(self):
     c = libsbml.Species(2,2)
     i = c.setHasOnlySubstanceUnits(False)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getHasOnlySubstanceUnits() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getHasOnlySubstanceUnits() == False )
     i = c.setHasOnlySubstanceUnits(True)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getHasOnlySubstanceUnits() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getHasOnlySubstanceUnits() == True )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setId2(self):
     c = libsbml.Species(2,2)
     i = c.setId( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, c.isSetId() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -144,103 +144,103 @@ def test_Species_setId2(self):
   def test_Species_setId3(self):
     c = libsbml.Species(2,2)
     i = c.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, c.isSetId() )
-    self.assert_((  "cell"  == c.getId() ))
+    self.assertTrue((  "cell"  == c.getId() ))
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setId4(self):
     c = libsbml.Species(2,2)
     i = c.setId( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, c.isSetId() )
-    self.assert_((  "cell"  == c.getId() ))
+    self.assertTrue((  "cell"  == c.getId() ))
     i = c.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetId() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setInitialAmount1(self):
     i = self.C.setInitialAmount(2.0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.C.getInitialAmount() == 2.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.C.getInitialAmount() == 2.0 )
     self.assertEqual( True, self.C.isSetInitialAmount() )
     i = self.C.unsetInitialAmount()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetInitialAmount() )
     pass  
 
   def test_Species_setInitialAmount2(self):
     c = libsbml.Species(2,2)
     i = c.setInitialAmount(4)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getInitialAmount() == 4.0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getInitialAmount() == 4.0 )
     self.assertEqual( True, c.isSetInitialAmount() )
     i = c.unsetInitialAmount()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetInitialAmount() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setInitialConcentration1(self):
     i = self.C.setInitialConcentration(2.0)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.C.isSetInitialConcentration() )
     pass  
 
   def test_Species_setInitialConcentration2(self):
     c = libsbml.Species(2,2)
     i = c.setInitialConcentration(4)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getInitialConcentration() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getInitialConcentration() == 4 )
     self.assertEqual( True, c.isSetInitialConcentration() )
     i = c.unsetInitialConcentration()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetInitialConcentration() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setName1(self):
     i = self.C.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetName() )
     i = self.C.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetName() )
     pass  
 
   def test_Species_setName2(self):
     c = libsbml.Species(2,2)
     i = c.setName( "1cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, c.isSetName() )
     i = c.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetName() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setName3(self):
     i = self.C.setName( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetName() )
     i = self.C.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetName() )
     pass  
 
   def test_Species_setSpatialSizeUnits1(self):
     i = self.C.setSpatialSizeUnits( "mm")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.C.isSetSpatialSizeUnits() )
     pass  
 
   def test_Species_setSpatialSizeUnits2(self):
     c = libsbml.Species(2,2)
     i = c.setSpatialSizeUnits( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, c.isSetSpatialSizeUnits() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -248,8 +248,8 @@ def test_Species_setSpatialSizeUnits2(self):
   def test_Species_setSpatialSizeUnits3(self):
     c = libsbml.Species(2,2)
     i = c.setSpatialSizeUnits( "mole")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "mole" == c.getSpatialSizeUnits() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "mole" == c.getSpatialSizeUnits() ))
     self.assertEqual( True, c.isSetSpatialSizeUnits() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -257,27 +257,27 @@ def test_Species_setSpatialSizeUnits3(self):
   def test_Species_setSpatialSizeUnits4(self):
     c = libsbml.Species(2,2)
     i = c.setSpatialSizeUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetSpatialSizeUnits() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setSpeciesType1(self):
     i = self.C.setSpeciesType( "cell")
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
     self.assertEqual( False, self.C.isSetSpeciesType() )
     i = self.C.unsetSpeciesType()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetSpeciesType() )
     pass  
 
   def test_Species_setSpeciesType2(self):
     c = libsbml.Species(2,2)
     i = c.setSpeciesType( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, c.isSetSpeciesType() )
     i = c.unsetSpeciesType()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetSpeciesType() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -285,11 +285,11 @@ def test_Species_setSpeciesType2(self):
   def test_Species_setSpeciesType3(self):
     c = libsbml.Species(2,2)
     i = c.setSpeciesType( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, c.isSetSpeciesType() )
-    self.assert_((  "cell"  == c.getSpeciesType() ))
+    self.assertTrue((  "cell"  == c.getSpeciesType() ))
     i = c.unsetSpeciesType()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetSpeciesType() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -297,25 +297,25 @@ def test_Species_setSpeciesType3(self):
   def test_Species_setSpeciesType4(self):
     c = libsbml.Species(2,2)
     i = c.setSpeciesType( "cell")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, c.isSetSpeciesType() )
-    self.assert_((  "cell"  == c.getSpeciesType() ))
+    self.assertTrue((  "cell"  == c.getSpeciesType() ))
     i = c.setSpeciesType("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetSpeciesType() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setSubstanceUnits1(self):
     i = self.C.setSubstanceUnits( "mm")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetSubstanceUnits() )
     pass  
 
   def test_Species_setSubstanceUnits2(self):
     c = libsbml.Species(2,2)
     i = c.setSubstanceUnits( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, c.isSetSubstanceUnits() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -323,8 +323,8 @@ def test_Species_setSubstanceUnits2(self):
   def test_Species_setSubstanceUnits3(self):
     c = libsbml.Species(2,2)
     i = c.setSubstanceUnits( "mole")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "mole" == c.getSubstanceUnits() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "mole" == c.getSubstanceUnits() ))
     self.assertEqual( True, c.isSetSubstanceUnits() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -332,39 +332,39 @@ def test_Species_setSubstanceUnits3(self):
   def test_Species_setSubstanceUnits4(self):
     c = libsbml.Species(2,2)
     i = c.setSubstanceUnits( "mole")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "mole" == c.getSubstanceUnits() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "mole" == c.getSubstanceUnits() ))
     self.assertEqual( True, c.isSetSubstanceUnits() )
     i = c.setSubstanceUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, c.isSetSubstanceUnits() )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Species_setUnits1(self):
     i = self.C.setUnits( "1cell")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.C.isSetUnits() )
     i = self.C.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetUnits() )
     pass  
 
   def test_Species_setUnits2(self):
     i = self.C.setUnits( "litre")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetUnits() )
     i = self.C.unsetUnits()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetUnits() )
     pass  
 
   def test_Species_setUnits3(self):
     i = self.C.setUnits( "litre")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.C.isSetUnits() )
     i = self.C.setUnits("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.C.isSetUnits() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestStoichiometryMath.py b/src/bindings/python/test/sbml/TestStoichiometryMath.py
index 555369c865..3e8885bf20 100644
--- a/src/bindings/python/test/sbml/TestStoichiometryMath.py
+++ b/src/bindings/python/test/sbml/TestStoichiometryMath.py
@@ -50,11 +50,11 @@ def tearDown(self):
     pass  
 
   def test_StoichiometryMath_create(self):
-    self.assert_( self.D.getTypeCode() == libsbml.SBML_STOICHIOMETRY_MATH )
-    self.assert_( self.D.getMetaId() == "" )
-    self.assert_( self.D.getNotes() == None )
-    self.assert_( self.D.getAnnotation() == None )
-    self.assert_( self.D.getMath() == None )
+    self.assertTrue( self.D.getTypeCode() == libsbml.SBML_STOICHIOMETRY_MATH )
+    self.assertTrue( self.D.getMetaId() == "" )
+    self.assertTrue( self.D.getNotes() == None )
+    self.assertTrue( self.D.getAnnotation() == None )
+    self.assertTrue( self.D.getMath() == None )
     pass  
 
   def test_StoichiometryMath_createWithNS(self):
@@ -63,14 +63,14 @@ def test_StoichiometryMath_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.StoichiometryMath(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_STOICHIOMETRY_MATH )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_STOICHIOMETRY_MATH )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -82,18 +82,18 @@ def test_StoichiometryMath_setMath(self):
     math = libsbml.parseFormula("lambda(x, x^3)")
     self.D.setMath(math)
     math1 = self.D.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
-    self.assert_( self.D.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( self.D.getMath() != math )
     self.assertEqual( True, self.D.isSetMath() )
     self.D.setMath(self.D.getMath())
     math1 = self.D.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
     self.D.setMath(None)
     self.assertEqual( False, self.D.isSetMath() )
     if (self.D.getMath() != None):
@@ -103,12 +103,12 @@ def test_StoichiometryMath_setMath(self):
   def test_StoichiometryMath_setMath1(self):
     math = libsbml.parseFormula("2 * k")
     i = self.D.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.D.getMath() != math )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.D.getMath() != math )
     self.assertEqual( True, self.D.isSetMath() )
     i = self.D.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.D.getMath() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.D.getMath() == None )
     self.assertEqual( False, self.D.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -116,7 +116,7 @@ def test_StoichiometryMath_setMath1(self):
   def test_StoichiometryMath_setMath2(self):
     math = libsbml.ASTNode(libsbml.AST_DIVIDE)
     i = self.D.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.D.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestSyntaxChecker.py b/src/bindings/python/test/sbml/TestSyntaxChecker.py
index 8079da072e..9711964e81 100644
--- a/src/bindings/python/test/sbml/TestSyntaxChecker.py
+++ b/src/bindings/python/test/sbml/TestSyntaxChecker.py
@@ -38,20 +38,20 @@ class TestSyntaxChecker(unittest.TestCase):
 
 
   def test_SyntaxChecker_validID(self):
-    self.assert_( libsbml.SyntaxChecker.isValidXMLID("cell") == True )
-    self.assert_( libsbml.SyntaxChecker.isValidXMLID("1cell") == False )
-    self.assert_( libsbml.SyntaxChecker.isValidXMLID("_cell") == True )
+    self.assertTrue( libsbml.SyntaxChecker.isValidXMLID("cell") == True )
+    self.assertTrue( libsbml.SyntaxChecker.isValidXMLID("1cell") == False )
+    self.assertTrue( libsbml.SyntaxChecker.isValidXMLID("_cell") == True )
     pass  
 
   def test_SyntaxChecker_validId(self):
-    self.assert_( libsbml.SyntaxChecker.isValidSBMLSId("cell") == True )
-    self.assert_( libsbml.SyntaxChecker.isValidSBMLSId("1cell") == False )
-    self.assert_( libsbml.SyntaxChecker.isValidSBMLSId("") == False )
+    self.assertTrue( libsbml.SyntaxChecker.isValidSBMLSId("cell") == True )
+    self.assertTrue( libsbml.SyntaxChecker.isValidSBMLSId("1cell") == False )
+    self.assertTrue( libsbml.SyntaxChecker.isValidSBMLSId("") == False )
     pass  
 
   def test_SyntaxChecker_validUnitId(self):
-    self.assert_( libsbml.SyntaxChecker.isValidUnitSId("cell") == True )
-    self.assert_( libsbml.SyntaxChecker.isValidUnitSId("1cell") == False )
+    self.assertTrue( libsbml.SyntaxChecker.isValidUnitSId("cell") == True )
+    self.assertTrue( libsbml.SyntaxChecker.isValidUnitSId("1cell") == False )
     pass  
 
   def test_SyntaxChecker_validXHTML(self):
@@ -70,18 +70,18 @@ def test_SyntaxChecker_validXHTML(self):
     node = libsbml.XMLNode(token)
     node.addChild(n1)
     topnode.addChild(node)
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,None) == True )
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS24) == True )
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS31) == True )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,None) == True )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS24) == True )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS31) == True )
     triple = libsbml.XMLTriple("html", "", "")
     token = libsbml.XMLToken(triple,att,ns)
     node = libsbml.XMLNode(token)
     node.addChild(n1)
     topnode.removeChild(0)
     topnode.addChild(node)
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,None) == True )
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS24) == False )
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS31) == True )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,None) == True )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS24) == False )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS31) == True )
     triple = libsbml.XMLTriple("html", "", "")
     ns.clear()
     token = libsbml.XMLToken(triple,att,ns)
@@ -89,9 +89,9 @@ def test_SyntaxChecker_validXHTML(self):
     node.addChild(n1)
     topnode.removeChild(0)
     topnode.addChild(node)
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,None) == False )
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS24) == False )
-    self.assert_( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS31) == False )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,None) == False )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS24) == False )
+    self.assertTrue( libsbml.SyntaxChecker.hasExpectedXHTMLSyntax(topnode,NS31) == False )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestTrigger.py b/src/bindings/python/test/sbml/TestTrigger.py
index 1c9b3f48f2..b9fbea9cbb 100644
--- a/src/bindings/python/test/sbml/TestTrigger.py
+++ b/src/bindings/python/test/sbml/TestTrigger.py
@@ -50,11 +50,11 @@ def tearDown(self):
     pass  
 
   def test_Trigger_create(self):
-    self.assert_( self.D.getTypeCode() == libsbml.SBML_TRIGGER )
-    self.assert_( self.D.getMetaId() == "" )
-    self.assert_( self.D.getNotes() == None )
-    self.assert_( self.D.getAnnotation() == None )
-    self.assert_( self.D.getMath() == None )
+    self.assertTrue( self.D.getTypeCode() == libsbml.SBML_TRIGGER )
+    self.assertTrue( self.D.getMetaId() == "" )
+    self.assertTrue( self.D.getNotes() == None )
+    self.assertTrue( self.D.getAnnotation() == None )
+    self.assertTrue( self.D.getMath() == None )
     pass  
 
   def test_Trigger_createWithNS(self):
@@ -63,14 +63,14 @@ def test_Trigger_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Trigger(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_TRIGGER )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_TRIGGER )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -82,18 +82,18 @@ def test_Trigger_setMath(self):
     math = libsbml.parseFormula("lambda(x, x^3)")
     self.D.setMath(math)
     math1 = self.D.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
-    self.assert_( self.D.getMath() != math )
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( self.D.getMath() != math )
     self.assertEqual( True, self.D.isSetMath() )
     self.D.setMath(self.D.getMath())
     math1 = self.D.getMath()
-    self.assert_( math1 != None )
+    self.assertTrue( math1 != None )
     formula = libsbml.formulaToString(math1)
-    self.assert_( formula != None )
-    self.assert_((  "lambda(x, x^3)" == formula ))
+    self.assertTrue( formula != None )
+    self.assertTrue((  "lambda(x, x^3)" == formula ))
     self.D.setMath(None)
     self.assertEqual( False, self.D.isSetMath() )
     if (self.D.getMath() != None):
@@ -103,12 +103,12 @@ def test_Trigger_setMath(self):
   def test_Trigger_setMath1(self):
     math = libsbml.parseFormula("2 * k")
     i = self.D.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.D.getMath() != math )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.D.getMath() != math )
     self.assertEqual( True, self.D.isSetMath() )
     i = self.D.setMath(None)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.D.getMath() == None )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.D.getMath() == None )
     self.assertEqual( False, self.D.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -116,7 +116,7 @@ def test_Trigger_setMath1(self):
   def test_Trigger_setMath2(self):
     math = libsbml.ASTNode(libsbml.AST_DIVIDE)
     i = self.D.setMath(math)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     self.assertEqual( False, self.D.isSetMath() )
     _dummyList = [ math ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/sbml/TestUnit.py b/src/bindings/python/test/sbml/TestUnit.py
index 4917ed1714..e53a70e579 100644
--- a/src/bindings/python/test/sbml/TestUnit.py
+++ b/src/bindings/python/test/sbml/TestUnit.py
@@ -50,14 +50,14 @@ def tearDown(self):
     pass  
 
   def test_Unit_create(self):
-    self.assert_( self.U.getTypeCode() == libsbml.SBML_UNIT )
-    self.assert_( self.U.getMetaId() == "" )
-    self.assert_( self.U.getNotes() == None )
-    self.assert_( self.U.getAnnotation() == None )
-    self.assert_( self.U.getKind() == libsbml.UNIT_KIND_INVALID )
-    self.assert_( self.U.getExponent() == 1 )
-    self.assert_( self.U.getScale() == 0 )
-    self.assert_( self.U.getMultiplier() == 1.0 )
+    self.assertTrue( self.U.getTypeCode() == libsbml.SBML_UNIT )
+    self.assertTrue( self.U.getMetaId() == "" )
+    self.assertTrue( self.U.getNotes() == None )
+    self.assertTrue( self.U.getAnnotation() == None )
+    self.assertTrue( self.U.getKind() == libsbml.UNIT_KIND_INVALID )
+    self.assertTrue( self.U.getExponent() == 1 )
+    self.assertTrue( self.U.getScale() == 0 )
+    self.assertTrue( self.U.getMultiplier() == 1.0 )
     self.assertEqual( False, self.U.isSetKind() )
     self.assertEqual( True, self.U.isSetExponent() )
     self.assertEqual( True, self.U.isSetScale() )
@@ -70,14 +70,14 @@ def test_Unit_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.Unit(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_UNIT )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_UNIT )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -176,19 +176,19 @@ def test_Unit_isXXX(self):
 
   def test_Unit_set_get(self):
     u = libsbml.Unit(2,4)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_INVALID )
-    self.assert_( u.getExponent() == 1 )
-    self.assert_( u.getScale() == 0 )
-    self.assert_( u.getMultiplier() == 1.0 )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_INVALID )
+    self.assertTrue( u.getExponent() == 1 )
+    self.assertTrue( u.getScale() == 0 )
+    self.assertTrue( u.getMultiplier() == 1.0 )
     self.assertEqual( False, u.isSetKind() )
     u.setKind(libsbml.UNIT_KIND_WATT)
-    self.assert_( u.getKind() == libsbml.UNIT_KIND_WATT )
+    self.assertTrue( u.getKind() == libsbml.UNIT_KIND_WATT )
     u.setExponent(3)
-    self.assert_( u.getExponent() == 3 )
+    self.assertTrue( u.getExponent() == 3 )
     u.setScale(4)
-    self.assert_( u.getScale() == 4 )
+    self.assertTrue( u.getScale() == 4 )
     u.setMultiplier(3.2)
-    self.assert_( u.getMultiplier() == 3.2 )
+    self.assertTrue( u.getMultiplier() == 3.2 )
     _dummyList = [ u ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestUnitDefinition.py b/src/bindings/python/test/sbml/TestUnitDefinition.py
index dced72f4e9..d3720fc20e 100644
--- a/src/bindings/python/test/sbml/TestUnitDefinition.py
+++ b/src/bindings/python/test/sbml/TestUnitDefinition.py
@@ -53,20 +53,20 @@ def test_UnitDefinition_addUnit(self):
     u = libsbml.Unit(2,4)
     u.setKind(libsbml.UNIT_KIND_MOLE)
     self.UD.addUnit(u)
-    self.assert_( self.UD.getNumUnits() == 1 )
+    self.assertTrue( self.UD.getNumUnits() == 1 )
     _dummyList = [ u ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_UnitDefinition_create(self):
-    self.assert_( self.UD.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
-    self.assert_( self.UD.getMetaId() == "" )
-    self.assert_( self.UD.getNotes() == None )
-    self.assert_( self.UD.getAnnotation() == None )
-    self.assert_( self.UD.getId() == "" )
-    self.assert_( self.UD.getName() == "" )
+    self.assertTrue( self.UD.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
+    self.assertTrue( self.UD.getMetaId() == "" )
+    self.assertTrue( self.UD.getNotes() == None )
+    self.assertTrue( self.UD.getAnnotation() == None )
+    self.assertTrue( self.UD.getId() == "" )
+    self.assertTrue( self.UD.getName() == "" )
     self.assertEqual( False, self.UD.isSetId() )
     self.assertEqual( False, self.UD.isSetName() )
-    self.assert_( self.UD.getNumUnits() == 0 )
+    self.assertTrue( self.UD.getNumUnits() == 0 )
     pass  
 
   def test_UnitDefinition_createWithNS(self):
@@ -75,28 +75,28 @@ def test_UnitDefinition_createWithNS(self):
     sbmlns = libsbml.SBMLNamespaces(2,1)
     sbmlns.addNamespaces(xmlns)
     object = libsbml.UnitDefinition(sbmlns)
-    self.assert_( object.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
-    self.assert_( object.getMetaId() == "" )
-    self.assert_( object.getNotes() == None )
-    self.assert_( object.getAnnotation() == None )
-    self.assert_( object.getLevel() == 2 )
-    self.assert_( object.getVersion() == 1 )
-    self.assert_( object.getNamespaces() != None )
-    self.assert_( object.getNamespaces().getLength() == 2 )
+    self.assertTrue( object.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
+    self.assertTrue( object.getMetaId() == "" )
+    self.assertTrue( object.getNotes() == None )
+    self.assertTrue( object.getAnnotation() == None )
+    self.assertTrue( object.getLevel() == 2 )
+    self.assertTrue( object.getVersion() == 1 )
+    self.assertTrue( object.getNamespaces() != None )
+    self.assertTrue( object.getNamespaces().getLength() == 2 )
     _dummyList = [ object ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_UnitDefinition_createWithName(self):
     ud = libsbml.UnitDefinition(2,4)
     ud.setName( "mmol_per_liter_per_sec")
-    self.assert_( ud.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
-    self.assert_( ud.getMetaId() == "" )
-    self.assert_( ud.getNotes() == None )
-    self.assert_( ud.getAnnotation() == None )
-    self.assert_( ud.getId() == "" )
-    self.assert_((  "mmol_per_liter_per_sec" == ud.getName() ))
+    self.assertTrue( ud.getTypeCode() == libsbml.SBML_UNIT_DEFINITION )
+    self.assertTrue( ud.getMetaId() == "" )
+    self.assertTrue( ud.getNotes() == None )
+    self.assertTrue( ud.getAnnotation() == None )
+    self.assertTrue( ud.getId() == "" )
+    self.assertTrue((  "mmol_per_liter_per_sec" == ud.getName() ))
     self.assertEqual( True, ud.isSetName() )
-    self.assert_( ud.getNumUnits() == 0 )
+    self.assertTrue( ud.getNumUnits() == 0 )
     _dummyList = [ ud ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -120,16 +120,16 @@ def test_UnitDefinition_getUnit(self):
     _dummyList = [ mole ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ litre ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ second ]; _dummyList[:] = []; del _dummyList
-    self.assert_( self.UD.getNumUnits() == 3 )
+    self.assertTrue( self.UD.getNumUnits() == 3 )
     mole = self.UD.getUnit(0)
     litre = self.UD.getUnit(1)
     second = self.UD.getUnit(2)
-    self.assert_( mole.getKind() == libsbml.UNIT_KIND_MOLE )
-    self.assert_( litre.getKind() == libsbml.UNIT_KIND_LITRE )
-    self.assert_( second.getKind() == libsbml.UNIT_KIND_SECOND )
-    self.assert_( mole.getScale() == -3 )
-    self.assert_( litre.getExponent() == -1 )
-    self.assert_( second.getExponent() == -1 )
+    self.assertTrue( mole.getKind() == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( litre.getKind() == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( second.getKind() == libsbml.UNIT_KIND_SECOND )
+    self.assertTrue( mole.getScale() == -3 )
+    self.assertTrue( litre.getExponent() == -1 )
+    self.assertTrue( second.getExponent() == -1 )
     pass  
 
   def test_UnitDefinition_isVariantOfArea(self):
@@ -405,9 +405,9 @@ def test_UnitDefinition_printUnits(self):
     perTime.setKind(libsbml.UnitKind_forName("second"))
     perTime.setExponent(-1)
     ud_str = libsbml.UnitDefinition.printUnits(ud,False)
-    self.assert_((                 "second (exponent = -1, multiplier = 1, scale = 0)" == ud_str ))
+    self.assertTrue((                 "second (exponent = -1, multiplier = 1, scale = 0)" == ud_str ))
     ud_str1 = libsbml.UnitDefinition.printUnits(ud,True)
-    self.assert_((  "(1 second)^-1" == ud_str1 ))
+    self.assertTrue((  "(1 second)^-1" == ud_str1 ))
     ud1 = libsbml.UnitDefinition(2,4)
     ud1.setId( "mmls")
     u = ud1.createUnit()
@@ -416,21 +416,21 @@ def test_UnitDefinition_printUnits(self):
     u.setScale(2)
     u.setMultiplier(3.0)
     ud_str2 = libsbml.UnitDefinition.printUnits(ud1,False)
-    self.assert_((                 "kilogram (exponent = 1, multiplier = 3, scale = 2)" == ud_str2 ))
+    self.assertTrue((                 "kilogram (exponent = 1, multiplier = 3, scale = 2)" == ud_str2 ))
     ud_str3 = libsbml.UnitDefinition.printUnits(ud1,True)
-    self.assert_((  "(300 kilogram)^1" == ud_str3 ))
+    self.assertTrue((  "(300 kilogram)^1" == ud_str3 ))
     pass  
 
   def test_UnitDefinition_removeUnit(self):
     o1 = self.UD.createUnit()
     o2 = self.UD.createUnit()
     o3 = self.UD.createUnit()
-    self.assert_( self.UD.removeUnit(0) == o1 )
-    self.assert_( self.UD.getNumUnits() == 2 )
-    self.assert_( self.UD.removeUnit(0) == o2 )
-    self.assert_( self.UD.getNumUnits() == 1 )
-    self.assert_( self.UD.removeUnit(0) == o3 )
-    self.assert_( self.UD.getNumUnits() == 0 )
+    self.assertTrue( self.UD.removeUnit(0) == o1 )
+    self.assertTrue( self.UD.getNumUnits() == 2 )
+    self.assertTrue( self.UD.removeUnit(0) == o2 )
+    self.assertTrue( self.UD.getNumUnits() == 1 )
+    self.assertTrue( self.UD.removeUnit(0) == o3 )
+    self.assertTrue( self.UD.getNumUnits() == 0 )
     _dummyList = [ o1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ o3 ]; _dummyList[:] = []; del _dummyList
@@ -439,12 +439,12 @@ def test_UnitDefinition_removeUnit(self):
   def test_UnitDefinition_setId(self):
     id =  "mmls";
     self.UD.setId(id)
-    self.assert_(( id == self.UD.getId() ))
+    self.assertTrue(( id == self.UD.getId() ))
     self.assertEqual( True, self.UD.isSetId() )
     if (self.UD.getId() == id):
       pass    
     self.UD.setId(self.UD.getId())
-    self.assert_(( id == self.UD.getId() ))
+    self.assertTrue(( id == self.UD.getId() ))
     self.UD.setId("")
     self.assertEqual( False, self.UD.isSetId() )
     if (self.UD.getId() != None):
@@ -454,12 +454,12 @@ def test_UnitDefinition_setId(self):
   def test_UnitDefinition_setName(self):
     name =  "mmol_per_liter_per_sec";
     self.UD.setName(name)
-    self.assert_(( name == self.UD.getName() ))
+    self.assertTrue(( name == self.UD.getName() ))
     self.assertEqual( True, self.UD.isSetName() )
     if (self.UD.getName() == name):
       pass    
     self.UD.setName(self.UD.getName())
-    self.assert_(( name == self.UD.getName() ))
+    self.assertTrue(( name == self.UD.getName() ))
     self.UD.setName("")
     self.assertEqual( False, self.UD.isSetName() )
     if (self.UD.getName() != None):
diff --git a/src/bindings/python/test/sbml/TestUnitDefinition_newSetters.py b/src/bindings/python/test/sbml/TestUnitDefinition_newSetters.py
index 3e8ad1fef6..db5d1cf788 100644
--- a/src/bindings/python/test/sbml/TestUnitDefinition_newSetters.py
+++ b/src/bindings/python/test/sbml/TestUnitDefinition_newSetters.py
@@ -53,11 +53,11 @@ def test_UnitDefinition_addUnit1(self):
     m = libsbml.UnitDefinition(2,2)
     p = libsbml.Unit(2,2)
     i = m.addUnit(p)
-    self.assert_( i == libsbml.LIBSBML_INVALID_OBJECT )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_OBJECT )
     p.setKind(libsbml.UNIT_KIND_MOLE)
     i = m.addUnit(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( m.getNumUnits() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( m.getNumUnits() == 1 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -67,8 +67,8 @@ def test_UnitDefinition_addUnit2(self):
     p = libsbml.Unit(2,1)
     p.setKind(libsbml.UNIT_KIND_MOLE)
     i = m.addUnit(p)
-    self.assert_( i == libsbml.LIBSBML_VERSION_MISMATCH )
-    self.assert_( m.getNumUnits() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_VERSION_MISMATCH )
+    self.assertTrue( m.getNumUnits() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -78,8 +78,8 @@ def test_UnitDefinition_addUnit3(self):
     p = libsbml.Unit(1,2)
     p.setKind(libsbml.UNIT_KIND_MOLE)
     i = m.addUnit(p)
-    self.assert_( i == libsbml.LIBSBML_LEVEL_MISMATCH )
-    self.assert_( m.getNumUnits() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_LEVEL_MISMATCH )
+    self.assertTrue( m.getNumUnits() == 0 )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -88,53 +88,53 @@ def test_UnitDefinition_addUnit4(self):
     m = libsbml.UnitDefinition(2,2)
     p = None
     i = m.addUnit(p)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_FAILED )
-    self.assert_( m.getNumUnits() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
+    self.assertTrue( m.getNumUnits() == 0 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_UnitDefinition_createUnit(self):
     m = libsbml.UnitDefinition(2,2)
     p = m.createUnit()
-    self.assert_( m.getNumUnits() == 1 )
-    self.assert_( (p).getLevel() == 2 )
-    self.assert_( (p).getVersion() == 2 )
+    self.assertTrue( m.getNumUnits() == 1 )
+    self.assertTrue( (p).getLevel() == 2 )
+    self.assertTrue( (p).getVersion() == 2 )
     _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_UnitDefinition_setId1(self):
     i = self.UD.setId( "mmls")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "mmls" == self.UD.getId() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "mmls" == self.UD.getId() ))
     self.assertEqual( True, self.UD.isSetId() )
     i = self.UD.setId("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.UD.isSetId() )
     i = self.UD.setId( "123")
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.UD.isSetId() )
     pass  
 
   def test_UnitDefinition_setName1(self):
     i = self.UD.setName( "mmls")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "mmls" == self.UD.getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "mmls" == self.UD.getName() ))
     self.assertEqual( True, self.UD.isSetName() )
     i = self.UD.setName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.UD.isSetName() )
     i = self.UD.setName( "123")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.UD.isSetName() )
     pass  
 
   def test_UnitDefinition_setName2(self):
     i = self.UD.setName( "mmls")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "mmls" == self.UD.getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "mmls" == self.UD.getName() ))
     self.assertEqual( True, self.UD.isSetName() )
     i = self.UD.unsetName()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( False, self.UD.isSetName() )
     pass  
 
diff --git a/src/bindings/python/test/sbml/TestUnitKind.py b/src/bindings/python/test/sbml/TestUnitKind.py
index d84d17ba70..8dd8438974 100644
--- a/src/bindings/python/test/sbml/TestUnitKind.py
+++ b/src/bindings/python/test/sbml/TestUnitKind.py
@@ -52,44 +52,44 @@ def test_UnitKind_equals(self):
     pass  
 
   def test_UnitKind_forName(self):
-    self.assert_( libsbml.UnitKind_forName("ampere") == libsbml.UNIT_KIND_AMPERE )
-    self.assert_( libsbml.UnitKind_forName("becquerel") == libsbml.UNIT_KIND_BECQUEREL )
-    self.assert_( libsbml.UnitKind_forName("candela") == libsbml.UNIT_KIND_CANDELA )
-    self.assert_( libsbml.UnitKind_forName("Celsius") == libsbml.UNIT_KIND_CELSIUS )
-    self.assert_( libsbml.UnitKind_forName("coulomb") == libsbml.UNIT_KIND_COULOMB )
-    self.assert_( libsbml.UnitKind_forName("dimensionless") == libsbml.UNIT_KIND_DIMENSIONLESS )
-    self.assert_( libsbml.UnitKind_forName("farad") == libsbml.UNIT_KIND_FARAD )
-    self.assert_( libsbml.UnitKind_forName("gram") == libsbml.UNIT_KIND_GRAM )
-    self.assert_( libsbml.UnitKind_forName("gray") == libsbml.UNIT_KIND_GRAY )
-    self.assert_( libsbml.UnitKind_forName("henry") == libsbml.UNIT_KIND_HENRY )
-    self.assert_( libsbml.UnitKind_forName("hertz") == libsbml.UNIT_KIND_HERTZ )
-    self.assert_( libsbml.UnitKind_forName("item") == libsbml.UNIT_KIND_ITEM )
-    self.assert_( libsbml.UnitKind_forName("joule") == libsbml.UNIT_KIND_JOULE )
-    self.assert_( libsbml.UnitKind_forName("katal") == libsbml.UNIT_KIND_KATAL )
-    self.assert_( libsbml.UnitKind_forName("kelvin") == libsbml.UNIT_KIND_KELVIN )
-    self.assert_( libsbml.UnitKind_forName("kilogram") == libsbml.UNIT_KIND_KILOGRAM )
-    self.assert_( libsbml.UnitKind_forName("liter") == libsbml.UNIT_KIND_LITER )
-    self.assert_( libsbml.UnitKind_forName("litre") == libsbml.UNIT_KIND_LITRE )
-    self.assert_( libsbml.UnitKind_forName("lumen") == libsbml.UNIT_KIND_LUMEN )
-    self.assert_( libsbml.UnitKind_forName("lux") == libsbml.UNIT_KIND_LUX )
-    self.assert_( libsbml.UnitKind_forName("meter") == libsbml.UNIT_KIND_METER )
-    self.assert_( libsbml.UnitKind_forName("metre") == libsbml.UNIT_KIND_METRE )
-    self.assert_( libsbml.UnitKind_forName("mole") == libsbml.UNIT_KIND_MOLE )
-    self.assert_( libsbml.UnitKind_forName("newton") == libsbml.UNIT_KIND_NEWTON )
-    self.assert_( libsbml.UnitKind_forName("ohm") == libsbml.UNIT_KIND_OHM )
-    self.assert_( libsbml.UnitKind_forName("pascal") == libsbml.UNIT_KIND_PASCAL )
-    self.assert_( libsbml.UnitKind_forName("radian") == libsbml.UNIT_KIND_RADIAN )
-    self.assert_( libsbml.UnitKind_forName("second") == libsbml.UNIT_KIND_SECOND )
-    self.assert_( libsbml.UnitKind_forName("siemens") == libsbml.UNIT_KIND_SIEMENS )
-    self.assert_( libsbml.UnitKind_forName("sievert") == libsbml.UNIT_KIND_SIEVERT )
-    self.assert_( libsbml.UnitKind_forName("steradian") == libsbml.UNIT_KIND_STERADIAN )
-    self.assert_( libsbml.UnitKind_forName("tesla") == libsbml.UNIT_KIND_TESLA )
-    self.assert_( libsbml.UnitKind_forName("volt") == libsbml.UNIT_KIND_VOLT )
-    self.assert_( libsbml.UnitKind_forName("watt") == libsbml.UNIT_KIND_WATT )
-    self.assert_( libsbml.UnitKind_forName("weber") == libsbml.UNIT_KIND_WEBER )
-    self.assert_( libsbml.UnitKind_forName(None) == libsbml.UNIT_KIND_INVALID )
-    self.assert_( libsbml.UnitKind_forName("") == libsbml.UNIT_KIND_INVALID )
-    self.assert_( libsbml.UnitKind_forName("foobar") == libsbml.UNIT_KIND_INVALID )
+    self.assertTrue( libsbml.UnitKind_forName("ampere") == libsbml.UNIT_KIND_AMPERE )
+    self.assertTrue( libsbml.UnitKind_forName("becquerel") == libsbml.UNIT_KIND_BECQUEREL )
+    self.assertTrue( libsbml.UnitKind_forName("candela") == libsbml.UNIT_KIND_CANDELA )
+    self.assertTrue( libsbml.UnitKind_forName("Celsius") == libsbml.UNIT_KIND_CELSIUS )
+    self.assertTrue( libsbml.UnitKind_forName("coulomb") == libsbml.UNIT_KIND_COULOMB )
+    self.assertTrue( libsbml.UnitKind_forName("dimensionless") == libsbml.UNIT_KIND_DIMENSIONLESS )
+    self.assertTrue( libsbml.UnitKind_forName("farad") == libsbml.UNIT_KIND_FARAD )
+    self.assertTrue( libsbml.UnitKind_forName("gram") == libsbml.UNIT_KIND_GRAM )
+    self.assertTrue( libsbml.UnitKind_forName("gray") == libsbml.UNIT_KIND_GRAY )
+    self.assertTrue( libsbml.UnitKind_forName("henry") == libsbml.UNIT_KIND_HENRY )
+    self.assertTrue( libsbml.UnitKind_forName("hertz") == libsbml.UNIT_KIND_HERTZ )
+    self.assertTrue( libsbml.UnitKind_forName("item") == libsbml.UNIT_KIND_ITEM )
+    self.assertTrue( libsbml.UnitKind_forName("joule") == libsbml.UNIT_KIND_JOULE )
+    self.assertTrue( libsbml.UnitKind_forName("katal") == libsbml.UNIT_KIND_KATAL )
+    self.assertTrue( libsbml.UnitKind_forName("kelvin") == libsbml.UNIT_KIND_KELVIN )
+    self.assertTrue( libsbml.UnitKind_forName("kilogram") == libsbml.UNIT_KIND_KILOGRAM )
+    self.assertTrue( libsbml.UnitKind_forName("liter") == libsbml.UNIT_KIND_LITER )
+    self.assertTrue( libsbml.UnitKind_forName("litre") == libsbml.UNIT_KIND_LITRE )
+    self.assertTrue( libsbml.UnitKind_forName("lumen") == libsbml.UNIT_KIND_LUMEN )
+    self.assertTrue( libsbml.UnitKind_forName("lux") == libsbml.UNIT_KIND_LUX )
+    self.assertTrue( libsbml.UnitKind_forName("meter") == libsbml.UNIT_KIND_METER )
+    self.assertTrue( libsbml.UnitKind_forName("metre") == libsbml.UNIT_KIND_METRE )
+    self.assertTrue( libsbml.UnitKind_forName("mole") == libsbml.UNIT_KIND_MOLE )
+    self.assertTrue( libsbml.UnitKind_forName("newton") == libsbml.UNIT_KIND_NEWTON )
+    self.assertTrue( libsbml.UnitKind_forName("ohm") == libsbml.UNIT_KIND_OHM )
+    self.assertTrue( libsbml.UnitKind_forName("pascal") == libsbml.UNIT_KIND_PASCAL )
+    self.assertTrue( libsbml.UnitKind_forName("radian") == libsbml.UNIT_KIND_RADIAN )
+    self.assertTrue( libsbml.UnitKind_forName("second") == libsbml.UNIT_KIND_SECOND )
+    self.assertTrue( libsbml.UnitKind_forName("siemens") == libsbml.UNIT_KIND_SIEMENS )
+    self.assertTrue( libsbml.UnitKind_forName("sievert") == libsbml.UNIT_KIND_SIEVERT )
+    self.assertTrue( libsbml.UnitKind_forName("steradian") == libsbml.UNIT_KIND_STERADIAN )
+    self.assertTrue( libsbml.UnitKind_forName("tesla") == libsbml.UNIT_KIND_TESLA )
+    self.assertTrue( libsbml.UnitKind_forName("volt") == libsbml.UNIT_KIND_VOLT )
+    self.assertTrue( libsbml.UnitKind_forName("watt") == libsbml.UNIT_KIND_WATT )
+    self.assertTrue( libsbml.UnitKind_forName("weber") == libsbml.UNIT_KIND_WEBER )
+    self.assertTrue( libsbml.UnitKind_forName(None) == libsbml.UNIT_KIND_INVALID )
+    self.assertTrue( libsbml.UnitKind_forName("") == libsbml.UNIT_KIND_INVALID )
+    self.assertTrue( libsbml.UnitKind_forName("foobar") == libsbml.UNIT_KIND_INVALID )
     pass  
 
   def test_UnitKind_isValidUnitKindString(self):
@@ -106,81 +106,81 @@ def test_UnitKind_isValidUnitKindString(self):
 
   def test_UnitKind_toString(self):
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_AMPERE)
-    self.assert_((  "ampere" == s ))
+    self.assertTrue((  "ampere" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_BECQUEREL)
-    self.assert_((  "becquerel" == s ))
+    self.assertTrue((  "becquerel" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_CANDELA)
-    self.assert_((  "candela" == s ))
+    self.assertTrue((  "candela" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_CELSIUS)
-    self.assert_((  "Celsius" == s ))
+    self.assertTrue((  "Celsius" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_COULOMB)
-    self.assert_((  "coulomb" == s ))
+    self.assertTrue((  "coulomb" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_DIMENSIONLESS)
-    self.assert_((  "dimensionless" == s ))
+    self.assertTrue((  "dimensionless" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_FARAD)
-    self.assert_((  "farad" == s ))
+    self.assertTrue((  "farad" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_GRAM)
-    self.assert_((  "gram" == s ))
+    self.assertTrue((  "gram" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_GRAY)
-    self.assert_((  "gray" == s ))
+    self.assertTrue((  "gray" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_HENRY)
-    self.assert_((  "henry" == s ))
+    self.assertTrue((  "henry" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_HERTZ)
-    self.assert_((  "hertz" == s ))
+    self.assertTrue((  "hertz" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_ITEM)
-    self.assert_((  "item" == s ))
+    self.assertTrue((  "item" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_JOULE)
-    self.assert_((  "joule" == s ))
+    self.assertTrue((  "joule" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_KATAL)
-    self.assert_((  "katal" == s ))
+    self.assertTrue((  "katal" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_KELVIN)
-    self.assert_((  "kelvin" == s ))
+    self.assertTrue((  "kelvin" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_KILOGRAM)
-    self.assert_((  "kilogram" == s ))
+    self.assertTrue((  "kilogram" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_LITER)
-    self.assert_((  "liter" == s ))
+    self.assertTrue((  "liter" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_LITRE)
-    self.assert_((  "litre" == s ))
+    self.assertTrue((  "litre" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_LUMEN)
-    self.assert_((  "lumen" == s ))
+    self.assertTrue((  "lumen" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_LUX)
-    self.assert_((  "lux" == s ))
+    self.assertTrue((  "lux" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_METER)
-    self.assert_((  "meter" == s ))
+    self.assertTrue((  "meter" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_METRE)
-    self.assert_((  "metre" == s ))
+    self.assertTrue((  "metre" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_MOLE)
-    self.assert_((  "mole" == s ))
+    self.assertTrue((  "mole" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_NEWTON)
-    self.assert_((  "newton" == s ))
+    self.assertTrue((  "newton" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_OHM)
-    self.assert_((  "ohm" == s ))
+    self.assertTrue((  "ohm" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_PASCAL)
-    self.assert_((  "pascal" == s ))
+    self.assertTrue((  "pascal" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_RADIAN)
-    self.assert_((  "radian" == s ))
+    self.assertTrue((  "radian" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_SECOND)
-    self.assert_((  "second" == s ))
+    self.assertTrue((  "second" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_SIEMENS)
-    self.assert_((  "siemens" == s ))
+    self.assertTrue((  "siemens" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_SIEVERT)
-    self.assert_((  "sievert" == s ))
+    self.assertTrue((  "sievert" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_STERADIAN)
-    self.assert_((  "steradian" == s ))
+    self.assertTrue((  "steradian" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_TESLA)
-    self.assert_((  "tesla" == s ))
+    self.assertTrue((  "tesla" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_VOLT)
-    self.assert_((  "volt" == s ))
+    self.assertTrue((  "volt" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_WATT)
-    self.assert_((  "watt" == s ))
+    self.assertTrue((  "watt" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_WEBER)
-    self.assert_((  "weber" == s ))
+    self.assertTrue((  "weber" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_INVALID)
-    self.assert_((  "(Invalid UnitKind)" == s ))
+    self.assertTrue((  "(Invalid UnitKind)" == s ))
     s = libsbml.UnitKind_toString(-1)
-    self.assert_((  "(Invalid UnitKind)" == s ))
+    self.assertTrue((  "(Invalid UnitKind)" == s ))
     s = libsbml.UnitKind_toString(libsbml.UNIT_KIND_INVALID + 1)
-    self.assert_((  "(Invalid UnitKind)" == s ))
+    self.assertTrue((  "(Invalid UnitKind)" == s ))
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestUnit_newSetters.py b/src/bindings/python/test/sbml/TestUnit_newSetters.py
index c667f47028..4b1c46463b 100644
--- a/src/bindings/python/test/sbml/TestUnit_newSetters.py
+++ b/src/bindings/python/test/sbml/TestUnit_newSetters.py
@@ -51,75 +51,75 @@ def tearDown(self):
 
   def test_Unit_removeScale(self):
     i = self.U.setScale(2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.U.getScale() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.U.getScale() == 2 )
     i = libsbml.Unit.removeScale(self.U)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.U.getScale() == 0 )
-    self.assert_( self.U.getMultiplier() == 100 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.U.getScale() == 0 )
+    self.assertTrue( self.U.getMultiplier() == 100 )
     pass  
 
   def test_Unit_setExponent1(self):
     i = self.U.setExponent(2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.U.getExponent() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.U.getExponent() == 2 )
     pass  
 
   def test_Unit_setExponent2(self):
     i = self.U.setExponent(2.0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.U.getExponent() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.U.getExponent() == 2 )
     pass  
 
   def test_Unit_setExponent3(self):
     i = self.U.setExponent(2.2)
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
-    self.assert_( self.U.getExponent() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( self.U.getExponent() == 1 )
     pass  
 
   def test_Unit_setKind1(self):
     i = self.U.setKind(libsbml.UnitKind_forName("cell"))
-    self.assert_( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
     self.assertEqual( False, self.U.isSetKind() )
     pass  
 
   def test_Unit_setKind2(self):
     i = self.U.setKind(libsbml.UnitKind_forName("litre"))
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     self.assertEqual( True, self.U.isSetKind() )
     pass  
 
   def test_Unit_setMultiplier1(self):
     i = self.U.setMultiplier(2)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( self.U.getMultiplier() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.U.getMultiplier() == 2 )
     pass  
 
   def test_Unit_setMultiplier2(self):
     c = libsbml.Unit(2,2)
     i = c.setMultiplier(4)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( c.getMultiplier() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( c.getMultiplier() == 4 )
     _dummyList = [ c ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_Unit_setOffset1(self):
     i = self.U.setOffset(2.0)
-    self.assert_( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
-    self.assert_( self.U.getOffset() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
+    self.assertTrue( self.U.getOffset() == 0 )
     pass  
 
   def test_Unit_setOffset2(self):
     U1 = libsbml.Unit(2,1)
     i = U1.setOffset(2.0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( U1.getOffset() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( U1.getOffset() == 2 )
     pass  
 
   def test_Unit_setScale1(self):
     i = self.U.setScale(2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.U.getScale() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.U.getScale() == 2 )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/sbml/TestWriteL3SBML.py b/src/bindings/python/test/sbml/TestWriteL3SBML.py
index b189135176..234d10b5e2 100644
--- a/src/bindings/python/test/sbml/TestWriteL3SBML.py
+++ b/src/bindings/python/test/sbml/TestWriteL3SBML.py
@@ -118,27 +118,27 @@ def tearDown(self):
 
   def test_SBMLWriter_L3_create(self):
     w = libsbml.SBMLWriter()
-    self.assert_( w != None )
+    self.assertTrue( w != None )
     _dummyList = [ w ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBMLWriter_L3_setProgramName(self):
     w = libsbml.SBMLWriter()
-    self.assert_( w != None )
+    self.assertTrue( w != None )
     i = w.setProgramName( "sss")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = w.setProgramName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     _dummyList = [ w ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBMLWriter_L3_setProgramVersion(self):
     w = libsbml.SBMLWriter()
-    self.assert_( w != None )
+    self.assertTrue( w != None )
     i = w.setProgramVersion( "sss")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = w.setProgramVersion("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     _dummyList = [ w ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -529,8 +529,8 @@ def test_WriteL3SBML_error(self):
     d = libsbml.SBMLDocument()
     w = libsbml.SBMLWriter()
     self.assertEqual( False, w.writeSBML(d, "/tmp/impossible/path/should/fail") )
-    self.assert_( d.getNumErrors() == 1 )
-    self.assert_( d.getError(0).getErrorId() == libsbml.XMLFileUnwritable )
+    self.assertTrue( d.getNumErrors() == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == libsbml.XMLFileUnwritable )
     d = None
     w = None
     pass  
diff --git a/src/bindings/python/test/sbml/TestWriteSBML.py b/src/bindings/python/test/sbml/TestWriteSBML.py
index c547112b09..f3858e1726 100644
--- a/src/bindings/python/test/sbml/TestWriteSBML.py
+++ b/src/bindings/python/test/sbml/TestWriteSBML.py
@@ -185,27 +185,27 @@ def tearDown(self):
 
   def test_SBMLWriter_create(self):
     w = libsbml.SBMLWriter()
-    self.assert_( w != None )
+    self.assertTrue( w != None )
     _dummyList = [ w ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBMLWriter_setProgramName(self):
     w = libsbml.SBMLWriter()
-    self.assert_( w != None )
+    self.assertTrue( w != None )
     i = w.setProgramName( "sss")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = w.setProgramName("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     _dummyList = [ w ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_SBMLWriter_setProgramVersion(self):
     w = libsbml.SBMLWriter()
-    self.assert_( w != None )
+    self.assertTrue( w != None )
     i = w.setProgramVersion( "sss")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = w.setProgramVersion("")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     _dummyList = [ w ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -1660,8 +1660,8 @@ def test_WriteSBML_error(self):
     d = libsbml.SBMLDocument()
     w = libsbml.SBMLWriter()
     self.assertEqual( False, w.writeSBML(d, "/tmp/impossible/path/should/fail") )
-    self.assert_( d.getNumErrors() == 1 )
-    self.assert_( d.getError(0).getErrorId() == libsbml.XMLFileUnwritable )
+    self.assertTrue( d.getNumErrors() == 1 )
+    self.assertTrue( d.getError(0).getErrorId() == libsbml.XMLFileUnwritable )
     d = None
     w = None
     pass  
diff --git a/src/bindings/python/test/xml/TestXMLAttributes.py b/src/bindings/python/test/xml/TestXMLAttributes.py
index 8460aaf397..4f8d82c482 100644
--- a/src/bindings/python/test/xml/TestXMLAttributes.py
+++ b/src/bindings/python/test/xml/TestXMLAttributes.py
@@ -61,40 +61,40 @@ class TestXMLAttributes(unittest.TestCase):
 
   def test_XMLAttributes_add_get(self):
     attrs = libsbml.XMLAttributes()
-    self.assert_( attrs.getLength() == 0 )
+    self.assertTrue( attrs.getLength() == 0 )
     self.assertEqual( True, attrs.isEmpty() )
     attrs.add("xmlns", "http://foo.org/")
-    self.assert_( attrs.getLength() == 1 )
-    self.assert_( attrs.isEmpty() == False )
+    self.assertTrue( attrs.getLength() == 1 )
+    self.assertTrue( attrs.isEmpty() == False )
     attrs.add("foo", "bar")
-    self.assert_( attrs.getLength() == 2 )
-    self.assert_( attrs.isEmpty() == False )
-    self.assert_( attrs.getIndex("xmlns") == 0 )
-    self.assert_( attrs.getIndex("foo"  ) == 1 )
-    self.assert_( attrs.getIndex("bar"  ) == -1 )
-    self.assert_( attrs.getValue("xmlns") ==  "http://foo.org/"  )
-    self.assert_( attrs.getValue("foo"  ) ==  "bar"              )
-    self.assert_( attrs.getValue("bar"  ) ==  ""                 )
-    self.assert_( attrs.getName(0) ==  "xmlns"  )
-    self.assert_( attrs.getName(1) ==  "foo"    )
-    self.assert_( attrs.getName(2) ==  ""       )
+    self.assertTrue( attrs.getLength() == 2 )
+    self.assertTrue( attrs.isEmpty() == False )
+    self.assertTrue( attrs.getIndex("xmlns") == 0 )
+    self.assertTrue( attrs.getIndex("foo"  ) == 1 )
+    self.assertTrue( attrs.getIndex("bar"  ) == -1 )
+    self.assertTrue( attrs.getValue("xmlns") ==  "http://foo.org/"  )
+    self.assertTrue( attrs.getValue("foo"  ) ==  "bar"              )
+    self.assertTrue( attrs.getValue("bar"  ) ==  ""                 )
+    self.assertTrue( attrs.getName(0) ==  "xmlns"  )
+    self.assertTrue( attrs.getName(1) ==  "foo"    )
+    self.assertTrue( attrs.getName(2) ==  ""       )
     pass  
 
   def test_XMLAttributes_assignment(self):
     att1 = libsbml.XMLAttributes()
     att1.add("xmlns", "http://foo.org/")
-    self.assert_( att1.getLength() == 1 )
-    self.assert_( att1.isEmpty() == False )
-    self.assert_( att1.getIndex("xmlns") == 0 )
-    self.assert_( att1.getName(0) ==   "xmlns"  )
-    self.assert_( att1.getValue("xmlns") ==  "http://foo.org/"  )
+    self.assertTrue( att1.getLength() == 1 )
+    self.assertTrue( att1.isEmpty() == False )
+    self.assertTrue( att1.getIndex("xmlns") == 0 )
+    self.assertTrue( att1.getName(0) ==   "xmlns"  )
+    self.assertTrue( att1.getValue("xmlns") ==  "http://foo.org/"  )
     att2 = libsbml.XMLAttributes()
     att2 = att1
-    self.assert_( att2.getLength() == 1 )
-    self.assert_( att2.isEmpty() == False )
-    self.assert_( att2.getIndex("xmlns") == 0 )
-    self.assert_( att2.getName(0) ==   "xmlns"  )
-    self.assert_( att2.getValue("xmlns") ==  "http://foo.org/"  )
+    self.assertTrue( att2.getLength() == 1 )
+    self.assertTrue( att2.isEmpty() == False )
+    self.assertTrue( att2.getIndex("xmlns") == 0 )
+    self.assertTrue( att2.getName(0) ==   "xmlns"  )
+    self.assertTrue( att2.getValue("xmlns") ==  "http://foo.org/"  )
     att2 = None
     att1 = None
     pass  
@@ -102,17 +102,17 @@ def test_XMLAttributes_assignment(self):
   def test_XMLAttributes_clone(self):
     att1 = libsbml.XMLAttributes()
     att1.add("xmlns", "http://foo.org/")
-    self.assert_( att1.getLength() == 1 )
-    self.assert_( att1.isEmpty() == False )
-    self.assert_( att1.getIndex("xmlns") == 0 )
-    self.assert_( att1.getName(0) ==   "xmlns"  )
-    self.assert_( att1.getValue("xmlns") ==  "http://foo.org/"  )
+    self.assertTrue( att1.getLength() == 1 )
+    self.assertTrue( att1.isEmpty() == False )
+    self.assertTrue( att1.getIndex("xmlns") == 0 )
+    self.assertTrue( att1.getName(0) ==   "xmlns"  )
+    self.assertTrue( att1.getValue("xmlns") ==  "http://foo.org/"  )
     att2 = att1.clone()
-    self.assert_( att2.getLength() == 1 )
-    self.assert_( att2.isEmpty() == False )
-    self.assert_( att2.getIndex("xmlns") == 0 )
-    self.assert_( att2.getName(0) ==   "xmlns"  )
-    self.assert_( att2.getValue("xmlns") ==  "http://foo.org/"  )
+    self.assertTrue( att2.getLength() == 1 )
+    self.assertTrue( att2.isEmpty() == False )
+    self.assertTrue( att2.getIndex("xmlns") == 0 )
+    self.assertTrue( att2.getName(0) ==   "xmlns"  )
+    self.assertTrue( att2.getValue("xmlns") ==  "http://foo.org/"  )
     att2 = None
     att1 = None
     pass  
@@ -120,17 +120,17 @@ def test_XMLAttributes_clone(self):
   def test_XMLAttributes_copy(self):
     att1 = libsbml.XMLAttributes()
     att1.add("xmlns", "http://foo.org/")
-    self.assert_( att1.getLength() == 1 )
-    self.assert_( att1.isEmpty() == False )
-    self.assert_( att1.getIndex("xmlns") == 0 )
-    self.assert_( att1.getName(0) ==   "xmlns"  )
-    self.assert_( att1.getValue("xmlns") ==  "http://foo.org/"  )
+    self.assertTrue( att1.getLength() == 1 )
+    self.assertTrue( att1.isEmpty() == False )
+    self.assertTrue( att1.getIndex("xmlns") == 0 )
+    self.assertTrue( att1.getName(0) ==   "xmlns"  )
+    self.assertTrue( att1.getValue("xmlns") ==  "http://foo.org/"  )
     att2 = libsbml.XMLAttributes(att1)
-    self.assert_( att2.getLength() == 1 )
-    self.assert_( att2.isEmpty() == False )
-    self.assert_( att2.getIndex("xmlns") == 0 )
-    self.assert_( att2.getName(0) ==   "xmlns"  )
-    self.assert_( att2.getValue("xmlns") ==  "http://foo.org/"  )
+    self.assertTrue( att2.getLength() == 1 )
+    self.assertTrue( att2.isEmpty() == False )
+    self.assertTrue( att2.getIndex("xmlns") == 0 )
+    self.assertTrue( att2.getName(0) ==   "xmlns"  )
+    self.assertTrue( att2.getValue("xmlns") ==  "http://foo.org/"  )
     att2 = None
     att1 = None
     pass  
diff --git a/src/bindings/python/test/xml/TestXMLAttributesC.py b/src/bindings/python/test/xml/TestXMLAttributesC.py
index da28049ad6..d7d7c64df2 100644
--- a/src/bindings/python/test/xml/TestXMLAttributesC.py
+++ b/src/bindings/python/test/xml/TestXMLAttributesC.py
@@ -41,15 +41,15 @@ def test_XMLAttributes_add1(self):
     xa = libsbml.XMLAttributes()
     xt2 = libsbml.XMLTriple("name2", "http://name2.org/", "p2")
     i = xa.add( "name1", "val1", "http://name1.org/", "p1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = xa.add(xt2, "val2")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( xa.getLength() == 2 )
-    self.assert_( xa.isEmpty() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( xa.getLength() == 2 )
+    self.assertTrue( xa.isEmpty() == False )
     i = xa.add( "noprefix", "val3")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( xa.getLength() == 3 )
-    self.assert_( xa.isEmpty() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( xa.getLength() == 3 )
+    self.assertTrue( xa.isEmpty() == False )
     _dummyList = [ xa ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -63,107 +63,107 @@ def test_XMLAttributes_add_remove_qname_C(self):
     xt2a = libsbml.XMLTriple("name2", "http://name2a.org/", "p2a")
     xa.add( "name1", "val1", "http://name1.org/", "p1")
     xa.add(xt2, "val2")
-    self.assert_( xa.getLength() == 2 )
-    self.assert_( xa.isEmpty() == False )
-    self.assert_( (  "name1" != xa.getName(0) ) == False )
-    self.assert_( (  "val1"  != xa.getValue(0) ) == False )
-    self.assert_( (  "http://name1.org/" != xa.getURI(0) ) == False )
-    self.assert_( (  "p1"    != xa.getPrefix(0) ) == False )
-    self.assert_( (  "name2" != xa.getName(1) ) == False )
-    self.assert_( (  "val2"  != xa.getValue(1) ) == False )
-    self.assert_( (  "http://name2.org/" != xa.getURI(1) ) == False )
-    self.assert_( (  "p2"    != xa.getPrefix(1) ) == False )
-    self.assert_( (  "val1"  != xa.getValue( "name1") ) == False )
-    self.assert_( (  "val2"  != xa.getValue( "name2") ) == False )
-    self.assert_( (  "val1"  != xa.getValue( "name1", "http://name1.org/") ) == False )
-    self.assert_( (  "val2"  != xa.getValue( "name2", "http://name2.org/") ) == False )
-    self.assert_( (  "val1"  != xa.getValue(xt1) ) == False )
-    self.assert_( (  "val2"  != xa.getValue(xt2) ) == False )
-    self.assert_( xa.hasAttribute(-1) == False )
-    self.assert_( xa.hasAttribute(2) == False )
-    self.assert_( xa.hasAttribute(0) == True )
-    self.assert_( xa.hasAttribute( "name1", "http://name1.org/") == True )
-    self.assert_( xa.hasAttribute( "name2", "http://name2.org/") == True )
-    self.assert_( xa.hasAttribute( "name3", "http://name3.org/") == False )
-    self.assert_( xa.hasAttribute(xt1) == True )
-    self.assert_( xa.hasAttribute(xt2) == True )
-    self.assert_( xa.hasAttribute(xt3) == False )
+    self.assertTrue( xa.getLength() == 2 )
+    self.assertTrue( xa.isEmpty() == False )
+    self.assertTrue( (  "name1" != xa.getName(0) ) == False )
+    self.assertTrue( (  "val1"  != xa.getValue(0) ) == False )
+    self.assertTrue( (  "http://name1.org/" != xa.getURI(0) ) == False )
+    self.assertTrue( (  "p1"    != xa.getPrefix(0) ) == False )
+    self.assertTrue( (  "name2" != xa.getName(1) ) == False )
+    self.assertTrue( (  "val2"  != xa.getValue(1) ) == False )
+    self.assertTrue( (  "http://name2.org/" != xa.getURI(1) ) == False )
+    self.assertTrue( (  "p2"    != xa.getPrefix(1) ) == False )
+    self.assertTrue( (  "val1"  != xa.getValue( "name1") ) == False )
+    self.assertTrue( (  "val2"  != xa.getValue( "name2") ) == False )
+    self.assertTrue( (  "val1"  != xa.getValue( "name1", "http://name1.org/") ) == False )
+    self.assertTrue( (  "val2"  != xa.getValue( "name2", "http://name2.org/") ) == False )
+    self.assertTrue( (  "val1"  != xa.getValue(xt1) ) == False )
+    self.assertTrue( (  "val2"  != xa.getValue(xt2) ) == False )
+    self.assertTrue( xa.hasAttribute(-1) == False )
+    self.assertTrue( xa.hasAttribute(2) == False )
+    self.assertTrue( xa.hasAttribute(0) == True )
+    self.assertTrue( xa.hasAttribute( "name1", "http://name1.org/") == True )
+    self.assertTrue( xa.hasAttribute( "name2", "http://name2.org/") == True )
+    self.assertTrue( xa.hasAttribute( "name3", "http://name3.org/") == False )
+    self.assertTrue( xa.hasAttribute(xt1) == True )
+    self.assertTrue( xa.hasAttribute(xt2) == True )
+    self.assertTrue( xa.hasAttribute(xt3) == False )
     xa.add( "noprefix", "val3")
-    self.assert_( xa.getLength() == 3 )
-    self.assert_( xa.isEmpty() == False )
-    self.assert_( (  "noprefix" != xa.getName(2) ) == False )
-    self.assert_( (  "val3"     != xa.getValue(2) ) == False )
-    self.assert_( xa.getURI(2) == "" )
-    self.assert_( xa.getPrefix(2) == "" )
-    self.assert_( (  "val3"  != xa.getValue( "noprefix", "") ) == False )
-    self.assert_( xa.hasAttribute( "noprefix"    ) == True )
-    self.assert_( xa.hasAttribute( "noprefix", "") == True )
+    self.assertTrue( xa.getLength() == 3 )
+    self.assertTrue( xa.isEmpty() == False )
+    self.assertTrue( (  "noprefix" != xa.getName(2) ) == False )
+    self.assertTrue( (  "val3"     != xa.getValue(2) ) == False )
+    self.assertTrue( xa.getURI(2) == "" )
+    self.assertTrue( xa.getPrefix(2) == "" )
+    self.assertTrue( (  "val3"  != xa.getValue( "noprefix", "") ) == False )
+    self.assertTrue( xa.hasAttribute( "noprefix"    ) == True )
+    self.assertTrue( xa.hasAttribute( "noprefix", "") == True )
     xa.add(xt1, "mval1")
     xa.add( "name2", "mval2", "http://name2.org/", "p2")
     xa.add( "noprefix", "mval3")
-    self.assert_( xa.getLength() == 3 )
-    self.assert_( xa.isEmpty() == False )
-    self.assert_( (  "name1" != xa.getName(0) ) == False )
-    self.assert_( (  "mval1" != xa.getValue(0) ) == False )
-    self.assert_( (  "http://name1.org/" != xa.getURI(0) ) == False )
-    self.assert_( (  "p1"    != xa.getPrefix(0) ) == False )
-    self.assert_( (  "name2"    != xa.getName(1) ) == False )
-    self.assert_( (  "mval2"    != xa.getValue(1) ) == False )
-    self.assert_( (  "http://name2.org/" != xa.getURI(1) ) == False )
-    self.assert_( (  "p2"       != xa.getPrefix(1) ) == False )
-    self.assert_( (  "noprefix" != xa.getName(2) ) == False )
-    self.assert_( (  "mval3"    != xa.getValue(2) ) == False )
-    self.assert_( xa.getURI(2) == "" )
-    self.assert_( xa.getPrefix(2) == "" )
-    self.assert_( xa.hasAttribute(xt1) == True )
-    self.assert_( xa.hasAttribute( "name1", "http://name1.org/") == True )
-    self.assert_( xa.hasAttribute( "noprefix") == True )
+    self.assertTrue( xa.getLength() == 3 )
+    self.assertTrue( xa.isEmpty() == False )
+    self.assertTrue( (  "name1" != xa.getName(0) ) == False )
+    self.assertTrue( (  "mval1" != xa.getValue(0) ) == False )
+    self.assertTrue( (  "http://name1.org/" != xa.getURI(0) ) == False )
+    self.assertTrue( (  "p1"    != xa.getPrefix(0) ) == False )
+    self.assertTrue( (  "name2"    != xa.getName(1) ) == False )
+    self.assertTrue( (  "mval2"    != xa.getValue(1) ) == False )
+    self.assertTrue( (  "http://name2.org/" != xa.getURI(1) ) == False )
+    self.assertTrue( (  "p2"       != xa.getPrefix(1) ) == False )
+    self.assertTrue( (  "noprefix" != xa.getName(2) ) == False )
+    self.assertTrue( (  "mval3"    != xa.getValue(2) ) == False )
+    self.assertTrue( xa.getURI(2) == "" )
+    self.assertTrue( xa.getPrefix(2) == "" )
+    self.assertTrue( xa.hasAttribute(xt1) == True )
+    self.assertTrue( xa.hasAttribute( "name1", "http://name1.org/") == True )
+    self.assertTrue( xa.hasAttribute( "noprefix") == True )
     xa.add(xt1a, "val1a")
     xa.add(xt2a, "val2a")
-    self.assert_( xa.getLength() == 5 )
-    self.assert_( (  "name1" != xa.getName(3) ) == False )
-    self.assert_( (  "val1a" != xa.getValue(3) ) == False )
-    self.assert_( (  "http://name1a.org/" != xa.getURI(3) ) == False )
-    self.assert_( (  "p1a" != xa.getPrefix(3) ) == False )
-    self.assert_( (  "name2" != xa.getName(4) ) == False )
-    self.assert_( (  "val2a" != xa.getValue(4) ) == False )
-    self.assert_( (  "http://name2a.org/" != xa.getURI(4) ) == False )
-    self.assert_( (  "p2a" != xa.getPrefix(4) ) == False )
-    self.assert_( (  "mval1"  != xa.getValue( "name1") ) == False )
-    self.assert_( (  "mval2"  != xa.getValue( "name2") ) == False )
-    self.assert_( (  "val1a"  != xa.getValue( "name1", "http://name1a.org/") ) == False )
-    self.assert_( (  "val2a"  != xa.getValue( "name2", "http://name2a.org/") ) == False )
-    self.assert_( (  "val1a"  != xa.getValue(xt1a) ) == False )
-    self.assert_( (  "val2a"  != xa.getValue(xt2a) ) == False )
+    self.assertTrue( xa.getLength() == 5 )
+    self.assertTrue( (  "name1" != xa.getName(3) ) == False )
+    self.assertTrue( (  "val1a" != xa.getValue(3) ) == False )
+    self.assertTrue( (  "http://name1a.org/" != xa.getURI(3) ) == False )
+    self.assertTrue( (  "p1a" != xa.getPrefix(3) ) == False )
+    self.assertTrue( (  "name2" != xa.getName(4) ) == False )
+    self.assertTrue( (  "val2a" != xa.getValue(4) ) == False )
+    self.assertTrue( (  "http://name2a.org/" != xa.getURI(4) ) == False )
+    self.assertTrue( (  "p2a" != xa.getPrefix(4) ) == False )
+    self.assertTrue( (  "mval1"  != xa.getValue( "name1") ) == False )
+    self.assertTrue( (  "mval2"  != xa.getValue( "name2") ) == False )
+    self.assertTrue( (  "val1a"  != xa.getValue( "name1", "http://name1a.org/") ) == False )
+    self.assertTrue( (  "val2a"  != xa.getValue( "name2", "http://name2a.org/") ) == False )
+    self.assertTrue( (  "val1a"  != xa.getValue(xt1a) ) == False )
+    self.assertTrue( (  "val2a"  != xa.getValue(xt2a) ) == False )
     xa.remove(xt1a)
     xa.remove(xt2a)
-    self.assert_( xa.getLength() == 3 )
+    self.assertTrue( xa.getLength() == 3 )
     xa.remove( "name1", "http://name1.org/")
-    self.assert_( xa.getLength() == 2 )
-    self.assert_( xa.isEmpty() == False )
-    self.assert_( (  "name2" != xa.getName(0) ) == False )
-    self.assert_( (  "mval2" != xa.getValue(0) ) == False )
-    self.assert_( (  "http://name2.org/" != xa.getURI(0) ) == False )
-    self.assert_( (  "p2" != xa.getPrefix(0) ) == False )
-    self.assert_( (  "noprefix" != xa.getName(1) ) == False )
-    self.assert_( (  "mval3" != xa.getValue(1) ) == False )
-    self.assert_( xa.getURI(1) == "" )
-    self.assert_( xa.getPrefix(1) == "" )
-    self.assert_( xa.hasAttribute( "name1", "http://name1.org/") == False )
+    self.assertTrue( xa.getLength() == 2 )
+    self.assertTrue( xa.isEmpty() == False )
+    self.assertTrue( (  "name2" != xa.getName(0) ) == False )
+    self.assertTrue( (  "mval2" != xa.getValue(0) ) == False )
+    self.assertTrue( (  "http://name2.org/" != xa.getURI(0) ) == False )
+    self.assertTrue( (  "p2" != xa.getPrefix(0) ) == False )
+    self.assertTrue( (  "noprefix" != xa.getName(1) ) == False )
+    self.assertTrue( (  "mval3" != xa.getValue(1) ) == False )
+    self.assertTrue( xa.getURI(1) == "" )
+    self.assertTrue( xa.getPrefix(1) == "" )
+    self.assertTrue( xa.hasAttribute( "name1", "http://name1.org/") == False )
     xa.remove(xt2)
-    self.assert_( xa.getLength() == 1 )
-    self.assert_( xa.isEmpty() == False )
-    self.assert_( (  "noprefix" != xa.getName(0) ) == False )
-    self.assert_( (  "mval3" != xa.getValue(0) ) == False )
-    self.assert_( xa.getURI(0) == "" )
-    self.assert_( xa.getPrefix(0) == "" )
-    self.assert_( xa.hasAttribute(xt2) == False )
-    self.assert_( xa.hasAttribute( "name2", "http://name2.org/") == False )
+    self.assertTrue( xa.getLength() == 1 )
+    self.assertTrue( xa.isEmpty() == False )
+    self.assertTrue( (  "noprefix" != xa.getName(0) ) == False )
+    self.assertTrue( (  "mval3" != xa.getValue(0) ) == False )
+    self.assertTrue( xa.getURI(0) == "" )
+    self.assertTrue( xa.getPrefix(0) == "" )
+    self.assertTrue( xa.hasAttribute(xt2) == False )
+    self.assertTrue( xa.hasAttribute( "name2", "http://name2.org/") == False )
     xa.remove( "noprefix", "")
-    self.assert_( xa.getLength() == 0 )
-    self.assert_( xa.isEmpty() == True )
-    self.assert_( xa.hasAttribute( "noprefix"    ) == False )
-    self.assert_( xa.hasAttribute( "noprefix", "") == False )
+    self.assertTrue( xa.getLength() == 0 )
+    self.assertTrue( xa.isEmpty() == True )
+    self.assertTrue( xa.hasAttribute( "noprefix"    ) == False )
+    self.assertTrue( xa.hasAttribute( "noprefix", "") == False )
     _dummyList = [ xa ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
@@ -178,12 +178,12 @@ def test_XMLAttributes_clear1(self):
     i = xa.add( "name1", "val1", "http://name1.org/", "p1")
     i = xa.add(xt2, "val2")
     i = xa.add( "noprefix", "val3")
-    self.assert_( xa.getLength() == 3 )
-    self.assert_( xa.isEmpty() == False )
+    self.assertTrue( xa.getLength() == 3 )
+    self.assertTrue( xa.isEmpty() == False )
     i = xa.clear()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( xa.getLength() == 0 )
-    self.assert_( xa.isEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( xa.getLength() == 0 )
+    self.assertTrue( xa.isEmpty() == True )
     _dummyList = [ xa ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -192,28 +192,28 @@ def test_XMLAttributes_remove1(self):
     xa = libsbml.XMLAttributes()
     xt2 = libsbml.XMLTriple("name2", "http://name2.org/", "p2")
     i = xa.add( "name1", "val1", "http://name1.org/", "p1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = xa.add(xt2, "val2")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = xa.add( "noprefix", "val3")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     i = xa.add( "name4", "val4", "http://name4.org/", "p1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( xa.getLength() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( xa.getLength() == 4 )
     i = xa.remove(4)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     i = xa.remove(3)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( xa.getLength() == 3 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( xa.getLength() == 3 )
     i = xa.remove( "noprefix")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( xa.getLength() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( xa.getLength() == 2 )
     i = xa.remove(xt2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( xa.getLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( xa.getLength() == 1 )
     i = xa.remove( "name1", "http://name1.org/")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( xa.getLength() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( xa.getLength() == 0 )
     _dummyList = [ xa ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/xml/TestXMLCopyAndClone.py b/src/bindings/python/test/xml/TestXMLCopyAndClone.py
index ed3d22c601..916b731e66 100644
--- a/src/bindings/python/test/xml/TestXMLCopyAndClone.py
+++ b/src/bindings/python/test/xml/TestXMLCopyAndClone.py
@@ -40,16 +40,16 @@ class TestXMLCopyAndClone(unittest.TestCase):
   def test_NS_assignmentOperator(self):
     ns = libsbml.XMLNamespaces()
     ns.add("http://test1.org/", "test1")
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.isEmpty() == False )
-    self.assert_( ns.getPrefix(0) ==  "test1" )
-    self.assert_( ns.getURI("test1") ==  "http://test1.org/" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.isEmpty() == False )
+    self.assertTrue( ns.getPrefix(0) ==  "test1" )
+    self.assertTrue( ns.getURI("test1") ==  "http://test1.org/" )
     ns2 = libsbml.XMLNamespaces()
     ns2 = ns
-    self.assert_( ns2.getLength() == 1 )
-    self.assert_( ns2.isEmpty() == False )
-    self.assert_( ns2.getPrefix(0) ==  "test1" )
-    self.assert_( ns2.getURI("test1") ==  "http://test1.org/" )
+    self.assertTrue( ns2.getLength() == 1 )
+    self.assertTrue( ns2.isEmpty() == False )
+    self.assertTrue( ns2.getPrefix(0) ==  "test1" )
+    self.assertTrue( ns2.getURI("test1") ==  "http://test1.org/" )
     ns2 = None
     ns = None
     pass  
@@ -57,15 +57,15 @@ def test_NS_assignmentOperator(self):
   def test_NS_clone(self):
     ns = libsbml.XMLNamespaces()
     ns.add("http://test1.org/", "test1")
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.isEmpty() == False )
-    self.assert_( ns.getPrefix(0) ==  "test1" )
-    self.assert_( ns.getURI("test1") ==  "http://test1.org/" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.isEmpty() == False )
+    self.assertTrue( ns.getPrefix(0) ==  "test1" )
+    self.assertTrue( ns.getURI("test1") ==  "http://test1.org/" )
     ns2 = ns.clone()
-    self.assert_( ns2.getLength() == 1 )
-    self.assert_( ns2.isEmpty() == False )
-    self.assert_( ns2.getPrefix(0) ==  "test1" )
-    self.assert_( ns2.getURI("test1") ==  "http://test1.org/" )
+    self.assertTrue( ns2.getLength() == 1 )
+    self.assertTrue( ns2.isEmpty() == False )
+    self.assertTrue( ns2.getPrefix(0) ==  "test1" )
+    self.assertTrue( ns2.getURI("test1") ==  "http://test1.org/" )
     ns2 = None
     ns = None
     pass  
@@ -73,15 +73,15 @@ def test_NS_clone(self):
   def test_NS_copyConstructor(self):
     ns = libsbml.XMLNamespaces()
     ns.add("http://test1.org/", "test1")
-    self.assert_( ns.getLength() == 1 )
-    self.assert_( ns.isEmpty() == False )
-    self.assert_( ns.getPrefix(0) ==  "test1" )
-    self.assert_( ns.getURI("test1") ==  "http://test1.org/" )
+    self.assertTrue( ns.getLength() == 1 )
+    self.assertTrue( ns.isEmpty() == False )
+    self.assertTrue( ns.getPrefix(0) ==  "test1" )
+    self.assertTrue( ns.getURI("test1") ==  "http://test1.org/" )
     ns2 = libsbml.XMLNamespaces(ns)
-    self.assert_( ns2.getLength() == 1 )
-    self.assert_( ns2.isEmpty() == False )
-    self.assert_( ns2.getPrefix(0) ==  "test1" )
-    self.assert_( ns2.getURI("test1") ==  "http://test1.org/" )
+    self.assertTrue( ns2.getLength() == 1 )
+    self.assertTrue( ns2.isEmpty() == False )
+    self.assertTrue( ns2.getPrefix(0) ==  "test1" )
+    self.assertTrue( ns2.getURI("test1") ==  "http://test1.org/" )
     ns2 = None
     ns = None
     pass  
@@ -93,24 +93,24 @@ def test_Node_assignmentOperator(self):
     node = libsbml.XMLNode(token)
     child = libsbml.XMLNode()
     node.addChild(child)
-    self.assert_( node.getNumChildren() == 1 )
-    self.assert_( node.getName() ==  "sarah" )
-    self.assert_( node.getURI() ==  "http://foo.org/" )
-    self.assert_( node.getPrefix() ==  "bar" )
-    self.assert_( node.isEnd() == False )
-    self.assert_( node.isEOF() == False )
-    self.assert_( node.getLine() == 3 )
-    self.assert_( node.getColumn() == 4 )
+    self.assertTrue( node.getNumChildren() == 1 )
+    self.assertTrue( node.getName() ==  "sarah" )
+    self.assertTrue( node.getURI() ==  "http://foo.org/" )
+    self.assertTrue( node.getPrefix() ==  "bar" )
+    self.assertTrue( node.isEnd() == False )
+    self.assertTrue( node.isEOF() == False )
+    self.assertTrue( node.getLine() == 3 )
+    self.assertTrue( node.getColumn() == 4 )
     node2 = libsbml.XMLNode()
     node2 = node
-    self.assert_( node2.getNumChildren() == 1 )
-    self.assert_( node2.getName() ==  "sarah" )
-    self.assert_( node2.getURI() ==  "http://foo.org/" )
-    self.assert_( node2.getPrefix() ==  "bar" )
-    self.assert_( node2.isEnd() == False )
-    self.assert_( node2.isEOF() == False )
-    self.assert_( node2.getLine() == 3 )
-    self.assert_( node2.getColumn() == 4 )
+    self.assertTrue( node2.getNumChildren() == 1 )
+    self.assertTrue( node2.getName() ==  "sarah" )
+    self.assertTrue( node2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( node2.getPrefix() ==  "bar" )
+    self.assertTrue( node2.isEnd() == False )
+    self.assertTrue( node2.isEOF() == False )
+    self.assertTrue( node2.getLine() == 3 )
+    self.assertTrue( node2.getColumn() == 4 )
     t = None
     token = None
     node = None
@@ -124,23 +124,23 @@ def test_Node_clone(self):
     node = libsbml.XMLNode(token)
     child = libsbml.XMLNode()
     node.addChild(child)
-    self.assert_( node.getNumChildren() == 1 )
-    self.assert_( node.getName() ==  "sarah" )
-    self.assert_( node.getURI() ==  "http://foo.org/" )
-    self.assert_( node.getPrefix() ==  "bar" )
-    self.assert_( node.isEnd() == False )
-    self.assert_( node.isEOF() == False )
-    self.assert_( node.getLine() == 3 )
-    self.assert_( node.getColumn() == 4 )
+    self.assertTrue( node.getNumChildren() == 1 )
+    self.assertTrue( node.getName() ==  "sarah" )
+    self.assertTrue( node.getURI() ==  "http://foo.org/" )
+    self.assertTrue( node.getPrefix() ==  "bar" )
+    self.assertTrue( node.isEnd() == False )
+    self.assertTrue( node.isEOF() == False )
+    self.assertTrue( node.getLine() == 3 )
+    self.assertTrue( node.getColumn() == 4 )
     node2 = node.clone()
-    self.assert_( node2.getNumChildren() == 1 )
-    self.assert_( node2.getName() ==  "sarah" )
-    self.assert_( node2.getURI() ==  "http://foo.org/" )
-    self.assert_( node2.getPrefix() ==  "bar" )
-    self.assert_( node2.isEnd() == False )
-    self.assert_( node2.isEOF() == False )
-    self.assert_( node2.getLine() == 3 )
-    self.assert_( node2.getColumn() == 4 )
+    self.assertTrue( node2.getNumChildren() == 1 )
+    self.assertTrue( node2.getName() ==  "sarah" )
+    self.assertTrue( node2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( node2.getPrefix() ==  "bar" )
+    self.assertTrue( node2.isEnd() == False )
+    self.assertTrue( node2.isEOF() == False )
+    self.assertTrue( node2.getLine() == 3 )
+    self.assertTrue( node2.getColumn() == 4 )
     t = None
     token = None
     node = None
@@ -154,23 +154,23 @@ def test_Node_copyConstructor(self):
     node = libsbml.XMLNode(token)
     child = libsbml.XMLNode()
     node.addChild(child)
-    self.assert_( node.getNumChildren() == 1 )
-    self.assert_( node.getName() ==  "sarah" )
-    self.assert_( node.getURI() ==  "http://foo.org/" )
-    self.assert_( node.getPrefix() ==  "bar" )
-    self.assert_( node.isEnd() == False )
-    self.assert_( node.isEOF() == False )
-    self.assert_( node.getLine() == 3 )
-    self.assert_( node.getColumn() == 4 )
+    self.assertTrue( node.getNumChildren() == 1 )
+    self.assertTrue( node.getName() ==  "sarah" )
+    self.assertTrue( node.getURI() ==  "http://foo.org/" )
+    self.assertTrue( node.getPrefix() ==  "bar" )
+    self.assertTrue( node.isEnd() == False )
+    self.assertTrue( node.isEOF() == False )
+    self.assertTrue( node.getLine() == 3 )
+    self.assertTrue( node.getColumn() == 4 )
     node2 = libsbml.XMLNode(node)
-    self.assert_( node2.getNumChildren() == 1 )
-    self.assert_( node2.getName() ==  "sarah" )
-    self.assert_( node2.getURI() ==  "http://foo.org/" )
-    self.assert_( node2.getPrefix() ==  "bar" )
-    self.assert_( node2.isEnd() == False )
-    self.assert_( node2.isEOF() == False )
-    self.assert_( node2.getLine() == 3 )
-    self.assert_( node2.getColumn() == 4 )
+    self.assertTrue( node2.getNumChildren() == 1 )
+    self.assertTrue( node2.getName() ==  "sarah" )
+    self.assertTrue( node2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( node2.getPrefix() ==  "bar" )
+    self.assertTrue( node2.isEnd() == False )
+    self.assertTrue( node2.isEOF() == False )
+    self.assertTrue( node2.getLine() == 3 )
+    self.assertTrue( node2.getColumn() == 4 )
     t = None
     token = None
     node = None
@@ -180,22 +180,22 @@ def test_Node_copyConstructor(self):
   def test_Token_assignmentOperator(self):
     t = libsbml.XMLTriple("sarah", "http://foo.org/", "bar")
     token = libsbml.XMLToken(t,3,4)
-    self.assert_( token.getName() ==  "sarah" )
-    self.assert_( token.getURI() ==  "http://foo.org/" )
-    self.assert_( token.getPrefix() ==  "bar" )
-    self.assert_( token.isEnd() == True )
-    self.assert_( token.isEOF() == False )
-    self.assert_( token.getLine() == 3 )
-    self.assert_( token.getColumn() == 4 )
+    self.assertTrue( token.getName() ==  "sarah" )
+    self.assertTrue( token.getURI() ==  "http://foo.org/" )
+    self.assertTrue( token.getPrefix() ==  "bar" )
+    self.assertTrue( token.isEnd() == True )
+    self.assertTrue( token.isEOF() == False )
+    self.assertTrue( token.getLine() == 3 )
+    self.assertTrue( token.getColumn() == 4 )
     token2 = libsbml.XMLToken()
     token2 = token
-    self.assert_( token2.getName() ==  "sarah" )
-    self.assert_( token2.getURI() ==  "http://foo.org/" )
-    self.assert_( token2.getPrefix() ==  "bar" )
-    self.assert_( token2.isEnd() == True )
-    self.assert_( token2.isEOF() == False )
-    self.assert_( token2.getLine() == 3 )
-    self.assert_( token2.getColumn() == 4 )
+    self.assertTrue( token2.getName() ==  "sarah" )
+    self.assertTrue( token2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( token2.getPrefix() ==  "bar" )
+    self.assertTrue( token2.isEnd() == True )
+    self.assertTrue( token2.isEOF() == False )
+    self.assertTrue( token2.getLine() == 3 )
+    self.assertTrue( token2.getColumn() == 4 )
     t = None
     token = None
     token2 = None
@@ -204,21 +204,21 @@ def test_Token_assignmentOperator(self):
   def test_Token_clone(self):
     t = libsbml.XMLTriple("sarah", "http://foo.org/", "bar")
     token = libsbml.XMLToken(t,3,4)
-    self.assert_( token.getName() ==  "sarah" )
-    self.assert_( token.getURI() ==  "http://foo.org/" )
-    self.assert_( token.getPrefix() ==  "bar" )
-    self.assert_( token.isEnd() == True )
-    self.assert_( token.isEOF() == False )
-    self.assert_( token.getLine() == 3 )
-    self.assert_( token.getColumn() == 4 )
+    self.assertTrue( token.getName() ==  "sarah" )
+    self.assertTrue( token.getURI() ==  "http://foo.org/" )
+    self.assertTrue( token.getPrefix() ==  "bar" )
+    self.assertTrue( token.isEnd() == True )
+    self.assertTrue( token.isEOF() == False )
+    self.assertTrue( token.getLine() == 3 )
+    self.assertTrue( token.getColumn() == 4 )
     token2 = token.clone()
-    self.assert_( token2.getName() ==  "sarah" )
-    self.assert_( token2.getURI() ==  "http://foo.org/" )
-    self.assert_( token2.getPrefix() ==  "bar" )
-    self.assert_( token2.isEnd() == True )
-    self.assert_( token2.isEOF() == False )
-    self.assert_( token2.getLine() == 3 )
-    self.assert_( token2.getColumn() == 4 )
+    self.assertTrue( token2.getName() ==  "sarah" )
+    self.assertTrue( token2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( token2.getPrefix() ==  "bar" )
+    self.assertTrue( token2.isEnd() == True )
+    self.assertTrue( token2.isEOF() == False )
+    self.assertTrue( token2.getLine() == 3 )
+    self.assertTrue( token2.getColumn() == 4 )
     t = None
     token = None
     token2 = None
@@ -227,21 +227,21 @@ def test_Token_clone(self):
   def test_Token_copyConstructor(self):
     t = libsbml.XMLTriple("sarah", "http://foo.org/", "bar")
     token = libsbml.XMLToken(t,3,4)
-    self.assert_( token.getName() ==  "sarah" )
-    self.assert_( token.getURI() ==  "http://foo.org/" )
-    self.assert_( token.getPrefix() ==  "bar" )
-    self.assert_( token.isEnd() == True )
-    self.assert_( token.isEOF() == False )
-    self.assert_( token.getLine() == 3 )
-    self.assert_( token.getColumn() == 4 )
+    self.assertTrue( token.getName() ==  "sarah" )
+    self.assertTrue( token.getURI() ==  "http://foo.org/" )
+    self.assertTrue( token.getPrefix() ==  "bar" )
+    self.assertTrue( token.isEnd() == True )
+    self.assertTrue( token.isEOF() == False )
+    self.assertTrue( token.getLine() == 3 )
+    self.assertTrue( token.getColumn() == 4 )
     token2 = libsbml.XMLToken(token)
-    self.assert_( token2.getName() ==  "sarah" )
-    self.assert_( token2.getURI() ==  "http://foo.org/" )
-    self.assert_( token2.getPrefix() ==  "bar" )
-    self.assert_( token2.isEnd() == True )
-    self.assert_( token2.isEOF() == False )
-    self.assert_( token2.getLine() == 3 )
-    self.assert_( token2.getColumn() == 4 )
+    self.assertTrue( token2.getName() ==  "sarah" )
+    self.assertTrue( token2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( token2.getPrefix() ==  "bar" )
+    self.assertTrue( token2.isEnd() == True )
+    self.assertTrue( token2.isEOF() == False )
+    self.assertTrue( token2.getLine() == 3 )
+    self.assertTrue( token2.getColumn() == 4 )
     t = None
     token = None
     token2 = None
@@ -249,40 +249,40 @@ def test_Token_copyConstructor(self):
 
   def test_Triple_assignmentOperator(self):
     t = libsbml.XMLTriple("sarah", "http://foo.org/", "bar")
-    self.assert_( t.getName() ==  "sarah" )
-    self.assert_( t.getURI() ==  "http://foo.org/" )
-    self.assert_( t.getPrefix() ==  "bar" )
+    self.assertTrue( t.getName() ==  "sarah" )
+    self.assertTrue( t.getURI() ==  "http://foo.org/" )
+    self.assertTrue( t.getPrefix() ==  "bar" )
     t2 = libsbml.XMLTriple()
     t2 = t
-    self.assert_( t2.getName() ==  "sarah" )
-    self.assert_( t2.getURI() ==  "http://foo.org/" )
-    self.assert_( t2.getPrefix() ==  "bar" )
+    self.assertTrue( t2.getName() ==  "sarah" )
+    self.assertTrue( t2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( t2.getPrefix() ==  "bar" )
     t = None
     t2 = None
     pass  
 
   def test_Triple_clone(self):
     t = libsbml.XMLTriple("sarah", "http://foo.org/", "bar")
-    self.assert_( t.getName() ==  "sarah" )
-    self.assert_( t.getURI() ==  "http://foo.org/" )
-    self.assert_( t.getPrefix() ==  "bar" )
+    self.assertTrue( t.getName() ==  "sarah" )
+    self.assertTrue( t.getURI() ==  "http://foo.org/" )
+    self.assertTrue( t.getPrefix() ==  "bar" )
     t2 = t.clone()
-    self.assert_( t2.getName() ==  "sarah" )
-    self.assert_( t2.getURI() ==  "http://foo.org/" )
-    self.assert_( t2.getPrefix() ==  "bar" )
+    self.assertTrue( t2.getName() ==  "sarah" )
+    self.assertTrue( t2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( t2.getPrefix() ==  "bar" )
     t = None
     t2 = None
     pass  
 
   def test_Triple_copyConstructor(self):
     t = libsbml.XMLTriple("sarah", "http://foo.org/", "bar")
-    self.assert_( t.getName() ==  "sarah" )
-    self.assert_( t.getURI() ==  "http://foo.org/" )
-    self.assert_( t.getPrefix() ==  "bar" )
+    self.assertTrue( t.getName() ==  "sarah" )
+    self.assertTrue( t.getURI() ==  "http://foo.org/" )
+    self.assertTrue( t.getPrefix() ==  "bar" )
     t2 = libsbml.XMLTriple(t)
-    self.assert_( t2.getName() ==  "sarah" )
-    self.assert_( t2.getURI() ==  "http://foo.org/" )
-    self.assert_( t2.getPrefix() ==  "bar" )
+    self.assertTrue( t2.getName() ==  "sarah" )
+    self.assertTrue( t2.getURI() ==  "http://foo.org/" )
+    self.assertTrue( t2.getPrefix() ==  "bar" )
     t = None
     t2 = None
     pass  
diff --git a/src/bindings/python/test/xml/TestXMLError.py b/src/bindings/python/test/xml/TestXMLError.py
index 462a75f085..7c0cccdc18 100644
--- a/src/bindings/python/test/xml/TestXMLError.py
+++ b/src/bindings/python/test/xml/TestXMLError.py
@@ -39,42 +39,42 @@ class TestXMLError(unittest.TestCase):
 
   def test_XMLError_create(self):
     error = libsbml.XMLError()
-    self.assert_( error != None )
+    self.assertTrue( error != None )
     error = None
     error = libsbml.XMLError(libsbml.DuplicateXMLAttribute)
-    self.assert_( error.getErrorId() == libsbml.DuplicateXMLAttribute )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
-    self.assert_( error.getSeverityAsString() ==  "Error"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_XML )
-    self.assert_( error.getCategoryAsString() ==  "XML content" )
-#   self.assert_( error.getMessage() ==  "Duplicate XML attribute.\n"  )
-    self.assert_( error.getShortMessage() ==  "Duplicate attribute"  )
+    self.assertTrue( error.getErrorId() == libsbml.DuplicateXMLAttribute )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
+    self.assertTrue( error.getSeverityAsString() ==  "Error"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_XML )
+    self.assertTrue( error.getCategoryAsString() ==  "XML content" )
+#   self.assertTrue( error.getMessage() ==  "Duplicate XML attribute.\n"  )
+    self.assertTrue( error.getShortMessage() ==  "Duplicate attribute"  )
     error = None
     error = libsbml.XMLError(12345, "My message")
-    self.assert_( error.getErrorId() == 12345 )
-    self.assert_( error.getMessage() ==  "My message"  )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_FATAL )
-    self.assert_( error.getSeverityAsString() ==  "Fatal"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_INTERNAL )
-    self.assert_( error.getCategoryAsString() ==  "Internal" )
+    self.assertTrue( error.getErrorId() == 12345 )
+    self.assertTrue( error.getMessage() ==  "My message"  )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_FATAL )
+    self.assertTrue( error.getSeverityAsString() ==  "Fatal"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_INTERNAL )
+    self.assertTrue( error.getCategoryAsString() ==  "Internal" )
     error = None
     error = libsbml.XMLError(12345, "My message",0,0,libsbml.LIBSBML_SEV_INFO,libsbml.LIBSBML_CAT_SYSTEM)
-    self.assert_( error.getErrorId() == 12345 )
-    self.assert_( error.getMessage() ==  "My message"  )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_INFO )
-    self.assert_( error.getSeverityAsString() ==  "Informational"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_SYSTEM )
-    self.assert_( error.getCategoryAsString() ==  "Operating system" )
+    self.assertTrue( error.getErrorId() == 12345 )
+    self.assertTrue( error.getMessage() ==  "My message"  )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_INFO )
+    self.assertTrue( error.getSeverityAsString() ==  "Informational"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_SYSTEM )
+    self.assertTrue( error.getCategoryAsString() ==  "Operating system" )
     self.assertEqual( True, error.isInfo() )
     self.assertEqual( True, error.isSystem() )
     error = None
     error = libsbml.XMLError(10000, "Another message",0,0,libsbml.LIBSBML_SEV_FATAL,libsbml.LIBSBML_CAT_XML)
-    self.assert_( error.getErrorId() == 10000 )
-    self.assert_( error.getMessage() ==  "Another message"  )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_FATAL )
-    self.assert_( error.getSeverityAsString() ==  "Fatal"  )
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_XML )
-    self.assert_( error.getCategoryAsString() ==  "XML content" )
+    self.assertTrue( error.getErrorId() == 10000 )
+    self.assertTrue( error.getMessage() ==  "Another message"  )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_FATAL )
+    self.assertTrue( error.getSeverityAsString() ==  "Fatal"  )
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_XML )
+    self.assertTrue( error.getCategoryAsString() ==  "XML content" )
     self.assertEqual( True, error.isFatal() )
     self.assertEqual( True, error.isXML() )
     error = None
@@ -82,13 +82,13 @@ def test_XMLError_create(self):
 
   def test_XMLError_setters(self):
     error = libsbml.XMLError()
-    self.assert_( error != None )
+    self.assertTrue( error != None )
     i = error.setLine(23)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( error.getLine() == 23 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( error.getLine() == 23 )
     i = error.setColumn(45)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( error.getColumn() == 45 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( error.getColumn() == 45 )
     error = None
     pass  
 
diff --git a/src/bindings/python/test/xml/TestXMLErrorC.py b/src/bindings/python/test/xml/TestXMLErrorC.py
index d7e79a7612..c271711c30 100644
--- a/src/bindings/python/test/xml/TestXMLErrorC.py
+++ b/src/bindings/python/test/xml/TestXMLErrorC.py
@@ -39,25 +39,25 @@ class TestXMLErrorC(unittest.TestCase):
 
   def test_XMLError_create_C(self):
     error = libsbml.XMLError()
-    self.assert_( error != None )
-    self.assert_( error.isInfo() == False )
-    self.assert_( error.isWarning() == False )
-    self.assert_( error.isError() == False )
-    self.assert_( error.isFatal() == True )
+    self.assertTrue( error != None )
+    self.assertTrue( error.isInfo() == False )
+    self.assertTrue( error.isWarning() == False )
+    self.assertTrue( error.isError() == False )
+    self.assertTrue( error.isFatal() == True )
     _dummyList = [ error ]; _dummyList[:] = []; del _dummyList
     error = libsbml.XMLError(12345, "My message")
-    self.assert_( (  "My message" != error.getMessage() ) == False )
-    self.assert_( error.getErrorId() == 12345 )
+    self.assertTrue( (  "My message" != error.getMessage() ) == False )
+    self.assertTrue( error.getErrorId() == 12345 )
     _dummyList = [ error ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_XMLError_variablesAsStrings(self):
     error = libsbml.XMLError(1003, "")
-    self.assert_( error.getErrorId() == 1003 )
-    self.assert_( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
-    self.assert_((  "Error" == error.getSeverityAsString() ))
-    self.assert_( error.getCategory() == libsbml.LIBSBML_CAT_XML )
-    self.assert_((  "XML content" == error.getCategoryAsString() ))
+    self.assertTrue( error.getErrorId() == 1003 )
+    self.assertTrue( error.getSeverity() == libsbml.LIBSBML_SEV_ERROR )
+    self.assertTrue((  "Error" == error.getSeverityAsString() ))
+    self.assertTrue( error.getCategory() == libsbml.LIBSBML_CAT_XML )
+    self.assertTrue((  "XML content" == error.getCategoryAsString() ))
     _dummyList = [ error ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/xml/TestXMLNamespaces.py b/src/bindings/python/test/xml/TestXMLNamespaces.py
index debc74cabb..689a84ab4d 100644
--- a/src/bindings/python/test/xml/TestXMLNamespaces.py
+++ b/src/bindings/python/test/xml/TestXMLNamespaces.py
@@ -50,35 +50,35 @@ def tearDown(self):
     pass  
 
   def test_XMLNamespaces_add(self):
-    self.assert_( self.NS.getLength() == 0 )
-    self.assert_( self.NS.isEmpty() == True )
+    self.assertTrue( self.NS.getLength() == 0 )
+    self.assertTrue( self.NS.isEmpty() == True )
     self.NS.add( "http://test1.org/", "test1")
-    self.assert_( self.NS.getLength() == 1 )
-    self.assert_( self.NS.isEmpty() == False )
+    self.assertTrue( self.NS.getLength() == 1 )
+    self.assertTrue( self.NS.isEmpty() == False )
     self.NS.add( "http://test2.org/", "test2")
-    self.assert_( self.NS.getLength() == 2 )
-    self.assert_( self.NS.isEmpty() == False )
+    self.assertTrue( self.NS.getLength() == 2 )
+    self.assertTrue( self.NS.isEmpty() == False )
     self.NS.add( "http://test1.org/", "test1a")
-    self.assert_( self.NS.getLength() == 3 )
-    self.assert_( self.NS.isEmpty() == False )
+    self.assertTrue( self.NS.getLength() == 3 )
+    self.assertTrue( self.NS.isEmpty() == False )
     self.NS.add( "http://test1.org/", "test1a")
-    self.assert_( self.NS.getLength() == 3 )
-    self.assert_( self.NS.isEmpty() == False )
-    self.assert_( (self.NS.getIndex( "http://test1.org/") == -1) == False )
+    self.assertTrue( self.NS.getLength() == 3 )
+    self.assertTrue( self.NS.isEmpty() == False )
+    self.assertTrue( (self.NS.getIndex( "http://test1.org/") == -1) == False )
     pass  
 
   def test_XMLNamespaces_add1(self):
-    self.assert_( self.NS.getLength() == 0 )
-    self.assert_( self.NS.isEmpty() == True )
+    self.assertTrue( self.NS.getLength() == 0 )
+    self.assertTrue( self.NS.isEmpty() == True )
     i = self.NS.add( "http://test1.org/", "test1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.NS.getLength() == 1 )
-    self.assert_( self.NS.isEmpty() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.NS.getLength() == 1 )
+    self.assertTrue( self.NS.isEmpty() == False )
     pass  
 
   def test_XMLNamespaces_baseline(self):
-    self.assert_( self.NS.getLength() == 0 )
-    self.assert_( self.NS.isEmpty() == True )
+    self.assertTrue( self.NS.getLength() == 0 )
+    self.assertTrue( self.NS.isEmpty() == True )
     pass  
 
   def test_XMLNamespaces_clear(self):
@@ -87,10 +87,10 @@ def test_XMLNamespaces_clear(self):
     self.NS.add( "http://test3.org/", "test3")
     self.NS.add( "http://test4.org/", "test4")
     self.NS.add( "http://test5.org/", "test5")
-    self.assert_( self.NS.getLength() == 5 )
+    self.assertTrue( self.NS.getLength() == 5 )
     i = self.NS.clear()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.NS.getLength() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.NS.getLength() == 0 )
     pass  
 
   def test_XMLNamespaces_get(self):
@@ -103,34 +103,34 @@ def test_XMLNamespaces_get(self):
     self.NS.add( "http://test7.org/", "test7")
     self.NS.add( "http://test8.org/", "test8")
     self.NS.add( "http://test9.org/", "test9")
-    self.assert_( self.NS.getLength() == 9 )
-    self.assert_( self.NS.getIndex( "http://test1.org/") == 0 )
-    self.assert_( (  "test2" != self.NS.getPrefix(1) ) == False )
-    self.assert_( ( 		      "test1" != self.NS.getPrefix( "http://test1.org/") ) == False )
-    self.assert_( (  "http://test2.org/" != self.NS.getURI(1) ) == False )
-    self.assert_( ( 		      "http://test2.org/" != self.NS.getURI( "test2") ) == False )
-    self.assert_( self.NS.getIndex( "http://test1.org/") == 0 )
-    self.assert_( self.NS.getIndex( "http://test2.org/") == 1 )
-    self.assert_( self.NS.getIndex( "http://test5.org/") == 4 )
-    self.assert_( self.NS.getIndex( "http://test9.org/") == 8 )
-    self.assert_( self.NS.getIndex( "http://testX.org/") == -1 )
-    self.assert_( self.NS.hasURI( "http://test1.org/") != False )
-    self.assert_( self.NS.hasURI( "http://test2.org/") != False )
-    self.assert_( self.NS.hasURI( "http://test5.org/") != False )
-    self.assert_( self.NS.hasURI( "http://test9.org/") != False )
-    self.assert_( self.NS.hasURI( "http://testX.org/") == False )
-    self.assert_( self.NS.getIndexByPrefix( "test1") == 0 )
-    self.assert_( self.NS.getIndexByPrefix( "test5") == 4 )
-    self.assert_( self.NS.getIndexByPrefix( "test9") == 8 )
-    self.assert_( self.NS.getIndexByPrefix( "testX") == -1 )
-    self.assert_( self.NS.hasPrefix( "test1") != False )
-    self.assert_( self.NS.hasPrefix( "test5") != False )
-    self.assert_( self.NS.hasPrefix( "test9") != False )
-    self.assert_( self.NS.hasPrefix( "testX") == False )
-    self.assert_( self.NS.hasNS( "http://test1.org/", "test1") != False )
-    self.assert_( self.NS.hasNS( "http://test5.org/", "test5") != False )
-    self.assert_( self.NS.hasNS( "http://test9.org/", "test9") != False )
-    self.assert_( self.NS.hasNS( "http://testX.org/", "testX") == False )
+    self.assertTrue( self.NS.getLength() == 9 )
+    self.assertTrue( self.NS.getIndex( "http://test1.org/") == 0 )
+    self.assertTrue( (  "test2" != self.NS.getPrefix(1) ) == False )
+    self.assertTrue( ( 		      "test1" != self.NS.getPrefix( "http://test1.org/") ) == False )
+    self.assertTrue( (  "http://test2.org/" != self.NS.getURI(1) ) == False )
+    self.assertTrue( ( 		      "http://test2.org/" != self.NS.getURI( "test2") ) == False )
+    self.assertTrue( self.NS.getIndex( "http://test1.org/") == 0 )
+    self.assertTrue( self.NS.getIndex( "http://test2.org/") == 1 )
+    self.assertTrue( self.NS.getIndex( "http://test5.org/") == 4 )
+    self.assertTrue( self.NS.getIndex( "http://test9.org/") == 8 )
+    self.assertTrue( self.NS.getIndex( "http://testX.org/") == -1 )
+    self.assertTrue( self.NS.hasURI( "http://test1.org/") != False )
+    self.assertTrue( self.NS.hasURI( "http://test2.org/") != False )
+    self.assertTrue( self.NS.hasURI( "http://test5.org/") != False )
+    self.assertTrue( self.NS.hasURI( "http://test9.org/") != False )
+    self.assertTrue( self.NS.hasURI( "http://testX.org/") == False )
+    self.assertTrue( self.NS.getIndexByPrefix( "test1") == 0 )
+    self.assertTrue( self.NS.getIndexByPrefix( "test5") == 4 )
+    self.assertTrue( self.NS.getIndexByPrefix( "test9") == 8 )
+    self.assertTrue( self.NS.getIndexByPrefix( "testX") == -1 )
+    self.assertTrue( self.NS.hasPrefix( "test1") != False )
+    self.assertTrue( self.NS.hasPrefix( "test5") != False )
+    self.assertTrue( self.NS.hasPrefix( "test9") != False )
+    self.assertTrue( self.NS.hasPrefix( "testX") == False )
+    self.assertTrue( self.NS.hasNS( "http://test1.org/", "test1") != False )
+    self.assertTrue( self.NS.hasNS( "http://test5.org/", "test5") != False )
+    self.assertTrue( self.NS.hasNS( "http://test9.org/", "test9") != False )
+    self.assertTrue( self.NS.hasNS( "http://testX.org/", "testX") == False )
     pass  
 
   def test_XMLNamespaces_remove(self):
@@ -139,51 +139,51 @@ def test_XMLNamespaces_remove(self):
     self.NS.add( "http://test3.org/", "test3")
     self.NS.add( "http://test4.org/", "test4")
     self.NS.add( "http://test5.org/", "test5")
-    self.assert_( self.NS.getLength() == 5 )
+    self.assertTrue( self.NS.getLength() == 5 )
     self.NS.remove(4)
-    self.assert_( self.NS.getLength() == 4 )
+    self.assertTrue( self.NS.getLength() == 4 )
     self.NS.remove(3)
-    self.assert_( self.NS.getLength() == 3 )
+    self.assertTrue( self.NS.getLength() == 3 )
     self.NS.remove(2)
-    self.assert_( self.NS.getLength() == 2 )
+    self.assertTrue( self.NS.getLength() == 2 )
     self.NS.remove(1)
-    self.assert_( self.NS.getLength() == 1 )
+    self.assertTrue( self.NS.getLength() == 1 )
     self.NS.remove(0)
-    self.assert_( self.NS.getLength() == 0 )
+    self.assertTrue( self.NS.getLength() == 0 )
     self.NS.add( "http://test1.org/", "test1")
     self.NS.add( "http://test2.org/", "test2")
     self.NS.add( "http://test3.org/", "test3")
     self.NS.add( "http://test4.org/", "test4")
     self.NS.add( "http://test5.org/", "test5")
-    self.assert_( self.NS.getLength() == 5 )
+    self.assertTrue( self.NS.getLength() == 5 )
     self.NS.remove(0)
-    self.assert_( self.NS.getLength() == 4 )
+    self.assertTrue( self.NS.getLength() == 4 )
     self.NS.remove(0)
-    self.assert_( self.NS.getLength() == 3 )
+    self.assertTrue( self.NS.getLength() == 3 )
     self.NS.remove(0)
-    self.assert_( self.NS.getLength() == 2 )
+    self.assertTrue( self.NS.getLength() == 2 )
     self.NS.remove(0)
-    self.assert_( self.NS.getLength() == 1 )
+    self.assertTrue( self.NS.getLength() == 1 )
     self.NS.remove(0)
-    self.assert_( self.NS.getLength() == 0 )
+    self.assertTrue( self.NS.getLength() == 0 )
     pass  
 
   def test_XMLNamespaces_remove1(self):
     self.NS.add( "http://test1.org/", "test1")
     self.NS.add( "http://test2.org/", "test2")
-    self.assert_( self.NS.getLength() == 2 )
+    self.assertTrue( self.NS.getLength() == 2 )
     i = self.NS.remove(4)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( self.NS.getLength() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( self.NS.getLength() == 2 )
     i = self.NS.remove( "test4")
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( self.NS.getLength() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( self.NS.getLength() == 2 )
     i = self.NS.remove(1)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.NS.getLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.NS.getLength() == 1 )
     i = self.NS.remove( "test1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( self.NS.getLength() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( self.NS.getLength() == 0 )
     pass  
 
   def test_XMLNamespaces_remove_by_prefix(self):
@@ -192,49 +192,49 @@ def test_XMLNamespaces_remove_by_prefix(self):
     self.NS.add( "http://test3.org/", "test3")
     self.NS.add( "http://test4.org/", "test4")
     self.NS.add( "http://test5.org/", "test5")
-    self.assert_( self.NS.getLength() == 5 )
+    self.assertTrue( self.NS.getLength() == 5 )
     self.NS.remove( "test1")
-    self.assert_( self.NS.getLength() == 4 )
+    self.assertTrue( self.NS.getLength() == 4 )
     self.NS.remove( "test2")
-    self.assert_( self.NS.getLength() == 3 )
+    self.assertTrue( self.NS.getLength() == 3 )
     self.NS.remove( "test3")
-    self.assert_( self.NS.getLength() == 2 )
+    self.assertTrue( self.NS.getLength() == 2 )
     self.NS.remove( "test4")
-    self.assert_( self.NS.getLength() == 1 )
+    self.assertTrue( self.NS.getLength() == 1 )
     self.NS.remove( "test5")
-    self.assert_( self.NS.getLength() == 0 )
+    self.assertTrue( self.NS.getLength() == 0 )
     self.NS.add( "http://test1.org/", "test1")
     self.NS.add( "http://test2.org/", "test2")
     self.NS.add( "http://test3.org/", "test3")
     self.NS.add( "http://test4.org/", "test4")
     self.NS.add( "http://test5.org/", "test5")
-    self.assert_( self.NS.getLength() == 5 )
+    self.assertTrue( self.NS.getLength() == 5 )
     self.NS.remove( "test5")
-    self.assert_( self.NS.getLength() == 4 )
+    self.assertTrue( self.NS.getLength() == 4 )
     self.NS.remove( "test4")
-    self.assert_( self.NS.getLength() == 3 )
+    self.assertTrue( self.NS.getLength() == 3 )
     self.NS.remove( "test3")
-    self.assert_( self.NS.getLength() == 2 )
+    self.assertTrue( self.NS.getLength() == 2 )
     self.NS.remove( "test2")
-    self.assert_( self.NS.getLength() == 1 )
+    self.assertTrue( self.NS.getLength() == 1 )
     self.NS.remove( "test1")
-    self.assert_( self.NS.getLength() == 0 )
+    self.assertTrue( self.NS.getLength() == 0 )
     self.NS.add( "http://test1.org/", "test1")
     self.NS.add( "http://test2.org/", "test2")
     self.NS.add( "http://test3.org/", "test3")
     self.NS.add( "http://test4.org/", "test4")
     self.NS.add( "http://test5.org/", "test5")
-    self.assert_( self.NS.getLength() == 5 )
+    self.assertTrue( self.NS.getLength() == 5 )
     self.NS.remove( "test3")
-    self.assert_( self.NS.getLength() == 4 )
+    self.assertTrue( self.NS.getLength() == 4 )
     self.NS.remove( "test1")
-    self.assert_( self.NS.getLength() == 3 )
+    self.assertTrue( self.NS.getLength() == 3 )
     self.NS.remove( "test4")
-    self.assert_( self.NS.getLength() == 2 )
+    self.assertTrue( self.NS.getLength() == 2 )
     self.NS.remove( "test5")
-    self.assert_( self.NS.getLength() == 1 )
+    self.assertTrue( self.NS.getLength() == 1 )
     self.NS.remove( "test2")
-    self.assert_( self.NS.getLength() == 0 )
+    self.assertTrue( self.NS.getLength() == 0 )
     pass  
 
 def suite():
diff --git a/src/bindings/python/test/xml/TestXMLNode.py b/src/bindings/python/test/xml/TestXMLNode.py
index c777d549ac..c428bb4a63 100644
--- a/src/bindings/python/test/xml/TestXMLNode.py
+++ b/src/bindings/python/test/xml/TestXMLNode.py
@@ -52,109 +52,109 @@ def test_XMLNode_attribute_add_remove(self):
     xt2a = libsbml.XMLTriple("name2", "http://name2a.org/", "p2a")
     node.addAttr( "name1", "val1", "http://name1.org/", "p1")
     node.addAttr(xt2, "val2")
-    self.assert_( node.getAttributesLength() == 2 )
-    self.assert_( node.isAttributesEmpty() == False )
-    self.assert_( (  "name1" != node.getAttrName(0) ) == False )
-    self.assert_( (  "val1"  != node.getAttrValue(0) ) == False )
-    self.assert_( (  "http://name1.org/" != node.getAttrURI(0) ) == False )
-    self.assert_( (  "p1"    != node.getAttrPrefix(0) ) == False )
-    self.assert_( (  "name2" != node.getAttrName(1) ) == False )
-    self.assert_( (  "val2"  != node.getAttrValue(1) ) == False )
-    self.assert_( (  "http://name2.org/" != node.getAttrURI(1) ) == False )
-    self.assert_( (  "p2"    != node.getAttrPrefix(1) ) == False )
-    self.assert_( node.getAttrValue( "name1") == "" )
-    self.assert_( node.getAttrValue( "name2") == "" )
-    self.assert_( (  "val1"  != node.getAttrValue( "name1", "http://name1.org/") ) == False )
-    self.assert_( (  "val2"  != node.getAttrValue( "name2", "http://name2.org/") ) == False )
-    self.assert_( (  "val1"  != node.getAttrValue(xt1) ) == False )
-    self.assert_( (  "val2"  != node.getAttrValue(xt2) ) == False )
-    self.assert_( node.hasAttr(-1) == False )
-    self.assert_( node.hasAttr(2) == False )
-    self.assert_( node.hasAttr(0) == True )
-    self.assert_( node.hasAttr( "name1", "http://name1.org/") == True )
-    self.assert_( node.hasAttr( "name2", "http://name2.org/") == True )
-    self.assert_( node.hasAttr( "name3", "http://name3.org/") == False )
-    self.assert_( node.hasAttr(xt1) == True )
-    self.assert_( node.hasAttr(xt2) == True )
-    self.assert_( node.hasAttr(xt3) == False )
+    self.assertTrue( node.getAttributesLength() == 2 )
+    self.assertTrue( node.isAttributesEmpty() == False )
+    self.assertTrue( (  "name1" != node.getAttrName(0) ) == False )
+    self.assertTrue( (  "val1"  != node.getAttrValue(0) ) == False )
+    self.assertTrue( (  "http://name1.org/" != node.getAttrURI(0) ) == False )
+    self.assertTrue( (  "p1"    != node.getAttrPrefix(0) ) == False )
+    self.assertTrue( (  "name2" != node.getAttrName(1) ) == False )
+    self.assertTrue( (  "val2"  != node.getAttrValue(1) ) == False )
+    self.assertTrue( (  "http://name2.org/" != node.getAttrURI(1) ) == False )
+    self.assertTrue( (  "p2"    != node.getAttrPrefix(1) ) == False )
+    self.assertTrue( node.getAttrValue( "name1") == "" )
+    self.assertTrue( node.getAttrValue( "name2") == "" )
+    self.assertTrue( (  "val1"  != node.getAttrValue( "name1", "http://name1.org/") ) == False )
+    self.assertTrue( (  "val2"  != node.getAttrValue( "name2", "http://name2.org/") ) == False )
+    self.assertTrue( (  "val1"  != node.getAttrValue(xt1) ) == False )
+    self.assertTrue( (  "val2"  != node.getAttrValue(xt2) ) == False )
+    self.assertTrue( node.hasAttr(-1) == False )
+    self.assertTrue( node.hasAttr(2) == False )
+    self.assertTrue( node.hasAttr(0) == True )
+    self.assertTrue( node.hasAttr( "name1", "http://name1.org/") == True )
+    self.assertTrue( node.hasAttr( "name2", "http://name2.org/") == True )
+    self.assertTrue( node.hasAttr( "name3", "http://name3.org/") == False )
+    self.assertTrue( node.hasAttr(xt1) == True )
+    self.assertTrue( node.hasAttr(xt2) == True )
+    self.assertTrue( node.hasAttr(xt3) == False )
     node.addAttr( "noprefix", "val3")
-    self.assert_( node.getAttributesLength() == 3 )
-    self.assert_( node.isAttributesEmpty() == False )
-    self.assert_( (  "noprefix" != node.getAttrName(2) ) == False )
-    self.assert_( (  "val3"     != node.getAttrValue(2) ) == False )
-    self.assert_( node.getAttrURI(2) == "" )
-    self.assert_( node.getAttrPrefix(2) == "" )
-    self.assert_( (      "val3"  != node.getAttrValue( "noprefix") ) == False )
-    self.assert_( (  "val3"  != node.getAttrValue( "noprefix", "") ) == False )
-    self.assert_( node.hasAttr( "noprefix"    ) == True )
-    self.assert_( node.hasAttr( "noprefix", "") == True )
+    self.assertTrue( node.getAttributesLength() == 3 )
+    self.assertTrue( node.isAttributesEmpty() == False )
+    self.assertTrue( (  "noprefix" != node.getAttrName(2) ) == False )
+    self.assertTrue( (  "val3"     != node.getAttrValue(2) ) == False )
+    self.assertTrue( node.getAttrURI(2) == "" )
+    self.assertTrue( node.getAttrPrefix(2) == "" )
+    self.assertTrue( (      "val3"  != node.getAttrValue( "noprefix") ) == False )
+    self.assertTrue( (  "val3"  != node.getAttrValue( "noprefix", "") ) == False )
+    self.assertTrue( node.hasAttr( "noprefix"    ) == True )
+    self.assertTrue( node.hasAttr( "noprefix", "") == True )
     node.addAttr(xt1, "mval1")
     node.addAttr( "name2", "mval2", "http://name2.org/", "p2")
-    self.assert_( node.getAttributesLength() == 3 )
-    self.assert_( node.isAttributesEmpty() == False )
-    self.assert_( (  "name1" != node.getAttrName(0) ) == False )
-    self.assert_( (  "mval1" != node.getAttrValue(0) ) == False )
-    self.assert_( (  "http://name1.org/" != node.getAttrURI(0) ) == False )
-    self.assert_( (  "p1"    != node.getAttrPrefix(0) ) == False )
-    self.assert_( (  "name2"    != node.getAttrName(1) ) == False )
-    self.assert_( (  "mval2"    != node.getAttrValue(1) ) == False )
-    self.assert_( (  "http://name2.org/" != node.getAttrURI(1) ) == False )
-    self.assert_( (  "p2"       != node.getAttrPrefix(1) ) == False )
-    self.assert_( node.hasAttr(xt1) == True )
-    self.assert_( node.hasAttr( "name1", "http://name1.org/") == True )
+    self.assertTrue( node.getAttributesLength() == 3 )
+    self.assertTrue( node.isAttributesEmpty() == False )
+    self.assertTrue( (  "name1" != node.getAttrName(0) ) == False )
+    self.assertTrue( (  "mval1" != node.getAttrValue(0) ) == False )
+    self.assertTrue( (  "http://name1.org/" != node.getAttrURI(0) ) == False )
+    self.assertTrue( (  "p1"    != node.getAttrPrefix(0) ) == False )
+    self.assertTrue( (  "name2"    != node.getAttrName(1) ) == False )
+    self.assertTrue( (  "mval2"    != node.getAttrValue(1) ) == False )
+    self.assertTrue( (  "http://name2.org/" != node.getAttrURI(1) ) == False )
+    self.assertTrue( (  "p2"       != node.getAttrPrefix(1) ) == False )
+    self.assertTrue( node.hasAttr(xt1) == True )
+    self.assertTrue( node.hasAttr( "name1", "http://name1.org/") == True )
     node.addAttr( "noprefix", "mval3")
-    self.assert_( node.getAttributesLength() == 3 )
-    self.assert_( node.isAttributesEmpty() == False )
-    self.assert_( (  "noprefix" != node.getAttrName(2) ) == False )
-    self.assert_( (  "mval3"    != node.getAttrValue(2) ) == False )
-    self.assert_( node.getAttrURI(2) == "" )
-    self.assert_( node.getAttrPrefix(2) == "" )
-    self.assert_( node.hasAttr( "noprefix") == True )
-    self.assert_( node.hasAttr( "noprefix", "") == True )
+    self.assertTrue( node.getAttributesLength() == 3 )
+    self.assertTrue( node.isAttributesEmpty() == False )
+    self.assertTrue( (  "noprefix" != node.getAttrName(2) ) == False )
+    self.assertTrue( (  "mval3"    != node.getAttrValue(2) ) == False )
+    self.assertTrue( node.getAttrURI(2) == "" )
+    self.assertTrue( node.getAttrPrefix(2) == "" )
+    self.assertTrue( node.hasAttr( "noprefix") == True )
+    self.assertTrue( node.hasAttr( "noprefix", "") == True )
     node.addAttr(xt1a, "val1a")
     node.addAttr(xt2a, "val2a")
-    self.assert_( node.getAttributesLength() == 5 )
-    self.assert_( (  "name1" != node.getAttrName(3) ) == False )
-    self.assert_( (  "val1a" != node.getAttrValue(3) ) == False )
-    self.assert_( (  "http://name1a.org/" != node.getAttrURI(3) ) == False )
-    self.assert_( (  "p1a" != node.getAttrPrefix(3) ) == False )
-    self.assert_( (  "name2" != node.getAttrName(4) ) == False )
-    self.assert_( (  "val2a" != node.getAttrValue(4) ) == False )
-    self.assert_( (  "http://name2a.org/" != node.getAttrURI(4) ) == False )
-    self.assert_( (  "p2a" != node.getAttrPrefix(4) ) == False )
-    self.assert_( (  "val1a"  != node.getAttrValue( "name1", "http://name1a.org/") ) == False )
-    self.assert_( (  "val2a"  != node.getAttrValue( "name2", "http://name2a.org/") ) == False )
-    self.assert_( (  "val1a"  != node.getAttrValue(xt1a) ) == False )
-    self.assert_( (  "val2a"  != node.getAttrValue(xt2a) ) == False )
+    self.assertTrue( node.getAttributesLength() == 5 )
+    self.assertTrue( (  "name1" != node.getAttrName(3) ) == False )
+    self.assertTrue( (  "val1a" != node.getAttrValue(3) ) == False )
+    self.assertTrue( (  "http://name1a.org/" != node.getAttrURI(3) ) == False )
+    self.assertTrue( (  "p1a" != node.getAttrPrefix(3) ) == False )
+    self.assertTrue( (  "name2" != node.getAttrName(4) ) == False )
+    self.assertTrue( (  "val2a" != node.getAttrValue(4) ) == False )
+    self.assertTrue( (  "http://name2a.org/" != node.getAttrURI(4) ) == False )
+    self.assertTrue( (  "p2a" != node.getAttrPrefix(4) ) == False )
+    self.assertTrue( (  "val1a"  != node.getAttrValue( "name1", "http://name1a.org/") ) == False )
+    self.assertTrue( (  "val2a"  != node.getAttrValue( "name2", "http://name2a.org/") ) == False )
+    self.assertTrue( (  "val1a"  != node.getAttrValue(xt1a) ) == False )
+    self.assertTrue( (  "val2a"  != node.getAttrValue(xt2a) ) == False )
     node.removeAttr(xt1a)
     node.removeAttr(xt2a)
-    self.assert_( node.getAttributesLength() == 3 )
+    self.assertTrue( node.getAttributesLength() == 3 )
     node.removeAttr( "name1", "http://name1.org/")
-    self.assert_( node.getAttributesLength() == 2 )
-    self.assert_( node.isAttributesEmpty() == False )
-    self.assert_( (  "name2" != node.getAttrName(0) ) == False )
-    self.assert_( (  "mval2" != node.getAttrValue(0) ) == False )
-    self.assert_( (  "http://name2.org/" != node.getAttrURI(0) ) == False )
-    self.assert_( (  "p2" != node.getAttrPrefix(0) ) == False )
-    self.assert_( (  "noprefix" != node.getAttrName(1) ) == False )
-    self.assert_( (  "mval3" != node.getAttrValue(1) ) == False )
-    self.assert_( node.getAttrURI(1) == "" )
-    self.assert_( node.getAttrPrefix(1) == "" )
-    self.assert_( node.hasAttr( "name1", "http://name1.org/") == False )
+    self.assertTrue( node.getAttributesLength() == 2 )
+    self.assertTrue( node.isAttributesEmpty() == False )
+    self.assertTrue( (  "name2" != node.getAttrName(0) ) == False )
+    self.assertTrue( (  "mval2" != node.getAttrValue(0) ) == False )
+    self.assertTrue( (  "http://name2.org/" != node.getAttrURI(0) ) == False )
+    self.assertTrue( (  "p2" != node.getAttrPrefix(0) ) == False )
+    self.assertTrue( (  "noprefix" != node.getAttrName(1) ) == False )
+    self.assertTrue( (  "mval3" != node.getAttrValue(1) ) == False )
+    self.assertTrue( node.getAttrURI(1) == "" )
+    self.assertTrue( node.getAttrPrefix(1) == "" )
+    self.assertTrue( node.hasAttr( "name1", "http://name1.org/") == False )
     node.removeAttr(xt2)
-    self.assert_( node.getAttributesLength() == 1 )
-    self.assert_( node.isAttributesEmpty() == False )
-    self.assert_( (  "noprefix" != node.getAttrName(0) ) == False )
-    self.assert_( (  "mval3" != node.getAttrValue(0) ) == False )
-    self.assert_( node.getAttrURI(0) == "" )
-    self.assert_( node.getAttrPrefix(0) == "" )
-    self.assert_( node.hasAttr(xt2) == False )
-    self.assert_( node.hasAttr( "name2", "http://name2.org/") == False )
+    self.assertTrue( node.getAttributesLength() == 1 )
+    self.assertTrue( node.isAttributesEmpty() == False )
+    self.assertTrue( (  "noprefix" != node.getAttrName(0) ) == False )
+    self.assertTrue( (  "mval3" != node.getAttrValue(0) ) == False )
+    self.assertTrue( node.getAttrURI(0) == "" )
+    self.assertTrue( node.getAttrPrefix(0) == "" )
+    self.assertTrue( node.hasAttr(xt2) == False )
+    self.assertTrue( node.hasAttr( "name2", "http://name2.org/") == False )
     node.removeAttr( "noprefix")
-    self.assert_( node.getAttributesLength() == 0 )
-    self.assert_( node.isAttributesEmpty() == True )
-    self.assert_( node.hasAttr( "noprefix"    ) == False )
-    self.assert_( node.hasAttr( "noprefix", "") == False )
+    self.assertTrue( node.getAttributesLength() == 0 )
+    self.assertTrue( node.isAttributesEmpty() == True )
+    self.assertTrue( node.hasAttr( "noprefix"    ) == False )
+    self.assertTrue( node.hasAttr( "noprefix", "") == False )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
@@ -181,36 +181,36 @@ def test_XMLNode_attribute_set_clear(self):
     nattr.add(xt4, "val4")
     nattr.add(xt5, "val5")
     node.setAttributes(nattr)
-    self.assert_( node.getAttributesLength() == 5 )
-    self.assert_( node.isAttributesEmpty() == False )
-    self.assert_( (  "name1" != node.getAttrName(0) ) == False )
-    self.assert_( (  "val1"  != node.getAttrValue(0) ) == False )
-    self.assert_( (  "http://name1.org/" != node.getAttrURI(0) ) == False )
-    self.assert_( (  "p1"    != node.getAttrPrefix(0) ) == False )
-    self.assert_( (  "name2" != node.getAttrName(1) ) == False )
-    self.assert_( (  "val2"  != node.getAttrValue(1) ) == False )
-    self.assert_( (  "http://name2.org/" != node.getAttrURI(1) ) == False )
-    self.assert_( (  "p2"    != node.getAttrPrefix(1) ) == False )
-    self.assert_( (  "name3" != node.getAttrName(2) ) == False )
-    self.assert_( (  "val3"  != node.getAttrValue(2) ) == False )
-    self.assert_( (  "http://name3.org/" != node.getAttrURI(2) ) == False )
-    self.assert_( (  "p3"    != node.getAttrPrefix(2) ) == False )
-    self.assert_( (  "name4" != node.getAttrName(3) ) == False )
-    self.assert_( (  "val4"  != node.getAttrValue(3) ) == False )
-    self.assert_( (  "http://name4.org/" != node.getAttrURI(3) ) == False )
-    self.assert_( (  "p4"    != node.getAttrPrefix(3) ) == False )
-    self.assert_( (  "name5" != node.getAttrName(4) ) == False )
-    self.assert_( (  "val5"  != node.getAttrValue(4) ) == False )
-    self.assert_( (  "http://name5.org/" != node.getAttrURI(4) ) == False )
-    self.assert_( (  "p5"    != node.getAttrPrefix(4) ) == False )
+    self.assertTrue( node.getAttributesLength() == 5 )
+    self.assertTrue( node.isAttributesEmpty() == False )
+    self.assertTrue( (  "name1" != node.getAttrName(0) ) == False )
+    self.assertTrue( (  "val1"  != node.getAttrValue(0) ) == False )
+    self.assertTrue( (  "http://name1.org/" != node.getAttrURI(0) ) == False )
+    self.assertTrue( (  "p1"    != node.getAttrPrefix(0) ) == False )
+    self.assertTrue( (  "name2" != node.getAttrName(1) ) == False )
+    self.assertTrue( (  "val2"  != node.getAttrValue(1) ) == False )
+    self.assertTrue( (  "http://name2.org/" != node.getAttrURI(1) ) == False )
+    self.assertTrue( (  "p2"    != node.getAttrPrefix(1) ) == False )
+    self.assertTrue( (  "name3" != node.getAttrName(2) ) == False )
+    self.assertTrue( (  "val3"  != node.getAttrValue(2) ) == False )
+    self.assertTrue( (  "http://name3.org/" != node.getAttrURI(2) ) == False )
+    self.assertTrue( (  "p3"    != node.getAttrPrefix(2) ) == False )
+    self.assertTrue( (  "name4" != node.getAttrName(3) ) == False )
+    self.assertTrue( (  "val4"  != node.getAttrValue(3) ) == False )
+    self.assertTrue( (  "http://name4.org/" != node.getAttrURI(3) ) == False )
+    self.assertTrue( (  "p4"    != node.getAttrPrefix(3) ) == False )
+    self.assertTrue( (  "name5" != node.getAttrName(4) ) == False )
+    self.assertTrue( (  "val5"  != node.getAttrValue(4) ) == False )
+    self.assertTrue( (  "http://name5.org/" != node.getAttrURI(4) ) == False )
+    self.assertTrue( (  "p5"    != node.getAttrPrefix(4) ) == False )
     ntriple = libsbml.XMLTriple("test2","http://test2.org/","p2")
     node.setTriple(ntriple)
-    self.assert_( (    "test2" != node.getName() ) == False )
-    self.assert_( (     "http://test2.org/" != node.getURI() ) == False )
-    self.assert_( (  "p2" != node.getPrefix() ) == False )
+    self.assertTrue( (    "test2" != node.getName() ) == False )
+    self.assertTrue( (     "http://test2.org/" != node.getURI() ) == False )
+    self.assertTrue( (  "p2" != node.getPrefix() ) == False )
     node.clearAttributes()
-    self.assert_( node.getAttributesLength() == 0 )
-    self.assert_( node.isAttributesEmpty() != False )
+    self.assertTrue( node.getAttributesLength() == 0 )
+    self.assertTrue( node.isAttributesEmpty() != False )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ntriple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
@@ -230,15 +230,15 @@ def test_XMLNode_convert(self):
     gchild = child.getChild(0)
     attr = child.getAttributes()
     ns = child.getNamespaces()
-    self.assert_( (  "annotation" != node.getName() ) == False )
-    self.assert_( ( "test"  != child.getName() ) == False )
-    self.assert_( ( "test"  != gchild.getCharacters() ) == False )
-    self.assert_( (  "id"    != attr.getName(0) ) == False )
-    self.assert_( (  "test"  != attr.getValue(0) ) == False )
-    self.assert_( (  "http://test.org/"  != ns.getURI(0) ) == False )
-    self.assert_( ns.getPrefix(0) == "" )
+    self.assertTrue( (  "annotation" != node.getName() ) == False )
+    self.assertTrue( ( "test"  != child.getName() ) == False )
+    self.assertTrue( ( "test"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "id"    != attr.getName(0) ) == False )
+    self.assertTrue( (  "test"  != attr.getValue(0) ) == False )
+    self.assertTrue( (  "http://test.org/"  != ns.getURI(0) ) == False )
+    self.assertTrue( ns.getPrefix(0) == "" )
     toxmlstring = node.toXMLString()
-    self.assert_( ( xmlstr != toxmlstring ) == False )
+    self.assertTrue( ( xmlstr != toxmlstring ) == False )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -251,98 +251,98 @@ def test_XMLNode_convert_dummyroot(self):
     xmlstr_dummy1 =  "<p>test1</p><p>test2</p>";
     xmlstr_dummy2 =  "<test1>test1</test1><test2>test2</test2>";
     rootnode = libsbml.XMLNode.convertStringToXMLNode(xmlstr_nodummy1,None)
-    self.assert_( rootnode.getNumChildren() == 1 )
+    self.assertTrue( rootnode.getNumChildren() == 1 )
     child = rootnode.getChild(0)
     gchild = child.getChild(0)
-    self.assert_( (  "notes" != rootnode.getName() ) == False )
-    self.assert_( ( "p"  != child.getName() ) == False )
-    self.assert_( ( "test"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "notes" != rootnode.getName() ) == False )
+    self.assertTrue( ( "p"  != child.getName() ) == False )
+    self.assertTrue( ( "test"  != gchild.getCharacters() ) == False )
     toxmlstring = rootnode.toXMLString()
-    self.assert_( ( xmlstr_nodummy1 != toxmlstring ) == False )
+    self.assertTrue( ( xmlstr_nodummy1 != toxmlstring ) == False )
     _dummyList = [ rootnode ]; _dummyList[:] = []; del _dummyList
     rootnode = libsbml.XMLNode.convertStringToXMLNode(xmlstr_nodummy2,None)
-    self.assert_( rootnode.getNumChildren() == 1 )
+    self.assertTrue( rootnode.getNumChildren() == 1 )
     child = rootnode.getChild(0)
     gchild = child.getChild(0)
-    self.assert_( (  "html" != rootnode.getName() ) == False )
-    self.assert_( ( "p"  != child.getName() ) == False )
-    self.assert_( ( "test"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "html" != rootnode.getName() ) == False )
+    self.assertTrue( ( "p"  != child.getName() ) == False )
+    self.assertTrue( ( "test"  != gchild.getCharacters() ) == False )
     toxmlstring = rootnode.toXMLString()
-    self.assert_( ( xmlstr_nodummy2 != toxmlstring ) == False )
+    self.assertTrue( ( xmlstr_nodummy2 != toxmlstring ) == False )
     _dummyList = [ rootnode ]; _dummyList[:] = []; del _dummyList
     rootnode = libsbml.XMLNode.convertStringToXMLNode(xmlstr_nodummy3,None)
-    self.assert_( rootnode.getNumChildren() == 1 )
+    self.assertTrue( rootnode.getNumChildren() == 1 )
     child = rootnode.getChild(0)
     gchild = child.getChild(0)
-    self.assert_( (  "body" != rootnode.getName() ) == False )
-    self.assert_( ( "p"  != child.getName() ) == False )
-    self.assert_( ( "test"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "body" != rootnode.getName() ) == False )
+    self.assertTrue( ( "p"  != child.getName() ) == False )
+    self.assertTrue( ( "test"  != gchild.getCharacters() ) == False )
     toxmlstring = rootnode.toXMLString()
-    self.assert_( ( xmlstr_nodummy3 != toxmlstring ) == False )
+    self.assertTrue( ( xmlstr_nodummy3 != toxmlstring ) == False )
     _dummyList = [ rootnode ]; _dummyList[:] = []; del _dummyList
     rootnode = libsbml.XMLNode.convertStringToXMLNode(xmlstr_nodummy4,None)
-    self.assert_( rootnode.getNumChildren() == 1 )
+    self.assertTrue( rootnode.getNumChildren() == 1 )
     child = rootnode.getChild(0)
-    self.assert_( (  "p" != rootnode.getName() ) == False )
-    self.assert_( ( "test"  != child.getCharacters() ) == False )
+    self.assertTrue( (  "p" != rootnode.getName() ) == False )
+    self.assertTrue( ( "test"  != child.getCharacters() ) == False )
     toxmlstring = rootnode.toXMLString()
-    self.assert_( ( xmlstr_nodummy4 != toxmlstring ) == False )
+    self.assertTrue( ( xmlstr_nodummy4 != toxmlstring ) == False )
     _dummyList = [ rootnode ]; _dummyList[:] = []; del _dummyList
     rootnode = libsbml.XMLNode.convertStringToXMLNode(xmlstr_nodummy5,None)
-    self.assert_( rootnode.getNumChildren() == 1 )
+    self.assertTrue( rootnode.getNumChildren() == 1 )
     child = rootnode.getChild(0)
     gchild = child.getChild(0)
-    self.assert_( (  "test1" != rootnode.getName() ) == False )
-    self.assert_( ( "test2"  != child.getName() ) == False )
-    self.assert_( ( "test"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "test1" != rootnode.getName() ) == False )
+    self.assertTrue( ( "test2"  != child.getName() ) == False )
+    self.assertTrue( ( "test"  != gchild.getCharacters() ) == False )
     toxmlstring = rootnode.toXMLString()
-    self.assert_( ( xmlstr_nodummy5 != toxmlstring ) == False )
+    self.assertTrue( ( xmlstr_nodummy5 != toxmlstring ) == False )
     _dummyList = [ rootnode ]; _dummyList[:] = []; del _dummyList
     rootnode = libsbml.XMLNode.convertStringToXMLNode(xmlstr_dummy1,None)
-    self.assert_( rootnode.isEOF() == True )
-    self.assert_( rootnode.getNumChildren() == 2 )
+    self.assertTrue( rootnode.isEOF() == True )
+    self.assertTrue( rootnode.getNumChildren() == 2 )
     child = rootnode.getChild(0)
     gchild = child.getChild(0)
-    self.assert_( (  "p" != child.getName() ) == False )
-    self.assert_( ( "test1"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "p" != child.getName() ) == False )
+    self.assertTrue( ( "test1"  != gchild.getCharacters() ) == False )
     child = rootnode.getChild(1)
     gchild = child.getChild(0)
-    self.assert_( (  "p" != child.getName() ) == False )
-    self.assert_( ( "test2"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "p" != child.getName() ) == False )
+    self.assertTrue( ( "test2"  != gchild.getCharacters() ) == False )
     toxmlstring = rootnode.toXMLString()
-    self.assert_( ( xmlstr_dummy1 != toxmlstring ) == False )
+    self.assertTrue( ( xmlstr_dummy1 != toxmlstring ) == False )
     _dummyList = [ rootnode ]; _dummyList[:] = []; del _dummyList
     rootnode = libsbml.XMLNode.convertStringToXMLNode(xmlstr_dummy2,None)
-    self.assert_( rootnode.isEOF() == True )
-    self.assert_( rootnode.getNumChildren() == 2 )
+    self.assertTrue( rootnode.isEOF() == True )
+    self.assertTrue( rootnode.getNumChildren() == 2 )
     child = rootnode.getChild(0)
     gchild = child.getChild(0)
-    self.assert_( (  "test1" != child.getName() ) == False )
-    self.assert_( ( "test1"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "test1" != child.getName() ) == False )
+    self.assertTrue( ( "test1"  != gchild.getCharacters() ) == False )
     child = rootnode.getChild(1)
     gchild = child.getChild(0)
-    self.assert_( (  "test2" != child.getName() ) == False )
-    self.assert_( ( "test2"  != gchild.getCharacters() ) == False )
+    self.assertTrue( (  "test2" != child.getName() ) == False )
+    self.assertTrue( ( "test2"  != gchild.getCharacters() ) == False )
     toxmlstring = rootnode.toXMLString()
-    self.assert_( ( xmlstr_dummy2 != toxmlstring ) == False )
+    self.assertTrue( ( xmlstr_dummy2 != toxmlstring ) == False )
     _dummyList = [ rootnode ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_XMLNode_create(self):
     node = libsbml.XMLNode()
-    self.assert_( node != None )
-    self.assert_( node.getNumChildren() == 0 )
+    self.assertTrue( node != None )
+    self.assertTrue( node.getNumChildren() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     node = libsbml.XMLNode()
-    self.assert_( node != None )
+    self.assertTrue( node != None )
     node2 = libsbml.XMLNode()
-    self.assert_( node2 != None )
+    self.assertTrue( node2 != None )
     node.addChild(node2)
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( node.getNumChildren() == 1 )
     node3 = libsbml.XMLNode()
-    self.assert_( node3 != None )
+    self.assertTrue( node3 != None )
     node.addChild(node3)
-    self.assert_( node.getNumChildren() == 2 )
+    self.assertTrue( node.getNumChildren() == 2 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node3 ]; _dummyList[:] = []; del _dummyList
@@ -359,25 +359,25 @@ def test_XMLNode_createElement(self):
     ns.add(uri,prefix)
     attr.add("id", "value",uri,prefix)
     snode = libsbml.XMLNode(triple,attr,ns)
-    self.assert_( snode != None )
-    self.assert_( snode.getNumChildren() == 0 )
-    self.assert_( ( name != snode.getName() ) == False )
-    self.assert_( ( prefix != snode.getPrefix() ) == False )
-    self.assert_( ( uri != snode.getURI() ) == False )
-    self.assert_( snode.isElement() == True )
-    self.assert_( snode.isStart() == True )
-    self.assert_( snode.isEnd() == False )
-    self.assert_( snode.isText() == False )
+    self.assertTrue( snode != None )
+    self.assertTrue( snode.getNumChildren() == 0 )
+    self.assertTrue( ( name != snode.getName() ) == False )
+    self.assertTrue( ( prefix != snode.getPrefix() ) == False )
+    self.assertTrue( ( uri != snode.getURI() ) == False )
+    self.assertTrue( snode.isElement() == True )
+    self.assertTrue( snode.isStart() == True )
+    self.assertTrue( snode.isEnd() == False )
+    self.assertTrue( snode.isText() == False )
     snode.setEnd()
-    self.assert_( snode.isEnd() == True )
+    self.assertTrue( snode.isEnd() == True )
     snode.unsetEnd()
-    self.assert_( snode.isEnd() == False )
+    self.assertTrue( snode.isEnd() == False )
     cattr = snode.getAttributes()
-    self.assert_( cattr != None )
-    self.assert_( (  "id"    != cattr.getName(0) ) == False )
-    self.assert_( (  "value" != cattr.getValue(0) ) == False )
-    self.assert_( ( prefix != cattr.getPrefix(0) ) == False )
-    self.assert_( ( uri != cattr.getURI(0) ) == False )
+    self.assertTrue( cattr != None )
+    self.assertTrue( (  "id"    != cattr.getName(0) ) == False )
+    self.assertTrue( (  "value" != cattr.getValue(0) ) == False )
+    self.assertTrue( ( prefix != cattr.getPrefix(0) ) == False )
+    self.assertTrue( ( uri != cattr.getURI(0) ) == False )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
@@ -386,42 +386,42 @@ def test_XMLNode_createElement(self):
     attr.add("id", "value")
     triple = libsbml.XMLTriple(name, "", "")
     snode = libsbml.XMLNode(triple,attr)
-    self.assert_( snode != None )
-    self.assert_( snode.getNumChildren() == 0 )
-    self.assert_( (  "test" != snode.getName() ) == False )
-    self.assert_( snode.getPrefix() == "" )
-    self.assert_( snode.getURI() == "" )
-    self.assert_( snode.isElement() == True )
-    self.assert_( snode.isStart() == True )
-    self.assert_( snode.isEnd() == False )
-    self.assert_( snode.isText() == False )
+    self.assertTrue( snode != None )
+    self.assertTrue( snode.getNumChildren() == 0 )
+    self.assertTrue( (  "test" != snode.getName() ) == False )
+    self.assertTrue( snode.getPrefix() == "" )
+    self.assertTrue( snode.getURI() == "" )
+    self.assertTrue( snode.isElement() == True )
+    self.assertTrue( snode.isStart() == True )
+    self.assertTrue( snode.isEnd() == False )
+    self.assertTrue( snode.isText() == False )
     cattr = snode.getAttributes()
-    self.assert_( cattr != None )
-    self.assert_( (  "id"    != cattr.getName(0) ) == False )
-    self.assert_( (  "value" != cattr.getValue(0) ) == False )
-    self.assert_( cattr.getPrefix(0) == "" )
-    self.assert_( cattr.getURI(0) == "" )
+    self.assertTrue( cattr != None )
+    self.assertTrue( (  "id"    != cattr.getName(0) ) == False )
+    self.assertTrue( (  "value" != cattr.getValue(0) ) == False )
+    self.assertTrue( cattr.getPrefix(0) == "" )
+    self.assertTrue( cattr.getURI(0) == "" )
     enode = libsbml.XMLNode(triple)
-    self.assert_( enode != None )
-    self.assert_( enode.getNumChildren() == 0 )
-    self.assert_( (  "test" != enode.getName() ) == False )
-    self.assert_( enode.getPrefix() == "" )
-    self.assert_( enode.getURI() == "" )
-    self.assert_( enode.isElement() == True )
-    self.assert_( enode.isStart() == False )
-    self.assert_( enode.isEnd() == True )
-    self.assert_( enode.isText() == False )
+    self.assertTrue( enode != None )
+    self.assertTrue( enode.getNumChildren() == 0 )
+    self.assertTrue( (  "test" != enode.getName() ) == False )
+    self.assertTrue( enode.getPrefix() == "" )
+    self.assertTrue( enode.getURI() == "" )
+    self.assertTrue( enode.isElement() == True )
+    self.assertTrue( enode.isStart() == False )
+    self.assertTrue( enode.isEnd() == True )
+    self.assertTrue( enode.isText() == False )
     tnode = libsbml.XMLNode(text)
-    self.assert_( tnode != None )
-    self.assert_( ( text != tnode.getCharacters() ) == False )
-    self.assert_( tnode.getNumChildren() == 0 )
-    self.assert_( tnode.getName() == "" )
-    self.assert_( tnode.getPrefix() == "" )
-    self.assert_( tnode.getURI() == "" )
-    self.assert_( tnode.isElement() == False )
-    self.assert_( tnode.isStart() == False )
-    self.assert_( tnode.isEnd() == False )
-    self.assert_( tnode.isText() == True )
+    self.assertTrue( tnode != None )
+    self.assertTrue( ( text != tnode.getCharacters() ) == False )
+    self.assertTrue( tnode.getNumChildren() == 0 )
+    self.assertTrue( tnode.getName() == "" )
+    self.assertTrue( tnode.getPrefix() == "" )
+    self.assertTrue( tnode.getURI() == "" )
+    self.assertTrue( tnode.isElement() == False )
+    self.assertTrue( tnode.isStart() == False )
+    self.assertTrue( tnode.isEnd() == False )
+    self.assertTrue( tnode.isText() == True )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ snode ]; _dummyList[:] = []; del _dummyList
@@ -433,12 +433,12 @@ def test_XMLNode_createFromToken(self):
     triple = libsbml.XMLTriple("attr", "uri", "prefix")
     token = libsbml.XMLToken(triple)
     node = libsbml.XMLNode(token)
-    self.assert_( node != None )
-    self.assert_( node.getNumChildren() == 0 )
-    self.assert_( (  "attr" != node.getName() ) == False )
-    self.assert_( (  "prefix" != node.getPrefix() ) == False )
-    self.assert_( (  "uri" != node.getURI() ) == False )
-    self.assert_( node.getChild(1) != None )
+    self.assertTrue( node != None )
+    self.assertTrue( node.getNumChildren() == 0 )
+    self.assertTrue( (  "attr" != node.getName() ) == False )
+    self.assertTrue( (  "prefix" != node.getPrefix() ) == False )
+    self.assertTrue( (  "uri" != node.getURI() ) == False )
+    self.assertTrue( node.getChild(1) != None )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
@@ -449,28 +449,28 @@ def test_XMLNode_getters(self):
     NS.add( "http://test1.org/", "test1")
     token = libsbml.XMLToken("This is a test")
     node = libsbml.XMLNode(token)
-    self.assert_( node != None )
-    self.assert_( node.getNumChildren() == 0 )
-    self.assert_( (  "This is a test" != node.getCharacters() ) == False )
-    self.assert_( node.getChild(1) != None )
+    self.assertTrue( node != None )
+    self.assertTrue( node.getNumChildren() == 0 )
+    self.assertTrue( (  "This is a test" != node.getCharacters() ) == False )
+    self.assertTrue( node.getChild(1) != None )
     attr = libsbml.XMLAttributes()
-    self.assert_( attr != None )
+    self.assertTrue( attr != None )
     attr.add( "attr2", "value")
     triple = libsbml.XMLTriple("attr", "uri", "prefix")
     token = libsbml.XMLToken(triple,attr)
-    self.assert_( token != None )
+    self.assertTrue( token != None )
     node = libsbml.XMLNode(token)
-    self.assert_( (  "attr" != node.getName() ) == False )
-    self.assert_( (  "uri" != node.getURI() ) == False )
-    self.assert_( (  "prefix" != node.getPrefix() ) == False )
+    self.assertTrue( (  "attr" != node.getName() ) == False )
+    self.assertTrue( (  "uri" != node.getURI() ) == False )
+    self.assertTrue( (  "prefix" != node.getPrefix() ) == False )
     returnattr = node.getAttributes()
-    self.assert_( (  "attr2" != returnattr.getName(0) ) == False )
-    self.assert_( (  "value" != returnattr.getValue(0) ) == False )
+    self.assertTrue( (  "attr2" != returnattr.getName(0) ) == False )
+    self.assertTrue( (  "value" != returnattr.getValue(0) ) == False )
     token = libsbml.XMLToken(triple,attr,NS)
     node = libsbml.XMLNode(token)
     returnNS = node.getNamespaces()
-    self.assert_( returnNS.getLength() == 1 )
-    self.assert_( returnNS.isEmpty() == False )
+    self.assertTrue( returnNS.getLength() == 1 )
+    self.assertTrue( returnNS.isEmpty() == False )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
@@ -495,58 +495,58 @@ def test_XMLNode_insert(self):
     p.insertChild(0,c1)
     p.insertChild(2,c3)
     p.insertChild(4,c5)
-    self.assert_( p.getNumChildren() == 5 )
-    self.assert_( (  "child1" != p.getChild(0).getName() ) == False )
-    self.assert_( (  "child2" != p.getChild(1).getName() ) == False )
-    self.assert_( (  "child3" != p.getChild(2).getName() ) == False )
-    self.assert_( (  "child4" != p.getChild(3).getName() ) == False )
-    self.assert_( (  "child5" != p.getChild(4).getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 5 )
+    self.assertTrue( (  "child1" != p.getChild(0).getName() ) == False )
+    self.assertTrue( (  "child2" != p.getChild(1).getName() ) == False )
+    self.assertTrue( (  "child3" != p.getChild(2).getName() ) == False )
+    self.assertTrue( (  "child4" != p.getChild(3).getName() ) == False )
+    self.assertTrue( (  "child5" != p.getChild(4).getName() ) == False )
     p.removeChildren()
     p.insertChild(0,c1)
     p.insertChild(0,c2)
     p.insertChild(0,c3)
     p.insertChild(0,c4)
     p.insertChild(0,c5)
-    self.assert_( p.getNumChildren() == 5 )
-    self.assert_( (  "child5" != p.getChild(0).getName() ) == False )
-    self.assert_( (  "child4" != p.getChild(1).getName() ) == False )
-    self.assert_( (  "child3" != p.getChild(2).getName() ) == False )
-    self.assert_( (  "child2" != p.getChild(3).getName() ) == False )
-    self.assert_( (  "child1" != p.getChild(4).getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 5 )
+    self.assertTrue( (  "child5" != p.getChild(0).getName() ) == False )
+    self.assertTrue( (  "child4" != p.getChild(1).getName() ) == False )
+    self.assertTrue( (  "child3" != p.getChild(2).getName() ) == False )
+    self.assertTrue( (  "child2" != p.getChild(3).getName() ) == False )
+    self.assertTrue( (  "child1" != p.getChild(4).getName() ) == False )
     p.removeChildren()
     p.insertChild(1,c1)
     p.insertChild(2,c2)
     p.insertChild(3,c3)
     p.insertChild(4,c4)
     p.insertChild(5,c5)
-    self.assert_( p.getNumChildren() == 5 )
-    self.assert_( (  "child1" != p.getChild(0).getName() ) == False )
-    self.assert_( (  "child2" != p.getChild(1).getName() ) == False )
-    self.assert_( (  "child3" != p.getChild(2).getName() ) == False )
-    self.assert_( (  "child4" != p.getChild(3).getName() ) == False )
-    self.assert_( (  "child5" != p.getChild(4).getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 5 )
+    self.assertTrue( (  "child1" != p.getChild(0).getName() ) == False )
+    self.assertTrue( (  "child2" != p.getChild(1).getName() ) == False )
+    self.assertTrue( (  "child3" != p.getChild(2).getName() ) == False )
+    self.assertTrue( (  "child4" != p.getChild(3).getName() ) == False )
+    self.assertTrue( (  "child5" != p.getChild(4).getName() ) == False )
     p.removeChildren()
     tmp = p.insertChild(0,c1)
-    self.assert_( ( "child1" != tmp.getName() ) == False )
+    self.assertTrue( ( "child1" != tmp.getName() ) == False )
     tmp = p.insertChild(0,c2)
-    self.assert_( ( "child2" != tmp.getName() ) == False )
+    self.assertTrue( ( "child2" != tmp.getName() ) == False )
     tmp = p.insertChild(0,c3)
-    self.assert_( ( "child3" != tmp.getName() ) == False )
+    self.assertTrue( ( "child3" != tmp.getName() ) == False )
     tmp = p.insertChild(0,c4)
-    self.assert_( ( "child4" != tmp.getName() ) == False )
+    self.assertTrue( ( "child4" != tmp.getName() ) == False )
     tmp = p.insertChild(0,c5)
-    self.assert_( ( "child5" != tmp.getName() ) == False )
+    self.assertTrue( ( "child5" != tmp.getName() ) == False )
     p.removeChildren()
     tmp = p.insertChild(1,c1)
-    self.assert_( ( "child1" != tmp.getName() ) == False )
+    self.assertTrue( ( "child1" != tmp.getName() ) == False )
     tmp = p.insertChild(2,c2)
-    self.assert_( ( "child2" != tmp.getName() ) == False )
+    self.assertTrue( ( "child2" != tmp.getName() ) == False )
     tmp = p.insertChild(3,c3)
-    self.assert_( ( "child3" != tmp.getName() ) == False )
+    self.assertTrue( ( "child3" != tmp.getName() ) == False )
     tmp = p.insertChild(4,c4)
-    self.assert_( ( "child4" != tmp.getName() ) == False )
+    self.assertTrue( ( "child4" != tmp.getName() ) == False )
     tmp = p.insertChild(5,c5)
-    self.assert_( ( "child5" != tmp.getName() ) == False )
+    self.assertTrue( ( "child5" != tmp.getName() ) == False )
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ c1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ c2 ]; _dummyList[:] = []; del _dummyList
@@ -566,21 +566,21 @@ def test_XMLNode_namespace_add(self):
     triple = libsbml.XMLTriple("test","","")
     attr = libsbml.XMLAttributes()
     node = libsbml.XMLNode(triple,attr)
-    self.assert_( node.getNamespacesLength() == 0 )
-    self.assert_( node.isNamespacesEmpty() == True )
+    self.assertTrue( node.getNamespacesLength() == 0 )
+    self.assertTrue( node.isNamespacesEmpty() == True )
     node.addNamespace( "http://test1.org/", "test1")
-    self.assert_( node.getNamespacesLength() == 1 )
-    self.assert_( node.isNamespacesEmpty() == False )
+    self.assertTrue( node.getNamespacesLength() == 1 )
+    self.assertTrue( node.isNamespacesEmpty() == False )
     node.addNamespace( "http://test2.org/", "test2")
-    self.assert_( node.getNamespacesLength() == 2 )
-    self.assert_( node.isNamespacesEmpty() == False )
+    self.assertTrue( node.getNamespacesLength() == 2 )
+    self.assertTrue( node.isNamespacesEmpty() == False )
     node.addNamespace( "http://test1.org/", "test1a")
-    self.assert_( node.getNamespacesLength() == 3 )
-    self.assert_( node.isNamespacesEmpty() == False )
+    self.assertTrue( node.getNamespacesLength() == 3 )
+    self.assertTrue( node.isNamespacesEmpty() == False )
     node.addNamespace( "http://test1.org/", "test1a")
-    self.assert_( node.getNamespacesLength() == 3 )
-    self.assert_( node.isNamespacesEmpty() == False )
-    self.assert_( (node.getNamespaceIndex( "http://test1.org/") == -1) == False )
+    self.assertTrue( node.getNamespacesLength() == 3 )
+    self.assertTrue( node.isNamespacesEmpty() == False )
+    self.assertTrue( (node.getNamespaceIndex( "http://test1.org/") == -1) == False )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -599,34 +599,34 @@ def test_XMLNode_namespace_get(self):
     node.addNamespace( "http://test7.org/", "test7")
     node.addNamespace( "http://test8.org/", "test8")
     node.addNamespace( "http://test9.org/", "test9")
-    self.assert_( node.getNamespacesLength() == 9 )
-    self.assert_( node.getNamespaceIndex( "http://test1.org/") == 0 )
-    self.assert_( (  "test2" != node.getNamespacePrefix(1) ) == False )
-    self.assert_( ( 		      "test1" != node.getNamespacePrefix( "http://test1.org/") ) == False )
-    self.assert_( (  "http://test2.org/" != node.getNamespaceURI(1) ) == False )
-    self.assert_( ( 		      "http://test2.org/" != node.getNamespaceURI( "test2") ) == False )
-    self.assert_( node.getNamespaceIndex( "http://test1.org/") == 0 )
-    self.assert_( node.getNamespaceIndex( "http://test2.org/") == 1 )
-    self.assert_( node.getNamespaceIndex( "http://test5.org/") == 4 )
-    self.assert_( node.getNamespaceIndex( "http://test9.org/") == 8 )
-    self.assert_( node.getNamespaceIndex( "http://testX.org/") == -1 )
-    self.assert_( node.hasNamespaceURI( "http://test1.org/") != False )
-    self.assert_( node.hasNamespaceURI( "http://test2.org/") != False )
-    self.assert_( node.hasNamespaceURI( "http://test5.org/") != False )
-    self.assert_( node.hasNamespaceURI( "http://test9.org/") != False )
-    self.assert_( node.hasNamespaceURI( "http://testX.org/") == False )
-    self.assert_( node.getNamespaceIndexByPrefix( "test1") == 0 )
-    self.assert_( node.getNamespaceIndexByPrefix( "test5") == 4 )
-    self.assert_( node.getNamespaceIndexByPrefix( "test9") == 8 )
-    self.assert_( node.getNamespaceIndexByPrefix( "testX") == -1 )
-    self.assert_( node.hasNamespacePrefix( "test1") != False )
-    self.assert_( node.hasNamespacePrefix( "test5") != False )
-    self.assert_( node.hasNamespacePrefix( "test9") != False )
-    self.assert_( node.hasNamespacePrefix( "testX") == False )
-    self.assert_( node.hasNamespaceNS( "http://test1.org/", "test1") != False )
-    self.assert_( node.hasNamespaceNS( "http://test5.org/", "test5") != False )
-    self.assert_( node.hasNamespaceNS( "http://test9.org/", "test9") != False )
-    self.assert_( node.hasNamespaceNS( "http://testX.org/", "testX") == False )
+    self.assertTrue( node.getNamespacesLength() == 9 )
+    self.assertTrue( node.getNamespaceIndex( "http://test1.org/") == 0 )
+    self.assertTrue( (  "test2" != node.getNamespacePrefix(1) ) == False )
+    self.assertTrue( ( 		      "test1" != node.getNamespacePrefix( "http://test1.org/") ) == False )
+    self.assertTrue( (  "http://test2.org/" != node.getNamespaceURI(1) ) == False )
+    self.assertTrue( ( 		      "http://test2.org/" != node.getNamespaceURI( "test2") ) == False )
+    self.assertTrue( node.getNamespaceIndex( "http://test1.org/") == 0 )
+    self.assertTrue( node.getNamespaceIndex( "http://test2.org/") == 1 )
+    self.assertTrue( node.getNamespaceIndex( "http://test5.org/") == 4 )
+    self.assertTrue( node.getNamespaceIndex( "http://test9.org/") == 8 )
+    self.assertTrue( node.getNamespaceIndex( "http://testX.org/") == -1 )
+    self.assertTrue( node.hasNamespaceURI( "http://test1.org/") != False )
+    self.assertTrue( node.hasNamespaceURI( "http://test2.org/") != False )
+    self.assertTrue( node.hasNamespaceURI( "http://test5.org/") != False )
+    self.assertTrue( node.hasNamespaceURI( "http://test9.org/") != False )
+    self.assertTrue( node.hasNamespaceURI( "http://testX.org/") == False )
+    self.assertTrue( node.getNamespaceIndexByPrefix( "test1") == 0 )
+    self.assertTrue( node.getNamespaceIndexByPrefix( "test5") == 4 )
+    self.assertTrue( node.getNamespaceIndexByPrefix( "test9") == 8 )
+    self.assertTrue( node.getNamespaceIndexByPrefix( "testX") == -1 )
+    self.assertTrue( node.hasNamespacePrefix( "test1") != False )
+    self.assertTrue( node.hasNamespacePrefix( "test5") != False )
+    self.assertTrue( node.hasNamespacePrefix( "test9") != False )
+    self.assertTrue( node.hasNamespacePrefix( "testX") == False )
+    self.assertTrue( node.hasNamespaceNS( "http://test1.org/", "test1") != False )
+    self.assertTrue( node.hasNamespaceNS( "http://test5.org/", "test5") != False )
+    self.assertTrue( node.hasNamespaceNS( "http://test9.org/", "test9") != False )
+    self.assertTrue( node.hasNamespaceNS( "http://testX.org/", "testX") == False )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -641,33 +641,33 @@ def test_XMLNode_namespace_remove(self):
     node.addNamespace( "http://test3.org/", "test3")
     node.addNamespace( "http://test4.org/", "test4")
     node.addNamespace( "http://test5.org/", "test5")
-    self.assert_( node.getNamespacesLength() == 5 )
+    self.assertTrue( node.getNamespacesLength() == 5 )
     node.removeNamespace(4)
-    self.assert_( node.getNamespacesLength() == 4 )
+    self.assertTrue( node.getNamespacesLength() == 4 )
     node.removeNamespace(3)
-    self.assert_( node.getNamespacesLength() == 3 )
+    self.assertTrue( node.getNamespacesLength() == 3 )
     node.removeNamespace(2)
-    self.assert_( node.getNamespacesLength() == 2 )
+    self.assertTrue( node.getNamespacesLength() == 2 )
     node.removeNamespace(1)
-    self.assert_( node.getNamespacesLength() == 1 )
+    self.assertTrue( node.getNamespacesLength() == 1 )
     node.removeNamespace(0)
-    self.assert_( node.getNamespacesLength() == 0 )
+    self.assertTrue( node.getNamespacesLength() == 0 )
     node.addNamespace( "http://test1.org/", "test1")
     node.addNamespace( "http://test2.org/", "test2")
     node.addNamespace( "http://test3.org/", "test3")
     node.addNamespace( "http://test4.org/", "test4")
     node.addNamespace( "http://test5.org/", "test5")
-    self.assert_( node.getNamespacesLength() == 5 )
+    self.assertTrue( node.getNamespacesLength() == 5 )
     node.removeNamespace(0)
-    self.assert_( node.getNamespacesLength() == 4 )
+    self.assertTrue( node.getNamespacesLength() == 4 )
     node.removeNamespace(0)
-    self.assert_( node.getNamespacesLength() == 3 )
+    self.assertTrue( node.getNamespacesLength() == 3 )
     node.removeNamespace(0)
-    self.assert_( node.getNamespacesLength() == 2 )
+    self.assertTrue( node.getNamespacesLength() == 2 )
     node.removeNamespace(0)
-    self.assert_( node.getNamespacesLength() == 1 )
+    self.assertTrue( node.getNamespacesLength() == 1 )
     node.removeNamespace(0)
-    self.assert_( node.getNamespacesLength() == 0 )
+    self.assertTrue( node.getNamespacesLength() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -682,49 +682,49 @@ def test_XMLNode_namespace_remove_by_prefix(self):
     node.addNamespace( "http://test3.org/", "test3")
     node.addNamespace( "http://test4.org/", "test4")
     node.addNamespace( "http://test5.org/", "test5")
-    self.assert_( node.getNamespacesLength() == 5 )
+    self.assertTrue( node.getNamespacesLength() == 5 )
     node.removeNamespace( "test1")
-    self.assert_( node.getNamespacesLength() == 4 )
+    self.assertTrue( node.getNamespacesLength() == 4 )
     node.removeNamespace( "test2")
-    self.assert_( node.getNamespacesLength() == 3 )
+    self.assertTrue( node.getNamespacesLength() == 3 )
     node.removeNamespace( "test3")
-    self.assert_( node.getNamespacesLength() == 2 )
+    self.assertTrue( node.getNamespacesLength() == 2 )
     node.removeNamespace( "test4")
-    self.assert_( node.getNamespacesLength() == 1 )
+    self.assertTrue( node.getNamespacesLength() == 1 )
     node.removeNamespace( "test5")
-    self.assert_( node.getNamespacesLength() == 0 )
+    self.assertTrue( node.getNamespacesLength() == 0 )
     node.addNamespace( "http://test1.org/", "test1")
     node.addNamespace( "http://test2.org/", "test2")
     node.addNamespace( "http://test3.org/", "test3")
     node.addNamespace( "http://test4.org/", "test4")
     node.addNamespace( "http://test5.org/", "test5")
-    self.assert_( node.getNamespacesLength() == 5 )
+    self.assertTrue( node.getNamespacesLength() == 5 )
     node.removeNamespace( "test5")
-    self.assert_( node.getNamespacesLength() == 4 )
+    self.assertTrue( node.getNamespacesLength() == 4 )
     node.removeNamespace( "test4")
-    self.assert_( node.getNamespacesLength() == 3 )
+    self.assertTrue( node.getNamespacesLength() == 3 )
     node.removeNamespace( "test3")
-    self.assert_( node.getNamespacesLength() == 2 )
+    self.assertTrue( node.getNamespacesLength() == 2 )
     node.removeNamespace( "test2")
-    self.assert_( node.getNamespacesLength() == 1 )
+    self.assertTrue( node.getNamespacesLength() == 1 )
     node.removeNamespace( "test1")
-    self.assert_( node.getNamespacesLength() == 0 )
+    self.assertTrue( node.getNamespacesLength() == 0 )
     node.addNamespace( "http://test1.org/", "test1")
     node.addNamespace( "http://test2.org/", "test2")
     node.addNamespace( "http://test3.org/", "test3")
     node.addNamespace( "http://test4.org/", "test4")
     node.addNamespace( "http://test5.org/", "test5")
-    self.assert_( node.getNamespacesLength() == 5 )
+    self.assertTrue( node.getNamespacesLength() == 5 )
     node.removeNamespace( "test3")
-    self.assert_( node.getNamespacesLength() == 4 )
+    self.assertTrue( node.getNamespacesLength() == 4 )
     node.removeNamespace( "test1")
-    self.assert_( node.getNamespacesLength() == 3 )
+    self.assertTrue( node.getNamespacesLength() == 3 )
     node.removeNamespace( "test4")
-    self.assert_( node.getNamespacesLength() == 2 )
+    self.assertTrue( node.getNamespacesLength() == 2 )
     node.removeNamespace( "test5")
-    self.assert_( node.getNamespacesLength() == 1 )
+    self.assertTrue( node.getNamespacesLength() == 1 )
     node.removeNamespace( "test2")
-    self.assert_( node.getNamespacesLength() == 0 )
+    self.assertTrue( node.getNamespacesLength() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -735,29 +735,29 @@ def test_XMLNode_namespace_set_clear(self):
     attr = libsbml.XMLAttributes()
     node = libsbml.XMLNode(triple,attr)
     ns = libsbml.XMLNamespaces()
-    self.assert_( node.getNamespacesLength() == 0 )
-    self.assert_( node.isNamespacesEmpty() == True )
+    self.assertTrue( node.getNamespacesLength() == 0 )
+    self.assertTrue( node.isNamespacesEmpty() == True )
     ns.add( "http://test1.org/", "test1")
     ns.add( "http://test2.org/", "test2")
     ns.add( "http://test3.org/", "test3")
     ns.add( "http://test4.org/", "test4")
     ns.add( "http://test5.org/", "test5")
     node.setNamespaces(ns)
-    self.assert_( node.getNamespacesLength() == 5 )
-    self.assert_( node.isNamespacesEmpty() == False )
-    self.assert_( (  "test1" != node.getNamespacePrefix(0) ) == False )
-    self.assert_( (  "test2" != node.getNamespacePrefix(1) ) == False )
-    self.assert_( (  "test3" != node.getNamespacePrefix(2) ) == False )
-    self.assert_( (  "test4" != node.getNamespacePrefix(3) ) == False )
-    self.assert_( (  "test5" != node.getNamespacePrefix(4) ) == False )
-    self.assert_( (  "http://test1.org/" != node.getNamespaceURI(0) ) == False )
-    self.assert_( (  "http://test2.org/" != node.getNamespaceURI(1) ) == False )
-    self.assert_( (  "http://test3.org/" != node.getNamespaceURI(2) ) == False )
-    self.assert_( (  "http://test4.org/" != node.getNamespaceURI(3) ) == False )
-    self.assert_( (  "http://test5.org/" != node.getNamespaceURI(4) ) == False )
+    self.assertTrue( node.getNamespacesLength() == 5 )
+    self.assertTrue( node.isNamespacesEmpty() == False )
+    self.assertTrue( (  "test1" != node.getNamespacePrefix(0) ) == False )
+    self.assertTrue( (  "test2" != node.getNamespacePrefix(1) ) == False )
+    self.assertTrue( (  "test3" != node.getNamespacePrefix(2) ) == False )
+    self.assertTrue( (  "test4" != node.getNamespacePrefix(3) ) == False )
+    self.assertTrue( (  "test5" != node.getNamespacePrefix(4) ) == False )
+    self.assertTrue( (  "http://test1.org/" != node.getNamespaceURI(0) ) == False )
+    self.assertTrue( (  "http://test2.org/" != node.getNamespaceURI(1) ) == False )
+    self.assertTrue( (  "http://test3.org/" != node.getNamespaceURI(2) ) == False )
+    self.assertTrue( (  "http://test4.org/" != node.getNamespaceURI(3) ) == False )
+    self.assertTrue( (  "http://test5.org/" != node.getNamespaceURI(4) ) == False )
     node.clearNamespaces()
-    self.assert_( node.getNamespacesLength() == 0 )
-    self.assert_( node.isAttributesEmpty() != False )
+    self.assertTrue( node.getNamespacesLength() == 0 )
+    self.assertTrue( node.isAttributesEmpty() != False )
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
@@ -784,26 +784,26 @@ def test_XMLNode_remove(self):
     p.addChild(c4)
     p.addChild(c5)
     r = p.removeChild(5)
-    self.assert_( r == None )
+    self.assertTrue( r == None )
     r = p.removeChild(1)
-    self.assert_( p.getNumChildren() == 4 )
-    self.assert_( ( "child2" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 4 )
+    self.assertTrue( ( "child2" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(3)
-    self.assert_( p.getNumChildren() == 3 )
-    self.assert_( ( "child5" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 3 )
+    self.assertTrue( ( "child5" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(0)
-    self.assert_( p.getNumChildren() == 2 )
-    self.assert_( ( "child1" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 2 )
+    self.assertTrue( ( "child1" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(1)
-    self.assert_( p.getNumChildren() == 1 )
-    self.assert_( ( "child4" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 1 )
+    self.assertTrue( ( "child4" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(0)
-    self.assert_( p.getNumChildren() == 0 )
-    self.assert_( ( "child3" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 0 )
+    self.assertTrue( ( "child3" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     p.addChild(c1)
     p.addChild(c2)
@@ -811,24 +811,24 @@ def test_XMLNode_remove(self):
     p.addChild(c4)
     p.addChild(c5)
     r = p.removeChild(4)
-    self.assert_( p.getNumChildren() == 4 )
-    self.assert_( ( "child5" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 4 )
+    self.assertTrue( ( "child5" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(3)
-    self.assert_( p.getNumChildren() == 3 )
-    self.assert_( ( "child4" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 3 )
+    self.assertTrue( ( "child4" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(2)
-    self.assert_( p.getNumChildren() == 2 )
-    self.assert_( ( "child3" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 2 )
+    self.assertTrue( ( "child3" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(1)
-    self.assert_( p.getNumChildren() == 1 )
-    self.assert_( ( "child2" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 1 )
+    self.assertTrue( ( "child2" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(0)
-    self.assert_( p.getNumChildren() == 0 )
-    self.assert_( ( "child1" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 0 )
+    self.assertTrue( ( "child1" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     p.addChild(c1)
     p.addChild(c2)
@@ -836,24 +836,24 @@ def test_XMLNode_remove(self):
     p.addChild(c4)
     p.addChild(c5)
     r = p.removeChild(0)
-    self.assert_( p.getNumChildren() == 4 )
-    self.assert_( ( "child1" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 4 )
+    self.assertTrue( ( "child1" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(0)
-    self.assert_( p.getNumChildren() == 3 )
-    self.assert_( ( "child2" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 3 )
+    self.assertTrue( ( "child2" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(0)
-    self.assert_( p.getNumChildren() == 2 )
-    self.assert_( ( "child3" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 2 )
+    self.assertTrue( ( "child3" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(0)
-    self.assert_( p.getNumChildren() == 1 )
-    self.assert_( ( "child4" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 1 )
+    self.assertTrue( ( "child4" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(0)
-    self.assert_( p.getNumChildren() == 0 )
-    self.assert_( ( "child5" != r.getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 0 )
+    self.assertTrue( ( "child5" != r.getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     p.addChild(c1)
     p.addChild(c2)
@@ -861,34 +861,34 @@ def test_XMLNode_remove(self):
     p.addChild(c4)
     p.addChild(c5)
     r = p.removeChild(0)
-    self.assert_( ( "child1" != r.getName() ) == False )
+    self.assertTrue( ( "child1" != r.getName() ) == False )
     p.insertChild(0,r)
-    self.assert_( p.getNumChildren() == 5 )
-    self.assert_( ( "child1" != p.getChild(0).getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 5 )
+    self.assertTrue( ( "child1" != p.getChild(0).getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(1)
-    self.assert_( ( "child2" != r.getName() ) == False )
+    self.assertTrue( ( "child2" != r.getName() ) == False )
     p.insertChild(1,r)
-    self.assert_( p.getNumChildren() == 5 )
-    self.assert_( ( "child2" != p.getChild(1).getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 5 )
+    self.assertTrue( ( "child2" != p.getChild(1).getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(2)
-    self.assert_( ( "child3" != r.getName() ) == False )
+    self.assertTrue( ( "child3" != r.getName() ) == False )
     p.insertChild(2,r)
-    self.assert_( p.getNumChildren() == 5 )
-    self.assert_( ( "child3" != p.getChild(2).getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 5 )
+    self.assertTrue( ( "child3" != p.getChild(2).getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(3)
-    self.assert_( ( "child4" != r.getName() ) == False )
+    self.assertTrue( ( "child4" != r.getName() ) == False )
     p.insertChild(3,r)
-    self.assert_( p.getNumChildren() == 5 )
-    self.assert_( ( "child4" != p.getChild(3).getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 5 )
+    self.assertTrue( ( "child4" != p.getChild(3).getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     r = p.removeChild(4)
-    self.assert_( ( "child5" != r.getName() ) == False )
+    self.assertTrue( ( "child5" != r.getName() ) == False )
     p.insertChild(4,r)
-    self.assert_( p.getNumChildren() == 5 )
-    self.assert_( ( "child5" != p.getChild(4).getName() ) == False )
+    self.assertTrue( p.getNumChildren() == 5 )
+    self.assertTrue( ( "child5" != p.getChild(4).getName() ) == False )
     _dummyList = [ r ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ p ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ c1 ]; _dummyList[:] = []; del _dummyList
diff --git a/src/bindings/python/test/xml/TestXMLNode_newSetters.py b/src/bindings/python/test/xml/TestXMLNode_newSetters.py
index 5fd632211f..0f1cd1738d 100644
--- a/src/bindings/python/test/xml/TestXMLNode_newSetters.py
+++ b/src/bindings/python/test/xml/TestXMLNode_newSetters.py
@@ -41,8 +41,8 @@ def test_XMLNode_addChild1(self):
     node = libsbml.XMLNode()
     node2 = libsbml.XMLNode()
     i = node.addChild(node2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 1 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node2 ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -53,8 +53,8 @@ def test_XMLNode_addChild2(self):
     node = libsbml.XMLNode(triple,attr)
     node2 = libsbml.XMLNode()
     i = node.addChild(node2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 1 )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
@@ -66,8 +66,8 @@ def test_XMLNode_addChild3(self):
     node = libsbml.XMLNode(triple)
     node2 = libsbml.XMLNode()
     i = node.addChild(node2)
-    self.assert_( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
-    self.assert_( node.getNumChildren() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
+    self.assertTrue( node.getNumChildren() == 0 )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node2 ]; _dummyList[:] = []; del _dummyList
@@ -80,20 +80,20 @@ def test_XMLNode_clearAttributes(self):
     xt2 = libsbml.XMLTriple("name3", "http://name3.org/", "p3")
     xt1 = libsbml.XMLTriple("name5", "http://name5.org/", "p5")
     i = node.addAttr( "name1", "val1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 1 )
     i = node.addAttr( "name2", "val2", "http://name1.org/", "p1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 2 )
     i = node.addAttr(xt2, "val2")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 3 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 3 )
     i = node.addAttr( "name4", "val4")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 4 )
     i = node.clearAttributes()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 0 )
     _dummyList = [ xt1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
@@ -106,17 +106,17 @@ def test_XMLNode_clearNamespaces(self):
     attr = libsbml.XMLAttributes()
     node = libsbml.XMLNode(triple,attr)
     i = node.addNamespace( "http://test1.org/", "test1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 1 )
+    self.assertTrue( nms.getLength() == 1 )
     i = node.addNamespace( "http://test2.org/", "test2")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 2 )
+    self.assertTrue( nms.getLength() == 2 )
     i = node.clearNamespaces()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 0 )
+    self.assertTrue( nms.getLength() == 0 )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
@@ -129,38 +129,38 @@ def test_XMLNode_removeAttributes(self):
     xt2 = libsbml.XMLTriple("name3", "http://name3.org/", "p3")
     xt1 = libsbml.XMLTriple("name5", "http://name5.org/", "p5")
     i = node.addAttr( "name1", "val1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 1 )
     i = node.addAttr( "name2", "val2", "http://name1.org/", "p1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 2 )
     i = node.addAttr(xt2, "val2")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 3 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 3 )
     i = node.addAttr( "name4", "val4")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 4 )
     i = node.removeAttr(7)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     i = node.removeAttr( "name7")
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     i = node.removeAttr( "name7", "namespaces7")
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     i = node.removeAttr(xt1)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( node.getAttributes().getLength() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( node.getAttributes().getLength() == 4 )
     i = node.removeAttr(3)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 3 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 3 )
     i = node.removeAttr( "name1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 2 )
     i = node.removeAttr( "name2", "http://name1.org/")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 1 )
     i = node.removeAttr(xt2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getAttributes().getLength() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getAttributes().getLength() == 0 )
     _dummyList = [ xt1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
@@ -174,10 +174,10 @@ def test_XMLNode_removeChildren(self):
     node3 = libsbml.XMLNode()
     node.addChild(node2)
     node.addChild(node3)
-    self.assert_( node.getNumChildren() == 2 )
+    self.assertTrue( node.getNumChildren() == 2 )
     i = node.removeChildren()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( node.getNumChildren() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( node.getNumChildren() == 0 )
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node3 ]; _dummyList[:] = []; del _dummyList
@@ -188,29 +188,29 @@ def test_XMLNode_removeNamespaces(self):
     attr = libsbml.XMLAttributes()
     node = libsbml.XMLNode(triple,attr)
     i = node.addNamespace( "http://test1.org/", "test1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 1 )
+    self.assertTrue( nms.getLength() == 1 )
     i = node.addNamespace( "http://test2.org/", "test2")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 2 )
+    self.assertTrue( nms.getLength() == 2 )
     i = node.removeNamespace(7)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 2 )
+    self.assertTrue( nms.getLength() == 2 )
     i = node.removeNamespace( "name7")
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 2 )
+    self.assertTrue( nms.getLength() == 2 )
     i = node.removeNamespace(0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 1 )
+    self.assertTrue( nms.getLength() == 1 )
     i = node.removeNamespace( "test2")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
     nms = node.getNamespaces()
-    self.assert_( nms.getLength() == 0 )
+    self.assertTrue( nms.getLength() == 0 )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
diff --git a/src/bindings/python/test/xml/TestXMLOutputStream.py b/src/bindings/python/test/xml/TestXMLOutputStream.py
index 94bf335ef1..85a32d5d15 100644
--- a/src/bindings/python/test/xml/TestXMLOutputStream.py
+++ b/src/bindings/python/test/xml/TestXMLOutputStream.py
@@ -59,7 +59,7 @@ def test_XMLOutputStream_CharacterReference(self):
     stream.endElement( "testcr")
     expected =  "<testcr chars=\"one\" amp=\"&amp;\" deccr=\"&#0168;\" hexcr=\"&#x00a8;\" lhexcr=\"&#x00A8;\" nodeccr1=\"&amp;#01688\" nodeccr2=\"&amp;#;\" nodeccr3=\"&amp;#00a8;\" nodeccr4=\"&amp;#00A8;\" nohexcr1=\"&amp;#x;\" nohexcr2=\"&amp;#xABCD\"/>";
     s = oss.str()
-    self.assert_(( expected == s ))
+    self.assertTrue(( expected == s ))
     _dummyList = [ stream ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -80,7 +80,7 @@ def test_XMLOutputStream_Elements(self):
     stream.endElement( "fred")
     expected =  "<fred chars=\"two\" bool=\"true\" double=\"2.4\" long=\"123456789\" uint=\"5\" int=\"-3\"/>";
     s = oss.str()
-    self.assert_(( expected == s ))
+    self.assertTrue(( expected == s ))
     _dummyList = [ stream ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -101,19 +101,19 @@ def test_XMLOutputStream_PredefinedEntity(self):
     stream.endElement( "testpde")
     expected =  "<testpde amp=\"&amp;\" apos=\"&apos;\" gt=\"&gt;\" lt=\"&lt;\" quot=\"&quot;\" pdeamp=\"&amp;\" pdeapos=\"&apos;\" pdegt=\"&gt;\" pdelt=\"&lt;\" pdequot=\"&quot;\"/>";
     s = oss.str()
-    self.assert_(( expected == s ))
+    self.assertTrue(( expected == s ))
     _dummyList = [ stream ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_XMLOutputStream_createStdout(self):
     stream = libsbml.XMLOutputStream(libsbml.cout,"UTF-8",False)
-    self.assert_( stream != None )
+    self.assertTrue( stream != None )
     _dummyList = [ stream ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_XMLOutputStream_createStdoutWithProgramInfo(self):
     stream = libsbml.XMLOutputStream(libsbml.cout,"UTF-8",False, "foo", "bar")
-    self.assert_( stream != None )
+    self.assertTrue( stream != None )
     _dummyList = [ stream ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -121,9 +121,9 @@ def test_XMLOutputStream_createString(self):
     expected =  "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
     oss = libsbml.ostringstream()
     stream = libsbml.XMLOutputStream(oss,"UTF-8",True)
-    self.assert_( stream != None )
+    self.assertTrue( stream != None )
     str = oss.str()
-    self.assert_(( expected == str ))
+    self.assertTrue(( expected == str ))
     _dummyList = [ stream ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -131,19 +131,19 @@ def test_XMLOutputStream_createStringWithProgramInfo(self):
     expected =  "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
     oss = libsbml.ostringstream()
     stream = libsbml.XMLOutputStream(oss,"UTF-8",True, "", "")
-    self.assert_( stream != None )
+    self.assertTrue( stream != None )
     str = oss.str()
-    self.assert_(( expected == str ))
+    self.assertTrue(( expected == str ))
     _dummyList = [ stream ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_XMLOutputStream_startEnd(self):
     oss = libsbml.ostringstream()
     stream = libsbml.XMLOutputStream(oss,"",False)
-    self.assert_( stream != None )
+    self.assertTrue( stream != None )
     stream.startEndElement( "id")
     str = oss.str()
-    self.assert_((  "<id/>" == str ))
+    self.assertTrue((  "<id/>" == str ))
     _dummyList = [ stream ]; _dummyList[:] = []; del _dummyList
     pass  
 
diff --git a/src/bindings/python/test/xml/TestXMLToken.py b/src/bindings/python/test/xml/TestXMLToken.py
index 8ab05e4000..756ea6bc3f 100644
--- a/src/bindings/python/test/xml/TestXMLToken.py
+++ b/src/bindings/python/test/xml/TestXMLToken.py
@@ -48,109 +48,109 @@ def test_XMLToken_attribute_add_remove(self):
     xt2a = libsbml.XMLTriple("name2", "http://name2a.org/", "p2a")
     token.addAttr( "name1", "val1", "http://name1.org/", "p1")
     token.addAttr(xt2, "val2")
-    self.assert_( token.getAttributesLength() == 2 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "name1" != token.getAttrName(0) ) == False )
-    self.assert_( (  "val1"  != token.getAttrValue(0) ) == False )
-    self.assert_( (  "http://name1.org/" != token.getAttrURI(0) ) == False )
-    self.assert_( (  "p1"    != token.getAttrPrefix(0) ) == False )
-    self.assert_( (  "name2" != token.getAttrName(1) ) == False )
-    self.assert_( (  "val2"  != token.getAttrValue(1) ) == False )
-    self.assert_( (  "http://name2.org/" != token.getAttrURI(1) ) == False )
-    self.assert_( (  "p2"    != token.getAttrPrefix(1) ) == False )
-    self.assert_( token.getAttrValue( "name1") == "" )
-    self.assert_( token.getAttrValue( "name2") == "" )
-    self.assert_( (  "val1"  != token.getAttrValue( "name1", "http://name1.org/") ) == False )
-    self.assert_( (  "val2"  != token.getAttrValue( "name2", "http://name2.org/") ) == False )
-    self.assert_( (  "val1"  != token.getAttrValue(xt1) ) == False )
-    self.assert_( (  "val2"  != token.getAttrValue(xt2) ) == False )
-    self.assert_( token.hasAttr(-1) == False )
-    self.assert_( token.hasAttr(2) == False )
-    self.assert_( token.hasAttr(0) == True )
-    self.assert_( token.hasAttr( "name1", "http://name1.org/") == True )
-    self.assert_( token.hasAttr( "name2", "http://name2.org/") == True )
-    self.assert_( token.hasAttr( "name3", "http://name3.org/") == False )
-    self.assert_( token.hasAttr(xt1) == True )
-    self.assert_( token.hasAttr(xt2) == True )
-    self.assert_( token.hasAttr(xt3) == False )
+    self.assertTrue( token.getAttributesLength() == 2 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "name1" != token.getAttrName(0) ) == False )
+    self.assertTrue( (  "val1"  != token.getAttrValue(0) ) == False )
+    self.assertTrue( (  "http://name1.org/" != token.getAttrURI(0) ) == False )
+    self.assertTrue( (  "p1"    != token.getAttrPrefix(0) ) == False )
+    self.assertTrue( (  "name2" != token.getAttrName(1) ) == False )
+    self.assertTrue( (  "val2"  != token.getAttrValue(1) ) == False )
+    self.assertTrue( (  "http://name2.org/" != token.getAttrURI(1) ) == False )
+    self.assertTrue( (  "p2"    != token.getAttrPrefix(1) ) == False )
+    self.assertTrue( token.getAttrValue( "name1") == "" )
+    self.assertTrue( token.getAttrValue( "name2") == "" )
+    self.assertTrue( (  "val1"  != token.getAttrValue( "name1", "http://name1.org/") ) == False )
+    self.assertTrue( (  "val2"  != token.getAttrValue( "name2", "http://name2.org/") ) == False )
+    self.assertTrue( (  "val1"  != token.getAttrValue(xt1) ) == False )
+    self.assertTrue( (  "val2"  != token.getAttrValue(xt2) ) == False )
+    self.assertTrue( token.hasAttr(-1) == False )
+    self.assertTrue( token.hasAttr(2) == False )
+    self.assertTrue( token.hasAttr(0) == True )
+    self.assertTrue( token.hasAttr( "name1", "http://name1.org/") == True )
+    self.assertTrue( token.hasAttr( "name2", "http://name2.org/") == True )
+    self.assertTrue( token.hasAttr( "name3", "http://name3.org/") == False )
+    self.assertTrue( token.hasAttr(xt1) == True )
+    self.assertTrue( token.hasAttr(xt2) == True )
+    self.assertTrue( token.hasAttr(xt3) == False )
     token.addAttr( "noprefix", "val3")
-    self.assert_( token.getAttributesLength() == 3 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "noprefix" != token.getAttrName(2) ) == False )
-    self.assert_( (  "val3"     != token.getAttrValue(2) ) == False )
-    self.assert_( token.getAttrURI(2) == "" )
-    self.assert_( token.getAttrPrefix(2) == "" )
-    self.assert_( (      "val3"  != token.getAttrValue( "noprefix") ) == False )
-    self.assert_( (  "val3"  != token.getAttrValue( "noprefix", "") ) == False )
-    self.assert_( token.hasAttr( "noprefix"    ) == True )
-    self.assert_( token.hasAttr( "noprefix", "") == True )
+    self.assertTrue( token.getAttributesLength() == 3 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "noprefix" != token.getAttrName(2) ) == False )
+    self.assertTrue( (  "val3"     != token.getAttrValue(2) ) == False )
+    self.assertTrue( token.getAttrURI(2) == "" )
+    self.assertTrue( token.getAttrPrefix(2) == "" )
+    self.assertTrue( (      "val3"  != token.getAttrValue( "noprefix") ) == False )
+    self.assertTrue( (  "val3"  != token.getAttrValue( "noprefix", "") ) == False )
+    self.assertTrue( token.hasAttr( "noprefix"    ) == True )
+    self.assertTrue( token.hasAttr( "noprefix", "") == True )
     token.addAttr(xt1, "mval1")
     token.addAttr( "name2", "mval2", "http://name2.org/", "p2")
-    self.assert_( token.getAttributesLength() == 3 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "name1" != token.getAttrName(0) ) == False )
-    self.assert_( (  "mval1" != token.getAttrValue(0) ) == False )
-    self.assert_( (  "http://name1.org/" != token.getAttrURI(0) ) == False )
-    self.assert_( (  "p1"    != token.getAttrPrefix(0) ) == False )
-    self.assert_( (  "name2"    != token.getAttrName(1) ) == False )
-    self.assert_( (  "mval2"    != token.getAttrValue(1) ) == False )
-    self.assert_( (  "http://name2.org/" != token.getAttrURI(1) ) == False )
-    self.assert_( (  "p2"       != token.getAttrPrefix(1) ) == False )
-    self.assert_( token.hasAttr(xt1) == True )
-    self.assert_( token.hasAttr( "name1", "http://name1.org/") == True )
+    self.assertTrue( token.getAttributesLength() == 3 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "name1" != token.getAttrName(0) ) == False )
+    self.assertTrue( (  "mval1" != token.getAttrValue(0) ) == False )
+    self.assertTrue( (  "http://name1.org/" != token.getAttrURI(0) ) == False )
+    self.assertTrue( (  "p1"    != token.getAttrPrefix(0) ) == False )
+    self.assertTrue( (  "name2"    != token.getAttrName(1) ) == False )
+    self.assertTrue( (  "mval2"    != token.getAttrValue(1) ) == False )
+    self.assertTrue( (  "http://name2.org/" != token.getAttrURI(1) ) == False )
+    self.assertTrue( (  "p2"       != token.getAttrPrefix(1) ) == False )
+    self.assertTrue( token.hasAttr(xt1) == True )
+    self.assertTrue( token.hasAttr( "name1", "http://name1.org/") == True )
     token.addAttr( "noprefix", "mval3")
-    self.assert_( token.getAttributesLength() == 3 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "noprefix" != token.getAttrName(2) ) == False )
-    self.assert_( (  "mval3"    != token.getAttrValue(2) ) == False )
-    self.assert_( token.getAttrURI(2) == "" )
-    self.assert_( token.getAttrPrefix(2) == "" )
-    self.assert_( token.hasAttr( "noprefix") == True )
-    self.assert_( token.hasAttr( "noprefix", "") == True )
+    self.assertTrue( token.getAttributesLength() == 3 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "noprefix" != token.getAttrName(2) ) == False )
+    self.assertTrue( (  "mval3"    != token.getAttrValue(2) ) == False )
+    self.assertTrue( token.getAttrURI(2) == "" )
+    self.assertTrue( token.getAttrPrefix(2) == "" )
+    self.assertTrue( token.hasAttr( "noprefix") == True )
+    self.assertTrue( token.hasAttr( "noprefix", "") == True )
     token.addAttr(xt1a, "val1a")
     token.addAttr(xt2a, "val2a")
-    self.assert_( token.getAttributesLength() == 5 )
-    self.assert_( (  "name1" != token.getAttrName(3) ) == False )
-    self.assert_( (  "val1a" != token.getAttrValue(3) ) == False )
-    self.assert_( (  "http://name1a.org/" != token.getAttrURI(3) ) == False )
-    self.assert_( (  "p1a" != token.getAttrPrefix(3) ) == False )
-    self.assert_( (  "name2" != token.getAttrName(4) ) == False )
-    self.assert_( (  "val2a" != token.getAttrValue(4) ) == False )
-    self.assert_( (  "http://name2a.org/" != token.getAttrURI(4) ) == False )
-    self.assert_( (  "p2a" != token.getAttrPrefix(4) ) == False )
-    self.assert_( (  "val1a"  != token.getAttrValue( "name1", "http://name1a.org/") ) == False )
-    self.assert_( (  "val2a"  != token.getAttrValue( "name2", "http://name2a.org/") ) == False )
-    self.assert_( (  "val1a"  != token.getAttrValue(xt1a) ) == False )
-    self.assert_( (  "val2a"  != token.getAttrValue(xt2a) ) == False )
+    self.assertTrue( token.getAttributesLength() == 5 )
+    self.assertTrue( (  "name1" != token.getAttrName(3) ) == False )
+    self.assertTrue( (  "val1a" != token.getAttrValue(3) ) == False )
+    self.assertTrue( (  "http://name1a.org/" != token.getAttrURI(3) ) == False )
+    self.assertTrue( (  "p1a" != token.getAttrPrefix(3) ) == False )
+    self.assertTrue( (  "name2" != token.getAttrName(4) ) == False )
+    self.assertTrue( (  "val2a" != token.getAttrValue(4) ) == False )
+    self.assertTrue( (  "http://name2a.org/" != token.getAttrURI(4) ) == False )
+    self.assertTrue( (  "p2a" != token.getAttrPrefix(4) ) == False )
+    self.assertTrue( (  "val1a"  != token.getAttrValue( "name1", "http://name1a.org/") ) == False )
+    self.assertTrue( (  "val2a"  != token.getAttrValue( "name2", "http://name2a.org/") ) == False )
+    self.assertTrue( (  "val1a"  != token.getAttrValue(xt1a) ) == False )
+    self.assertTrue( (  "val2a"  != token.getAttrValue(xt2a) ) == False )
     token.removeAttr(xt1a)
     token.removeAttr(xt2a)
-    self.assert_( token.getAttributesLength() == 3 )
+    self.assertTrue( token.getAttributesLength() == 3 )
     token.removeAttr( "name1", "http://name1.org/")
-    self.assert_( token.getAttributesLength() == 2 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "name2" != token.getAttrName(0) ) == False )
-    self.assert_( (  "mval2" != token.getAttrValue(0) ) == False )
-    self.assert_( (  "http://name2.org/" != token.getAttrURI(0) ) == False )
-    self.assert_( (  "p2" != token.getAttrPrefix(0) ) == False )
-    self.assert_( (  "noprefix" != token.getAttrName(1) ) == False )
-    self.assert_( (  "mval3" != token.getAttrValue(1) ) == False )
-    self.assert_( token.getAttrURI(1) == "" )
-    self.assert_( token.getAttrPrefix(1) == "" )
-    self.assert_( token.hasAttr( "name1", "http://name1.org/") == False )
+    self.assertTrue( token.getAttributesLength() == 2 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "name2" != token.getAttrName(0) ) == False )
+    self.assertTrue( (  "mval2" != token.getAttrValue(0) ) == False )
+    self.assertTrue( (  "http://name2.org/" != token.getAttrURI(0) ) == False )
+    self.assertTrue( (  "p2" != token.getAttrPrefix(0) ) == False )
+    self.assertTrue( (  "noprefix" != token.getAttrName(1) ) == False )
+    self.assertTrue( (  "mval3" != token.getAttrValue(1) ) == False )
+    self.assertTrue( token.getAttrURI(1) == "" )
+    self.assertTrue( token.getAttrPrefix(1) == "" )
+    self.assertTrue( token.hasAttr( "name1", "http://name1.org/") == False )
     token.removeAttr(xt2)
-    self.assert_( token.getAttributesLength() == 1 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "noprefix" != token.getAttrName(0) ) == False )
-    self.assert_( (  "mval3" != token.getAttrValue(0) ) == False )
-    self.assert_( token.getAttrURI(0) == "" )
-    self.assert_( token.getAttrPrefix(0) == "" )
-    self.assert_( token.hasAttr(xt2) == False )
-    self.assert_( token.hasAttr( "name2", "http://name2.org/") == False )
+    self.assertTrue( token.getAttributesLength() == 1 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "noprefix" != token.getAttrName(0) ) == False )
+    self.assertTrue( (  "mval3" != token.getAttrValue(0) ) == False )
+    self.assertTrue( token.getAttrURI(0) == "" )
+    self.assertTrue( token.getAttrPrefix(0) == "" )
+    self.assertTrue( token.hasAttr(xt2) == False )
+    self.assertTrue( token.hasAttr( "name2", "http://name2.org/") == False )
     token.removeAttr( "noprefix")
-    self.assert_( token.getAttributesLength() == 0 )
-    self.assert_( token.isAttributesEmpty() == True )
-    self.assert_( token.hasAttr( "noprefix"    ) == False )
-    self.assert_( token.hasAttr( "noprefix", "") == False )
+    self.assertTrue( token.getAttributesLength() == 0 )
+    self.assertTrue( token.isAttributesEmpty() == True )
+    self.assertTrue( token.hasAttr( "noprefix"    ) == False )
+    self.assertTrue( token.hasAttr( "noprefix", "") == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
@@ -177,36 +177,36 @@ def test_XMLToken_attribute_set_clear(self):
     nattr.add(xt4, "val4")
     nattr.add(xt5, "val5")
     token.setAttributes(nattr)
-    self.assert_( token.getAttributesLength() == 5 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "name1" != token.getAttrName(0) ) == False )
-    self.assert_( (  "val1"  != token.getAttrValue(0) ) == False )
-    self.assert_( (  "http://name1.org/" != token.getAttrURI(0) ) == False )
-    self.assert_( (  "p1"    != token.getAttrPrefix(0) ) == False )
-    self.assert_( (  "name2" != token.getAttrName(1) ) == False )
-    self.assert_( (  "val2"  != token.getAttrValue(1) ) == False )
-    self.assert_( (  "http://name2.org/" != token.getAttrURI(1) ) == False )
-    self.assert_( (  "p2"    != token.getAttrPrefix(1) ) == False )
-    self.assert_( (  "name3" != token.getAttrName(2) ) == False )
-    self.assert_( (  "val3"  != token.getAttrValue(2) ) == False )
-    self.assert_( (  "http://name3.org/" != token.getAttrURI(2) ) == False )
-    self.assert_( (  "p3"    != token.getAttrPrefix(2) ) == False )
-    self.assert_( (  "name4" != token.getAttrName(3) ) == False )
-    self.assert_( (  "val4"  != token.getAttrValue(3) ) == False )
-    self.assert_( (  "http://name4.org/" != token.getAttrURI(3) ) == False )
-    self.assert_( (  "p4"    != token.getAttrPrefix(3) ) == False )
-    self.assert_( (  "name5" != token.getAttrName(4) ) == False )
-    self.assert_( (  "val5"  != token.getAttrValue(4) ) == False )
-    self.assert_( (  "http://name5.org/" != token.getAttrURI(4) ) == False )
-    self.assert_( (  "p5"    != token.getAttrPrefix(4) ) == False )
+    self.assertTrue( token.getAttributesLength() == 5 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "name1" != token.getAttrName(0) ) == False )
+    self.assertTrue( (  "val1"  != token.getAttrValue(0) ) == False )
+    self.assertTrue( (  "http://name1.org/" != token.getAttrURI(0) ) == False )
+    self.assertTrue( (  "p1"    != token.getAttrPrefix(0) ) == False )
+    self.assertTrue( (  "name2" != token.getAttrName(1) ) == False )
+    self.assertTrue( (  "val2"  != token.getAttrValue(1) ) == False )
+    self.assertTrue( (  "http://name2.org/" != token.getAttrURI(1) ) == False )
+    self.assertTrue( (  "p2"    != token.getAttrPrefix(1) ) == False )
+    self.assertTrue( (  "name3" != token.getAttrName(2) ) == False )
+    self.assertTrue( (  "val3"  != token.getAttrValue(2) ) == False )
+    self.assertTrue( (  "http://name3.org/" != token.getAttrURI(2) ) == False )
+    self.assertTrue( (  "p3"    != token.getAttrPrefix(2) ) == False )
+    self.assertTrue( (  "name4" != token.getAttrName(3) ) == False )
+    self.assertTrue( (  "val4"  != token.getAttrValue(3) ) == False )
+    self.assertTrue( (  "http://name4.org/" != token.getAttrURI(3) ) == False )
+    self.assertTrue( (  "p4"    != token.getAttrPrefix(3) ) == False )
+    self.assertTrue( (  "name5" != token.getAttrName(4) ) == False )
+    self.assertTrue( (  "val5"  != token.getAttrValue(4) ) == False )
+    self.assertTrue( (  "http://name5.org/" != token.getAttrURI(4) ) == False )
+    self.assertTrue( (  "p5"    != token.getAttrPrefix(4) ) == False )
     ntriple = libsbml.XMLTriple("test2","http://test2.org/","p2")
     token.setTriple(ntriple)
-    self.assert_( (    "test2" != token.getName() ) == False )
-    self.assert_( (     "http://test2.org/" != token.getURI() ) == False )
-    self.assert_( (  "p2" != token.getPrefix() ) == False )
+    self.assertTrue( (    "test2" != token.getName() ) == False )
+    self.assertTrue( (     "http://test2.org/" != token.getURI() ) == False )
+    self.assertTrue( (  "p2" != token.getPrefix() ) == False )
     token.clearAttributes()
-    self.assert_( token.getAttributesLength() == 0 )
-    self.assert_( token.isAttributesEmpty() != False )
+    self.assertTrue( token.getAttributesLength() == 0 )
+    self.assertTrue( token.isAttributesEmpty() != False )
     _dummyList = [ nattr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ntriple ]; _dummyList[:] = []; del _dummyList
@@ -221,33 +221,33 @@ def test_XMLToken_attribute_set_clear(self):
 
   def test_XMLToken_chars(self):
     token = libsbml.XMLToken("This is text")
-    self.assert_( token.isElement() == False )
-    self.assert_( token.isEnd() == False )
-    self.assert_( token.isStart() == False )
-    self.assert_( token.isText() == True )
-    self.assert_( token.isEOF() == False )
-    self.assert_( (  "This is text" != token.getCharacters() ) == False )
+    self.assertTrue( token.isElement() == False )
+    self.assertTrue( token.isEnd() == False )
+    self.assertTrue( token.isStart() == False )
+    self.assertTrue( token.isText() == True )
+    self.assertTrue( token.isEOF() == False )
+    self.assertTrue( (  "This is text" != token.getCharacters() ) == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_XMLToken_create(self):
     token = libsbml.XMLToken()
-    self.assert_( token != None )
+    self.assertTrue( token != None )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     triple = libsbml.XMLTriple("attr", "uri", "prefix")
     token = libsbml.XMLToken(triple)
-    self.assert_( token != None )
-    self.assert_( (  "attr" != token.getName() ) == False )
-    self.assert_( (  "prefix" != token.getPrefix() ) == False )
-    self.assert_( (  "uri" != token.getURI() ) == False )
+    self.assertTrue( token != None )
+    self.assertTrue( (  "attr" != token.getName() ) == False )
+    self.assertTrue( (  "prefix" != token.getPrefix() ) == False )
+    self.assertTrue( (  "uri" != token.getURI() ) == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     attr = libsbml.XMLAttributes()
-    self.assert_( attr != None )
+    self.assertTrue( attr != None )
     attr.add( "attr2", "value")
     token = libsbml.XMLToken(triple,attr)
-    self.assert_( token != None )
+    self.assertTrue( token != None )
     returnattr = token.getAttributes()
-    self.assert_( (  "attr2" != returnattr.getName(0) ) == False )
+    self.assertTrue( (  "attr2" != returnattr.getName(0) ) == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -256,14 +256,14 @@ def test_XMLToken_create(self):
   def test_XMLToken_fields(self):
     triple = libsbml.XMLTriple("attr", "uri", "prefix")
     token = libsbml.XMLToken(triple)
-    self.assert_( token.isElement() == True )
-    self.assert_( token.isEnd() == True )
-    self.assert_( token.isStart() == False )
-    self.assert_( token.isText() == False )
-    self.assert_( token.isEOF() == False )
-    self.assert_( (  "attr" != token.getName() ) == False )
-    self.assert_( (  "uri" != token.getURI() ) == False )
-    self.assert_( (  "prefix" != token.getPrefix() ) == False )
+    self.assertTrue( token.isElement() == True )
+    self.assertTrue( token.isEnd() == True )
+    self.assertTrue( token.isStart() == False )
+    self.assertTrue( token.isText() == False )
+    self.assertTrue( token.isEOF() == False )
+    self.assertTrue( (  "attr" != token.getName() ) == False )
+    self.assertTrue( (  "uri" != token.getURI() ) == False )
+    self.assertTrue( (  "prefix" != token.getPrefix() ) == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -272,21 +272,21 @@ def test_XMLToken_namespace_add(self):
     triple = libsbml.XMLTriple("test","","")
     attr = libsbml.XMLAttributes()
     token = libsbml.XMLToken(triple,attr)
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     token.addNamespace( "http://test1.org/", "test1")
-    self.assert_( token.getNamespacesLength() == 1 )
-    self.assert_( token.isNamespacesEmpty() == False )
+    self.assertTrue( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.isNamespacesEmpty() == False )
     token.addNamespace( "http://test2.org/", "test2")
-    self.assert_( token.getNamespacesLength() == 2 )
-    self.assert_( token.isNamespacesEmpty() == False )
+    self.assertTrue( token.getNamespacesLength() == 2 )
+    self.assertTrue( token.isNamespacesEmpty() == False )
     token.addNamespace( "http://test1.org/", "test1a")
-    self.assert_( token.getNamespacesLength() == 3 )
-    self.assert_( token.isNamespacesEmpty() == False )
+    self.assertTrue( token.getNamespacesLength() == 3 )
+    self.assertTrue( token.isNamespacesEmpty() == False )
     token.addNamespace( "http://test1.org/", "test1a")
-    self.assert_( token.getNamespacesLength() == 3 )
-    self.assert_( token.isNamespacesEmpty() == False )
-    self.assert_( (token.getNamespaceIndex( "http://test1.org/") == -1) == False )
+    self.assertTrue( token.getNamespacesLength() == 3 )
+    self.assertTrue( token.isNamespacesEmpty() == False )
+    self.assertTrue( (token.getNamespaceIndex( "http://test1.org/") == -1) == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -305,34 +305,34 @@ def test_XMLToken_namespace_get(self):
     token.addNamespace( "http://test7.org/", "test7")
     token.addNamespace( "http://test8.org/", "test8")
     token.addNamespace( "http://test9.org/", "test9")
-    self.assert_( token.getNamespacesLength() == 9 )
-    self.assert_( token.getNamespaceIndex( "http://test1.org/") == 0 )
-    self.assert_( (  "test2" != token.getNamespacePrefix(1) ) == False )
-    self.assert_( ( 		      "test1" != token.getNamespacePrefix( "http://test1.org/") ) == False )
-    self.assert_( (  "http://test2.org/" != token.getNamespaceURI(1) ) == False )
-    self.assert_( ( 		      "http://test2.org/" != token.getNamespaceURI( "test2") ) == False )
-    self.assert_( token.getNamespaceIndex( "http://test1.org/") == 0 )
-    self.assert_( token.getNamespaceIndex( "http://test2.org/") == 1 )
-    self.assert_( token.getNamespaceIndex( "http://test5.org/") == 4 )
-    self.assert_( token.getNamespaceIndex( "http://test9.org/") == 8 )
-    self.assert_( token.getNamespaceIndex( "http://testX.org/") == -1 )
-    self.assert_( token.hasNamespaceURI( "http://test1.org/") != False )
-    self.assert_( token.hasNamespaceURI( "http://test2.org/") != False )
-    self.assert_( token.hasNamespaceURI( "http://test5.org/") != False )
-    self.assert_( token.hasNamespaceURI( "http://test9.org/") != False )
-    self.assert_( token.hasNamespaceURI( "http://testX.org/") == False )
-    self.assert_( token.getNamespaceIndexByPrefix( "test1") == 0 )
-    self.assert_( token.getNamespaceIndexByPrefix( "test5") == 4 )
-    self.assert_( token.getNamespaceIndexByPrefix( "test9") == 8 )
-    self.assert_( token.getNamespaceIndexByPrefix( "testX") == -1 )
-    self.assert_( token.hasNamespacePrefix( "test1") != False )
-    self.assert_( token.hasNamespacePrefix( "test5") != False )
-    self.assert_( token.hasNamespacePrefix( "test9") != False )
-    self.assert_( token.hasNamespacePrefix( "testX") == False )
-    self.assert_( token.hasNamespaceNS( "http://test1.org/", "test1") != False )
-    self.assert_( token.hasNamespaceNS( "http://test5.org/", "test5") != False )
-    self.assert_( token.hasNamespaceNS( "http://test9.org/", "test9") != False )
-    self.assert_( token.hasNamespaceNS( "http://testX.org/", "testX") == False )
+    self.assertTrue( token.getNamespacesLength() == 9 )
+    self.assertTrue( token.getNamespaceIndex( "http://test1.org/") == 0 )
+    self.assertTrue( (  "test2" != token.getNamespacePrefix(1) ) == False )
+    self.assertTrue( ( 		      "test1" != token.getNamespacePrefix( "http://test1.org/") ) == False )
+    self.assertTrue( (  "http://test2.org/" != token.getNamespaceURI(1) ) == False )
+    self.assertTrue( ( 		      "http://test2.org/" != token.getNamespaceURI( "test2") ) == False )
+    self.assertTrue( token.getNamespaceIndex( "http://test1.org/") == 0 )
+    self.assertTrue( token.getNamespaceIndex( "http://test2.org/") == 1 )
+    self.assertTrue( token.getNamespaceIndex( "http://test5.org/") == 4 )
+    self.assertTrue( token.getNamespaceIndex( "http://test9.org/") == 8 )
+    self.assertTrue( token.getNamespaceIndex( "http://testX.org/") == -1 )
+    self.assertTrue( token.hasNamespaceURI( "http://test1.org/") != False )
+    self.assertTrue( token.hasNamespaceURI( "http://test2.org/") != False )
+    self.assertTrue( token.hasNamespaceURI( "http://test5.org/") != False )
+    self.assertTrue( token.hasNamespaceURI( "http://test9.org/") != False )
+    self.assertTrue( token.hasNamespaceURI( "http://testX.org/") == False )
+    self.assertTrue( token.getNamespaceIndexByPrefix( "test1") == 0 )
+    self.assertTrue( token.getNamespaceIndexByPrefix( "test5") == 4 )
+    self.assertTrue( token.getNamespaceIndexByPrefix( "test9") == 8 )
+    self.assertTrue( token.getNamespaceIndexByPrefix( "testX") == -1 )
+    self.assertTrue( token.hasNamespacePrefix( "test1") != False )
+    self.assertTrue( token.hasNamespacePrefix( "test5") != False )
+    self.assertTrue( token.hasNamespacePrefix( "test9") != False )
+    self.assertTrue( token.hasNamespacePrefix( "testX") == False )
+    self.assertTrue( token.hasNamespaceNS( "http://test1.org/", "test1") != False )
+    self.assertTrue( token.hasNamespaceNS( "http://test5.org/", "test5") != False )
+    self.assertTrue( token.hasNamespaceNS( "http://test9.org/", "test9") != False )
+    self.assertTrue( token.hasNamespaceNS( "http://testX.org/", "testX") == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -347,33 +347,33 @@ def test_XMLToken_namespace_remove(self):
     token.addNamespace( "http://test3.org/", "test3")
     token.addNamespace( "http://test4.org/", "test4")
     token.addNamespace( "http://test5.org/", "test5")
-    self.assert_( token.getNamespacesLength() == 5 )
+    self.assertTrue( token.getNamespacesLength() == 5 )
     token.removeNamespace(4)
-    self.assert_( token.getNamespacesLength() == 4 )
+    self.assertTrue( token.getNamespacesLength() == 4 )
     token.removeNamespace(3)
-    self.assert_( token.getNamespacesLength() == 3 )
+    self.assertTrue( token.getNamespacesLength() == 3 )
     token.removeNamespace(2)
-    self.assert_( token.getNamespacesLength() == 2 )
+    self.assertTrue( token.getNamespacesLength() == 2 )
     token.removeNamespace(1)
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     token.removeNamespace(0)
-    self.assert_( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.getNamespacesLength() == 0 )
     token.addNamespace( "http://test1.org/", "test1")
     token.addNamespace( "http://test2.org/", "test2")
     token.addNamespace( "http://test3.org/", "test3")
     token.addNamespace( "http://test4.org/", "test4")
     token.addNamespace( "http://test5.org/", "test5")
-    self.assert_( token.getNamespacesLength() == 5 )
+    self.assertTrue( token.getNamespacesLength() == 5 )
     token.removeNamespace(0)
-    self.assert_( token.getNamespacesLength() == 4 )
+    self.assertTrue( token.getNamespacesLength() == 4 )
     token.removeNamespace(0)
-    self.assert_( token.getNamespacesLength() == 3 )
+    self.assertTrue( token.getNamespacesLength() == 3 )
     token.removeNamespace(0)
-    self.assert_( token.getNamespacesLength() == 2 )
+    self.assertTrue( token.getNamespacesLength() == 2 )
     token.removeNamespace(0)
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     token.removeNamespace(0)
-    self.assert_( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.getNamespacesLength() == 0 )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -388,49 +388,49 @@ def test_XMLToken_namespace_remove_by_prefix(self):
     token.addNamespace( "http://test3.org/", "test3")
     token.addNamespace( "http://test4.org/", "test4")
     token.addNamespace( "http://test5.org/", "test5")
-    self.assert_( token.getNamespacesLength() == 5 )
+    self.assertTrue( token.getNamespacesLength() == 5 )
     token.removeNamespace( "test1")
-    self.assert_( token.getNamespacesLength() == 4 )
+    self.assertTrue( token.getNamespacesLength() == 4 )
     token.removeNamespace( "test2")
-    self.assert_( token.getNamespacesLength() == 3 )
+    self.assertTrue( token.getNamespacesLength() == 3 )
     token.removeNamespace( "test3")
-    self.assert_( token.getNamespacesLength() == 2 )
+    self.assertTrue( token.getNamespacesLength() == 2 )
     token.removeNamespace( "test4")
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     token.removeNamespace( "test5")
-    self.assert_( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.getNamespacesLength() == 0 )
     token.addNamespace( "http://test1.org/", "test1")
     token.addNamespace( "http://test2.org/", "test2")
     token.addNamespace( "http://test3.org/", "test3")
     token.addNamespace( "http://test4.org/", "test4")
     token.addNamespace( "http://test5.org/", "test5")
-    self.assert_( token.getNamespacesLength() == 5 )
+    self.assertTrue( token.getNamespacesLength() == 5 )
     token.removeNamespace( "test5")
-    self.assert_( token.getNamespacesLength() == 4 )
+    self.assertTrue( token.getNamespacesLength() == 4 )
     token.removeNamespace( "test4")
-    self.assert_( token.getNamespacesLength() == 3 )
+    self.assertTrue( token.getNamespacesLength() == 3 )
     token.removeNamespace( "test3")
-    self.assert_( token.getNamespacesLength() == 2 )
+    self.assertTrue( token.getNamespacesLength() == 2 )
     token.removeNamespace( "test2")
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     token.removeNamespace( "test1")
-    self.assert_( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.getNamespacesLength() == 0 )
     token.addNamespace( "http://test1.org/", "test1")
     token.addNamespace( "http://test2.org/", "test2")
     token.addNamespace( "http://test3.org/", "test3")
     token.addNamespace( "http://test4.org/", "test4")
     token.addNamespace( "http://test5.org/", "test5")
-    self.assert_( token.getNamespacesLength() == 5 )
+    self.assertTrue( token.getNamespacesLength() == 5 )
     token.removeNamespace( "test3")
-    self.assert_( token.getNamespacesLength() == 4 )
+    self.assertTrue( token.getNamespacesLength() == 4 )
     token.removeNamespace( "test1")
-    self.assert_( token.getNamespacesLength() == 3 )
+    self.assertTrue( token.getNamespacesLength() == 3 )
     token.removeNamespace( "test4")
-    self.assert_( token.getNamespacesLength() == 2 )
+    self.assertTrue( token.getNamespacesLength() == 2 )
     token.removeNamespace( "test5")
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     token.removeNamespace( "test2")
-    self.assert_( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.getNamespacesLength() == 0 )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -441,28 +441,28 @@ def test_XMLToken_namespace_set_clear(self):
     attr = libsbml.XMLAttributes()
     token = libsbml.XMLToken(triple,attr)
     ns = libsbml.XMLNamespaces()
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     ns.add( "http://test1.org/", "test1")
     ns.add( "http://test2.org/", "test2")
     ns.add( "http://test3.org/", "test3")
     ns.add( "http://test4.org/", "test4")
     ns.add( "http://test5.org/", "test5")
     token.setNamespaces(ns)
-    self.assert_( token.getNamespacesLength() == 5 )
-    self.assert_( token.isNamespacesEmpty() == False )
-    self.assert_( (  "test1" != token.getNamespacePrefix(0) ) == False )
-    self.assert_( (  "test2" != token.getNamespacePrefix(1) ) == False )
-    self.assert_( (  "test3" != token.getNamespacePrefix(2) ) == False )
-    self.assert_( (  "test4" != token.getNamespacePrefix(3) ) == False )
-    self.assert_( (  "test5" != token.getNamespacePrefix(4) ) == False )
-    self.assert_( (  "http://test1.org/" != token.getNamespaceURI(0) ) == False )
-    self.assert_( (  "http://test2.org/" != token.getNamespaceURI(1) ) == False )
-    self.assert_( (  "http://test3.org/" != token.getNamespaceURI(2) ) == False )
-    self.assert_( (  "http://test4.org/" != token.getNamespaceURI(3) ) == False )
-    self.assert_( (  "http://test5.org/" != token.getNamespaceURI(4) ) == False )
+    self.assertTrue( token.getNamespacesLength() == 5 )
+    self.assertTrue( token.isNamespacesEmpty() == False )
+    self.assertTrue( (  "test1" != token.getNamespacePrefix(0) ) == False )
+    self.assertTrue( (  "test2" != token.getNamespacePrefix(1) ) == False )
+    self.assertTrue( (  "test3" != token.getNamespacePrefix(2) ) == False )
+    self.assertTrue( (  "test4" != token.getNamespacePrefix(3) ) == False )
+    self.assertTrue( (  "test5" != token.getNamespacePrefix(4) ) == False )
+    self.assertTrue( (  "http://test1.org/" != token.getNamespaceURI(0) ) == False )
+    self.assertTrue( (  "http://test2.org/" != token.getNamespaceURI(1) ) == False )
+    self.assertTrue( (  "http://test3.org/" != token.getNamespaceURI(2) ) == False )
+    self.assertTrue( (  "http://test4.org/" != token.getNamespaceURI(3) ) == False )
+    self.assertTrue( (  "http://test5.org/" != token.getNamespaceURI(4) ) == False )
     token.clearNamespaces()
-    self.assert_( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.getNamespacesLength() == 0 )
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
diff --git a/src/bindings/python/test/xml/TestXMLToken_newSetters.py b/src/bindings/python/test/xml/TestXMLToken_newSetters.py
index e1683377d6..e6e45f16f7 100644
--- a/src/bindings/python/test/xml/TestXMLToken_newSetters.py
+++ b/src/bindings/python/test/xml/TestXMLToken_newSetters.py
@@ -43,27 +43,27 @@ def test_XMLToken_newSetters_addAttributes1(self):
     token = libsbml.XMLToken(triple,attr)
     xt2 = libsbml.XMLTriple("name3", "http://name3.org/", "p3")
     i = token.addAttr( "name1", "val1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getAttributesLength() == 1 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "name1" != token.getAttrName(0) ) == False )
-    self.assert_( (  "val1"  != token.getAttrValue(0) ) == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getAttributesLength() == 1 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "name1" != token.getAttrName(0) ) == False )
+    self.assertTrue( (  "val1"  != token.getAttrValue(0) ) == False )
     i = token.addAttr( "name2", "val2", "http://name1.org/", "p1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getAttributesLength() == 2 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "name2" != token.getAttrName(1) ) == False )
-    self.assert_( (  "val2"  != token.getAttrValue(1) ) == False )
-    self.assert_( (  "http://name1.org/" != token.getAttrURI(1) ) == False )
-    self.assert_( (  "p1"    != token.getAttrPrefix(1) ) == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getAttributesLength() == 2 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "name2" != token.getAttrName(1) ) == False )
+    self.assertTrue( (  "val2"  != token.getAttrValue(1) ) == False )
+    self.assertTrue( (  "http://name1.org/" != token.getAttrURI(1) ) == False )
+    self.assertTrue( (  "p1"    != token.getAttrPrefix(1) ) == False )
     i = token.addAttr(xt2, "val2")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getAttributesLength() == 3 )
-    self.assert_( token.isAttributesEmpty() == False )
-    self.assert_( (  "name3" != token.getAttrName(2) ) == False )
-    self.assert_( (  "val2"  != token.getAttrValue(2) ) == False )
-    self.assert_( (  "http://name3.org/" != token.getAttrURI(2) ) == False )
-    self.assert_( (  "p3"    != token.getAttrPrefix(2) ) == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getAttributesLength() == 3 )
+    self.assertTrue( token.isAttributesEmpty() == False )
+    self.assertTrue( (  "name3" != token.getAttrName(2) ) == False )
+    self.assertTrue( (  "val2"  != token.getAttrValue(2) ) == False )
+    self.assertTrue( (  "http://name3.org/" != token.getAttrURI(2) ) == False )
+    self.assertTrue( (  "p3"    != token.getAttrPrefix(2) ) == False )
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -75,17 +75,17 @@ def test_XMLToken_newSetters_addAttributes2(self):
     token = libsbml.XMLToken(triple)
     xt2 = libsbml.XMLTriple("name3", "http://name3.org/", "p3")
     i = token.addAttr( "name1", "val1")
-    self.assert_( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
-    self.assert_( token.getAttributesLength() == 0 )
-    self.assert_( token.isAttributesEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
+    self.assertTrue( token.getAttributesLength() == 0 )
+    self.assertTrue( token.isAttributesEmpty() == True )
     i = token.addAttr( "name2", "val2", "http://name1.org/", "p1")
-    self.assert_( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
-    self.assert_( token.getAttributesLength() == 0 )
-    self.assert_( token.isAttributesEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
+    self.assertTrue( token.getAttributesLength() == 0 )
+    self.assertTrue( token.isAttributesEmpty() == True )
     i = token.addAttr(xt2, "val2")
-    self.assert_( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
-    self.assert_( token.getAttributesLength() == 0 )
-    self.assert_( token.isAttributesEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
+    self.assertTrue( token.getAttributesLength() == 0 )
+    self.assertTrue( token.isAttributesEmpty() == True )
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
@@ -95,12 +95,12 @@ def test_XMLToken_newSetters_addNamespaces1(self):
     triple = libsbml.XMLTriple("test","","")
     attr = libsbml.XMLAttributes()
     token = libsbml.XMLToken(triple,attr)
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     i = token.addNamespace( "http://test1.org/", "test1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getNamespacesLength() == 1 )
-    self.assert_( token.isNamespacesEmpty() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.isNamespacesEmpty() == False )
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
@@ -109,12 +109,12 @@ def test_XMLToken_newSetters_addNamespaces1(self):
   def test_XMLToken_newSetters_addNamespaces2(self):
     triple = libsbml.XMLTriple("test","","")
     token = libsbml.XMLToken(triple)
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     i = token.addNamespace( "http://test1.org/", "test1")
-    self.assert_( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -127,11 +127,11 @@ def test_XMLToken_newSetters_clearAttributes1(self):
     xt1 = libsbml.XMLTriple("name1", "http://name1.org/", "p1")
     nattr.add(xt1, "val1")
     i = token.setAttributes(nattr)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.isAttributesEmpty() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.isAttributesEmpty() == False )
     i = token.clearAttributes()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.isAttributesEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.isAttributesEmpty() == True )
     _dummyList = [ nattr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
@@ -144,17 +144,17 @@ def test_XMLToken_newSetters_clearNamespaces1(self):
     attr = libsbml.XMLAttributes()
     token = libsbml.XMLToken(triple,attr)
     ns = libsbml.XMLNamespaces()
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     ns.add( "http://test1.org/", "test1")
     i = token.setNamespaces(ns)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getNamespacesLength() == 1 )
-    self.assert_( token.isNamespacesEmpty() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.isNamespacesEmpty() == False )
     i = token.clearNamespaces()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
@@ -171,28 +171,28 @@ def test_XMLToken_newSetters_removeAttributes1(self):
     i = token.addAttr( "name2", "val2", "http://name1.org/", "p1")
     i = token.addAttr(xt2, "val2")
     i = token.addAttr( "name4", "val4")
-    self.assert_( token.getAttributes().getLength() == 4 )
+    self.assertTrue( token.getAttributes().getLength() == 4 )
     i = token.removeAttr(7)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     i = token.removeAttr( "name7")
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     i = token.removeAttr( "name7", "namespaces7")
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
     i = token.removeAttr(xt1)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( token.getAttributes().getLength() == 4 )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( token.getAttributes().getLength() == 4 )
     i = token.removeAttr(3)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getAttributes().getLength() == 3 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getAttributes().getLength() == 3 )
     i = token.removeAttr( "name1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getAttributes().getLength() == 2 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getAttributes().getLength() == 2 )
     i = token.removeAttr( "name2", "http://name1.org/")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getAttributes().getLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getAttributes().getLength() == 1 )
     i = token.removeAttr(xt2)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getAttributes().getLength() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getAttributes().getLength() == 0 )
     _dummyList = [ xt1 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
@@ -205,13 +205,13 @@ def test_XMLToken_newSetters_removeNamespaces(self):
     attr = libsbml.XMLAttributes()
     token = libsbml.XMLToken(triple,attr)
     token.addNamespace( "http://test1.org/", "test1")
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     i = token.removeNamespace(4)
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     i = token.removeNamespace(0)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getNamespacesLength() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getNamespacesLength() == 0 )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -222,13 +222,13 @@ def test_XMLToken_newSetters_removeNamespaces1(self):
     attr = libsbml.XMLAttributes()
     token = libsbml.XMLToken(triple,attr)
     token.addNamespace( "http://test1.org/", "test1")
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     i = token.removeNamespace( "test2")
-    self.assert_( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
-    self.assert_( token.getNamespacesLength() == 1 )
+    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
+    self.assertTrue( token.getNamespacesLength() == 1 )
     i = token.removeNamespace( "test1")
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getNamespacesLength() == 0 )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getNamespacesLength() == 0 )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
@@ -242,8 +242,8 @@ def test_XMLToken_newSetters_setAttributes1(self):
     xt1 = libsbml.XMLTriple("name1", "http://name1.org/", "p1")
     nattr.add(xt1, "val1")
     i = token.setAttributes(nattr)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.isAttributesEmpty() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.isAttributesEmpty() == False )
     _dummyList = [ nattr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
@@ -258,8 +258,8 @@ def test_XMLToken_newSetters_setAttributes2(self):
     xt1 = libsbml.XMLTriple("name1", "http://name1.org/", "p1")
     nattr.add(xt1, "val1")
     i = token.setAttributes(nattr)
-    self.assert_( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
-    self.assert_( token.isAttributesEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
+    self.assertTrue( token.isAttributesEmpty() == True )
     _dummyList = [ nattr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
@@ -268,24 +268,24 @@ def test_XMLToken_newSetters_setAttributes2(self):
 
   def test_XMLToken_newSetters_setEOF(self):
     token = libsbml.XMLToken()
-    self.assert_( token.isEnd() == False )
+    self.assertTrue( token.isEnd() == False )
     i = token.setEOF()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.isEnd() == False )
-    self.assert_( token.isStart() == False )
-    self.assert_( token.isText() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.isEnd() == False )
+    self.assertTrue( token.isStart() == False )
+    self.assertTrue( token.isText() == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     pass  
 
   def test_XMLToken_newSetters_setEnd(self):
     token = libsbml.XMLToken()
-    self.assert_( token.isEnd() == False )
+    self.assertTrue( token.isEnd() == False )
     i = token.setEnd()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.isEnd() == True )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.isEnd() == True )
     i = token.unsetEnd()
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.isEnd() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.isEnd() == False )
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     pass  
 
@@ -294,13 +294,13 @@ def test_XMLToken_newSetters_setNamespaces1(self):
     attr = libsbml.XMLAttributes()
     token = libsbml.XMLToken(triple,attr)
     ns = libsbml.XMLNamespaces()
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     ns.add( "http://test1.org/", "test1")
     i = token.setNamespaces(ns)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_( token.getNamespacesLength() == 1 )
-    self.assert_( token.isNamespacesEmpty() == False )
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue( token.getNamespacesLength() == 1 )
+    self.assertTrue( token.isNamespacesEmpty() == False )
     _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
@@ -311,13 +311,13 @@ def test_XMLToken_newSetters_setNamespaces2(self):
     triple = libsbml.XMLTriple("test","","")
     token = libsbml.XMLToken(triple)
     ns = libsbml.XMLNamespaces()
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     ns.add( "http://test1.org/", "test1")
     i = token.setNamespaces(ns)
-    self.assert_( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
-    self.assert_( token.getNamespacesLength() == 0 )
-    self.assert_( token.isNamespacesEmpty() == True )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
+    self.assertTrue( token.getNamespacesLength() == 0 )
+    self.assertTrue( token.isNamespacesEmpty() == True )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
@@ -327,8 +327,8 @@ def test_XMLToken_newSetters_setTriple1(self):
     triple = libsbml.XMLTriple("test","","")
     token = libsbml.XMLToken()
     i = token.setTriple(triple)
-    self.assert_( i == libsbml.LIBSBML_OPERATION_SUCCESS )
-    self.assert_((  "test" == token.getName() ))
+    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
+    self.assertTrue((  "test" == token.getName() ))
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     pass  
@@ -337,7 +337,7 @@ def test_XMLToken_newSetters_setTriple2(self):
     triple = libsbml.XMLTriple("test","","")
     token = libsbml.XMLToken("This is text")
     i = token.setTriple(triple)
-    self.assert_( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
+    self.assertTrue( i == libsbml.LIBSBML_INVALID_XML_OPERATION )
     _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
     _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
     pass  
diff --git a/src/bindings/python/test/xml/TestXMLTriple.py b/src/bindings/python/test/xml/TestXMLTriple.py
index 6fee89bcad..b393526066 100644
--- a/src/bindings/python/test/xml/TestXMLTriple.py
+++ b/src/bindings/python/test/xml/TestXMLTriple.py
@@ -39,22 +39,22 @@ class TestXMLTriple(unittest.TestCase):
 
   def test_XMLTriple_create(self):
     t = libsbml.XMLTriple()
-    self.assert_( t != None )
-    self.assert_( t.isEmpty() != False )
+    self.assertTrue( t != None )
+    self.assertTrue( t.isEmpty() != False )
     _dummyList = [ t ]; _dummyList[:] = []; del _dummyList
     t = libsbml.XMLTriple("attr", "uri", "prefix")
-    self.assert_( (  "attr" != t.getName() ) == False )
-    self.assert_( (  "uri" != t.getURI() ) == False )
-    self.assert_( (  "prefix" != t.getPrefix() ) == False )
-    self.assert_( (  "prefix:attr" != t.getPrefixedName() ) == False )
-    self.assert_( t.isEmpty() == False )
+    self.assertTrue( (  "attr" != t.getName() ) == False )
+    self.assertTrue( (  "uri" != t.getURI() ) == False )
+    self.assertTrue( (  "prefix" != t.getPrefix() ) == False )
+    self.assertTrue( (  "prefix:attr" != t.getPrefixedName() ) == False )
+    self.assertTrue( t.isEmpty() == False )
     _dummyList = [ t ]; _dummyList[:] = []; del _dummyList
     t = libsbml.XMLTriple("attr", "uri", "")
-    self.assert_( (  "attr" != t.getName() ) == False )
-    self.assert_( (  "uri" != t.getURI() ) == False )
-    self.assert_( t.getPrefix() == "" )
-    self.assert_( (  "attr" != t.getPrefixedName() ) == False )
-    self.assert_( t.isEmpty() == False )
+    self.assertTrue( (  "attr" != t.getName() ) == False )
+    self.assertTrue( (  "uri" != t.getURI() ) == False )
+    self.assertTrue( t.getPrefix() == "" )
+    self.assertTrue( (  "attr" != t.getPrefixedName() ) == False )
+    self.assertTrue( t.isEmpty() == False )
     _dummyList = [ t ]; _dummyList[:] = []; del _dummyList
     pass  
 
